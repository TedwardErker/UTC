texture.params[1:2]$shift
texture
image.path
texture.params
band.appendage
band.appendage <- "_ratio_nir"
c(3,3)
?glcm
texture.params
+ . + + . + Error in { : 
raster(paste0(dd.training.dir,"/","madisonNAIP.4_ratio.nir.tif")
)
registerDoSEQ()
registerDoSEQ()
registerDoSEQ()
stopCluster()
texture.params.df
stopCluster) <- 
stopCluster()
stopCluster()
registerDoSEQ()
cores
cores <- 10
cores
cores
texture.params
texture.params
+ . + 
stack(paste0(dd.training.dir,"/madisonNAIP.1_blue.tif"),paste0(dd.training.dir,"/madisonNAIP.1_red.tif"))
image.name
tile.names
warnings()
cores
pca.transform(dd.training.dir, "madisonNAIP.1")
pca.transformation(dd.training.dir, "madisonNAIP.1")
pca.transformation(dd.training.dir, "madisonNAIP.10")
image.name
"madisonNAIP.1"
image.name <- "madisonNAIP.1"
pca.transformation(dd.training.dir, "madisonNAIP.10")
pca.transformation(dd.training.dir, "madisonNAIP.10")
dd.accuracy.dir
+ . + + . + 
save.pixel.feature.df(dd.training.dir, "madisonNAIP.10")
save.pixel.feature.df(dd.training.dir, "madisonNAIP.10", feature.pattern = "_(blue|green|ndvi|nir|ratio.blue|ratio.green|ratio.nir_stat\\.\\w+_window\\.\\d+_angle\\..?\\d+).tif")
save.pixel.feature.df(dd.training.dir, "madisonNAIP.10", feature.pattern = "_(blue|green|ndvi|nir|ratio.blue|ratio.green|ratio.nir_stat\\.\\w+_window\\.\\d+_angle\\..?\\d+).tif")
pixel.feature.df.appendage
image.dir <- dd.training.dir
image.name
image.name <- "madisonNAIP.10"
s
warnings()
+ . + + . + 
dd.accuracy.dir
image.names
tile.names
tile.names
tile.names
grid.pattern
tile.names
tile.names
tile.names
tile.names
str_extract(tile.names, pattern = str_c(img.nm,"_",grid.pattern,"[0-9]+.tif"))
str_extract(tile.names, pattern = str_c(img.nm,"_",grid.pattern,"[0-9]+.tif"))
grid.pattern
str_extract(tile.names, pattern = str_c(img.nm,"_",grid.pattern,"[0-9]+.tif"))
str_extract(tile.names, pattern = str_c(img.nm,"_",grid.pattern,".tif"))
tile.names
tile.names
tile.names
str(tile.names)
str(tile.names)
str(tile.names)
img.nm
tile.names[6]
i <- tile.names[6]
i
tile.names
calc.texture(texture.params.df, dd.accuracy.dir, tile.names[6])
calc.texture(texture.params, dd.accuracy.dir, tile.names[6])
pts <- readOGR(dsn = "../RD_Accuracy/Grids/",layer = "All_Grids_Accuracy_Assessment_Added_pts")
head(pts)
pts$unq__ID
str_replace(pts$unq__ID,"_",".")
str_replace(pts$unq__ID,".","_")
str_replace_all(pts$unq__ID,"_",".")
str_replace_all(pts$unq__ID,"_","\\.")
str_replace_all(pts$unq__ID,"-","\\.")
pts$unq__ID <- str_replace_all(pts$unq__ID,"-","\\.")
str(pts)
writeOGR(pts, dsn = "../RD_Accuracy/Grids/",layer = "All_Grids_Accuracy_Assessment_Added_pts", driver = "ESRI Shapefile")
writeOGR(pts, dsn = "../RD_Accuracy/Grids/",layer = "All_Grids_Accuracy_Assessment_Added_pts", driver = "ESRI Shapefile", overwrite = T
writeOGR(pts, dsn = "../RD_Accuracy/Grids/",layer = "All_Grids_Accuracy_Assessment_Added_pts", driver = "ESRI Shapefile", overwrite = T)
image.name
tile.names[6]
image.name <- tile.names[6]
image.dir
image.dir <- dd.accuracy.dir
segment.params.df
segment.params
segment.params
models
tile.names
tile.names
tile.names
tile.names
models
model <- models[1]
segmentation.params
segment.tile.name.append
segment.feature.df.name.append
model
segment.feature.df.dir <- dd.accuracy.dir
model.dir <- Models.dir
segment.dir <- dd.accuracy.dir
classify.out.dir <- dd.accuracy.dir
tile.nm
tile.names
tile.name <- tile.names
segment.tile.name.append
segment.tile.name.appendage <- segment.tile.name.append
model.name.rds <- model
                                        segment.feature.appendage = segment.feature.df.name.append
                                      segmentation.prms = segmentation.params
mod
umod
str(umod)
length(umod)
str(umod, mas.level =1)
str(umod, nest.level =1)
str(umod, nest.level =0)
str(umod, nest.lev = 1
)
models
mod <- models[1]
mod <- models[[1]]
head(complete.df)
rag <- readRDS("../Madison_Training/madisonNAIP.15_N-30_C-15_SegmentFeatureDF.rds")
rag <- readRDS("../DD/Madison_Training/madisonNAIP.15_N-30_C-15_SegmentFeatureDF.rds")
str(rag)
warnings()
image.names
img.nm
tile.names
tile.names
stopCluster()
registerDoSEQ()
registerDoSEQ()
warnings()
img.nm <- image.names[1]
tile.names
tile.nm <- tile.names[43]
tile.nm
models
model <- models[2]
model
i
models
models[[2]]
str(models[[2]])
str(models[[2]]$features)
(models[[2]]$features)
image.dir <- dd.training.dir
image.name <- "madisonNAIP.15"
paste0(image.name,feature.pattern)
ras<-raster(paste0(dd.training.dir, "madisonNAIP.14_pca.tif")
)
ras<-raster(paste0(dd.training.dir, "/madisonNAIP.14_pca.tif"))
ras
summary(ras)
ras<-stack(paste0(dd.training.dir, "/madisonNAIP.14_pca.tif"))
summary(ras)
summary(values(ras))
s
s
head(pca.model)
pca.model
image.name
image.name <- "madisonNAIP.14"
summary(values(r))
r
summary(values(rescaled.r))
?glcm
segment.params
warnings()
?gather
warnings()
accuracy.region.dsn
accuracy.region.layer
grid.accuracy.region.dsn
grid.accuracy.region.layer
grid.names
grid.names[43]
grid.name <- grid.names[43]
classified.tile.path.at.grid
classified.tile.paths.at.grid
classified.tile
head(tgt)
PixBool
error
pts
tile <- classified.tile
classification
tile
str(tile)
tile@data@attributes
tile@data@attributes[[1]]
classification
classification
classification
overall.error
tile.names
tile.nm <- tile.names[3]
models
model <- models[5]
seg
str(df)
?glcm
texture.params
texture.params[7,]
texture.params.df <- texture.params[7,]
image.dir
calc.texture(texture.param.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
raster()
r <- raster()
values(r) <- NA
r
values(r) <- rep(c(NA,1,2,3,4),64800/5)
r
summary(values(r))
r[NA] <- 10
r
summary(values(r))
r[is.na(r)] <- 10
summary(values(r))
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
text <- raster(paste0(dd.accuracy.dir,"/madisonNAIP.mad.100m.12_ratio.nir_stat.correlation_window.3_angle.0.tif")
)
text
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
text <- raster(paste0(dd.accuracy.dir,"/madisonNAIP.mad.100m.12_ratio.nir_stat.correlation_window.3_angle.0.tif"))
text
summary(values(text))
image.dir <- dd.accuracy.dir
image.basename <- "madisonNAIP.mad.100m.12"
texture.params
texture.params <- texture.params[7,]
x
texture.params
texture.params$window
window <- texture.params$window[[1]]
statistics <- "correlation"
texture
plot(texture)
summary(texture)
summary(texture)
summary(texture)
summary(texture)
texture
texture == -Inf
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
feature.dfs
image.names
img.feature.dfs
SegParams
seg.param.set <- SegParams[2]
tile.names
tile.nm
models
model <- models[1]
Models.dir
best.classif.overall
head(best.classif.overall)
)
best.model
c(T,F)
ind <- c(T,F)
best.model[ind]
length(best.model)
best.model
best.model
str(urb.polys)
urb.polys
naip.dir
str(naip.tif.names)
i_areas_less_quant
length(i_areas_less_quant)
i
head(i_areas_less_quant)
i <- 2
urb.poly
tile.names.at.urb.poly
tiles.names.at.urb.poly
tile.name.at.urb.poly <- tiles.names.at.urb.poly[1]
o
print.feature.importance <- function(dir = dd.training.dir,
ModelBuildingRDS
ModelBuildingRDSs
dd.training.dir
segment.params
cl <- makeCluster(cores)
install.packages("e1071")
install.packages("FSelector")
install.packages("FSelector")
install.packages("FSelector")
install.packages("FSelector")
install.packages("FSelector")
fv
img.nm
modelBuildingData = ModelBuildingRDSs[1]
dir <- dd.training.dir
head(dat)
head(dat)
image.name <- img.nm
                                  feature.importance.methods = c("information.gain","chi.squared")
library(FSelector)
library("rJava")
fv
fv
fv[[1]]
fv[[1]][[1]]
fv[[1]][[1]]$data
str(fv[[1]][[1]])
fv
str(fv)
fv
data.frame(x = c(1,2), y = c(3,4))
df <- data.frame(x = c(1,2), y = c(3,4))
d.l <- list(df)
d.l
names(d.l) <- "df1"
d.l
fv
head(fv)
RF_prob
str(RF_prob)
str(RF_prob)
RF_prob_fil
tsk
install.packages("FSelector")
library(FSelector)
install.packages("rJava")
library(rJava)
fv
ModelBuildingRDSs
img.nm
ModelBuildingRDSs
location
ModelBuilding.appendage
ModelBuildingRDSs
ModelBuildingRDSs
dd.training.dir
getwd()
y
y
cl
cores
registerDoSEQ()
library(parallel)    
cluster <- makePSOCKcluster("localhost")    
parSapply(cluster, 1:5, sqrt)
stopCluster(cluster)
cluster <- makePSOCKcluster("localhost")
stopCluster()
stopCluster(cluster)
cluster <- makePSOCKcluster("localhost")
registerDoSEQ()

cluster <- makePSOCKcluster("localhost")
port
cluster <- makecluster("localhost")
cluster <- makeCluster("localhost")
cluster <- makeCluster(cl)
library(parallel)
warnings()
registerDoSEQ()

stopCluster()
stopImplicitCluster()
warnings()
stopImplicitCluster()
stopCluster()
registerDoSEQ()

cl <- makeCluster(cores, port = 11723)
library(parallel)    
cluster <- makePSOCKcluster("localhost")    
parSapply(cluster, 1:5, sqrt)
stopCluster(cluster)
registerDoSEQ()
stopImplicitCluster()
stopCluster()
closeAllConnections()
30
closeAllConnections()
closeAllConnections()
warnings()
closeAllConnections()
closeAllConnections()
warngins()
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
cores
closeAllConnections()
closeAllConnections()
closeAllConnections()
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
stopCluster()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
stopCluster()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
registerDoSEQ()
closeAllConnections()
closeAllConnections()
stop()
closeAllConnections()
closeAllConnections()
ModelBuildingRDSs
ModelBuildingRDS <- ModelBuildingRDSs[1]
img.nm
ModelBuildingRDS <- ModelBuildingRDSs[13]
img.nm
ModelBuildingRDS <- ModelBuildingRDSs[25]
img.nm
nrows(df)
closeAllConnections()
closeAllConnections()
warnings()
head(tile.names)
head(tile.names)
img.nm
list.files(dd.accuracy.dir)
location
head(tile.names)
img.nm
closeAllConnections()
str(error.df)
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
str(naip.extents)
naip.dir
naip.tif.names
closeAllConnections()
str(naip.stacks)
str(naip.stack)
str(naip.stacks)
naip.stacks
naip.stacks2
identical(naip.stacks, naip.stacks2)
i
i <- 1
temp_i
tiles.names.at.urb.poly
tile.name.at.urb.poly <- tiles.names.at.urb.poly
tile.name.at.urb.poly <- tiles.names.at.urb.poly[1]
gdal_setInstallation(ignore.full_scan=FALSE)
gdal_setInstallation(ignore.full_scan=FALSE)
library(rgdal)
