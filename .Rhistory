<<<<<<< HEAD
grid.accuracy.region.layer
grid.names
grid.names[43]
grid.name <- grid.names[43]
classified.tile.path.at.grid
classified.tile.paths.at.grid
classified.tile
head(tgt)
PixBool
error
pts
tile <- classified.tile
classification
tile
str(tile)
tile@data@attributes
tile@data@attributes[[1]]
classification
classification
classification
overall.error
tile.names
tile.nm <- tile.names[3]
models
model <- models[5]
seg
str(df)
?glcm
texture.params
texture.params[7,]
texture.params.df <- texture.params[7,]
image.dir
calc.texture(texture.param.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
raster()
r <- raster()
values(r) <- NA
r
values(r) <- rep(c(NA,1,2,3,4),64800/5)
r
summary(values(r))
r[NA] <- 10
r
summary(values(r))
r[is.na(r)] <- 10
summary(values(r))
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
text <- raster(paste0(dd.accuracy.dir,"/madisonNAIP.mad.100m.12_ratio.nir_stat.correlation_window.3_angle.0.tif")
)
text
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
text <- raster(paste0(dd.accuracy.dir,"/madisonNAIP.mad.100m.12_ratio.nir_stat.correlation_window.3_angle.0.tif"))
text
summary(values(text))
image.dir <- dd.accuracy.dir
image.basename <- "madisonNAIP.mad.100m.12"
texture.params
texture.params <- texture.params[7,]
x
texture.params
texture.params$window
window <- texture.params$window[[1]]
statistics <- "correlation"
texture
plot(texture)
summary(texture)
summary(texture)
summary(texture)
summary(texture)
texture
texture == -Inf
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
calc.texture(texture.params.df, dd.accuracy.dir, "madisonNAIP.mad.100m.12")
feature.dfs
image.names
img.feature.dfs
SegParams
seg.param.set <- SegParams[2]
tile.names
tile.nm
models
model <- models[1]
Models.dir
best.classif.overall
head(best.classif.overall)
)
best.model
c(T,F)
ind <- c(T,F)
best.model[ind]
length(best.model)
best.model
best.model
str(urb.polys)
urb.polys
naip.dir
str(naip.tif.names)
i_areas_less_quant
length(i_areas_less_quant)
i
head(i_areas_less_quant)
i <- 2
urb.poly
tile.names.at.urb.poly
tiles.names.at.urb.poly
tile.name.at.urb.poly <- tiles.names.at.urb.poly[1]
o
print.feature.importance <- function(dir = dd.training.dir,
ModelBuildingRDS
ModelBuildingRDSs
dd.training.dir
segment.params
cl <- makeCluster(cores)
install.packages("e1071")
install.packages("FSelector")
install.packages("FSelector")
install.packages("FSelector")
install.packages("FSelector")
install.packages("FSelector")
fv
img.nm
modelBuildingData = ModelBuildingRDSs[1]
dir <- dd.training.dir
head(dat)
head(dat)
image.name <- img.nm
                                  feature.importance.methods = c("information.gain","chi.squared")
library(FSelector)
library("rJava")
fv
fv
fv[[1]]
fv[[1]][[1]]
fv[[1]][[1]]$data
str(fv[[1]][[1]])
fv
str(fv)
fv
data.frame(x = c(1,2), y = c(3,4))
df <- data.frame(x = c(1,2), y = c(3,4))
d.l <- list(df)
d.l
names(d.l) <- "df1"
d.l
fv
head(fv)
RF_prob
str(RF_prob)
str(RF_prob)
RF_prob_fil
tsk
install.packages("FSelector")
library(FSelector)
install.packages("rJava")
library(rJava)
fv
ModelBuildingRDSs
img.nm
ModelBuildingRDSs
location
ModelBuilding.appendage
ModelBuildingRDSs
ModelBuildingRDSs
dd.training.dir
getwd()
y
y
cl
cores
registerDoSEQ()
library(parallel)    
cluster <- makePSOCKcluster("localhost")    
parSapply(cluster, 1:5, sqrt)
stopCluster(cluster)
cluster <- makePSOCKcluster("localhost")
stopCluster()
stopCluster(cluster)
cluster <- makePSOCKcluster("localhost")
registerDoSEQ()

cluster <- makePSOCKcluster("localhost")
port
cluster <- makecluster("localhost")
cluster <- makeCluster("localhost")
cluster <- makeCluster(cl)
library(parallel)
warnings()
registerDoSEQ()

stopCluster()
stopImplicitCluster()
warnings()
stopImplicitCluster()
stopCluster()
registerDoSEQ()

cl <- makeCluster(cores, port = 11723)
library(parallel)    
cluster <- makePSOCKcluster("localhost")    
parSapply(cluster, 1:5, sqrt)
stopCluster(cluster)
registerDoSEQ()
=======
>>>>>>> ec214d49d0259b4291374bb8cfeb9173c45c5296
stopImplicitCluster()
stopCluster()
closeAllConnections()
30
closeAllConnections()
closeAllConnections()
warnings()
closeAllConnections()
closeAllConnections()
warngins()
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
cores
closeAllConnections()
closeAllConnections()
closeAllConnections()
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
stopCluster()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
stopCluster()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
registerDoSEQ()
closeAllConnections()
closeAllConnections()
stop()
closeAllConnections()
closeAllConnections()
ModelBuildingRDSs
ModelBuildingRDS <- ModelBuildingRDSs[1]
img.nm
ModelBuildingRDS <- ModelBuildingRDSs[13]
img.nm
ModelBuildingRDS <- ModelBuildingRDSs[25]
img.nm
nrows(df)
closeAllConnections()
closeAllConnections()
warnings()
head(tile.names)
head(tile.names)
img.nm
list.files(dd.accuracy.dir)
location
head(tile.names)
img.nm
closeAllConnections()
str(error.df)
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
str(naip.extents)
naip.dir
naip.tif.names
closeAllConnections()
str(naip.stacks)
str(naip.stack)
str(naip.stacks)
naip.stacks
naip.stacks2
identical(naip.stacks, naip.stacks2)
i
i <- 1
temp_i
tiles.names.at.urb.poly
tile.name.at.urb.poly <- tiles.names.at.urb.poly
tile.name.at.urb.poly <- tiles.names.at.urb.poly[1]
gdal_setInstallation(ignore.full_scan=FALSE)
gdal_setInstallation(ignore.full_scan=FALSE)
library(rgdal)
naip.stacks
i_areas_less_quant
i <- 13
i
 closeAllConnections()
 closeAllConnections()
 closeAllConnections()
 closeAllConnections()
 closeAllConnections()
 closeAllConnections()
 closeAllConnections()
 closeAllConnections()
 closeAllConnections()
}
classified.tiles
out
plot(20)
utm16
i
i <- 30
naip.extents
tiles.in.urban
length(tiles.in.urban)
tile.index
naip.tif.names
str(naip.tif.names)
tiles.inter.urb.poly
tile.index
tile.names.at.urb.poly
tile.names.at.urb.poly
tiles.names.at.urb.poly
tiles.names.at.urb.poly
t.p <- tiles.names.at.urb.poly[1]
ei
eu
e
urb.poly
tiles.inter.urb.poly
?gIntersects
?gIntersects
tiles.inter.urb.poly
tiles.names.at.urb.poly
t.p
t.p <- tiles.names.at.urb.poly[3]
t.p
eu
ei
urb.poly
eu
ei
t.p
t.p <- tiles.names.at.urb.poly[10]
ei
eu
t.p
raster(t.p)
wtm
urb.poly
plot(urb.poly)
png()
plot(urb.poly)
dev.off()
png()
plot(urb.poly)
plot(ei, add = T)
dev.off()
png()
plot(ei)
dev.off()
png()
plot(ei, col = "red")
dev.off()
png()
plot(ei, col = "red")
dev.off()
png()
plot(urb.poly)
plot(ei, col = "red", add = T)
dev.off()
tile.index
tile.index
tile.index
tile.index
warnings()
tiles.in.urban
tile.index
tile.index
t.p <- tiles.names.at.urb.poly[1]
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
urb.path
tile.urb.path
hello
e
}
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
i_areas_less_quant
make.segment.feature.df.foreach.segmentation <- function(tile.dir,
i_areas_less_quant
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
i_areas_less_quant
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
i_areas_high_quant
i_areas_high_quant[8]
length(i_areas_high_quant)
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
i_areas_high_quant
i_areas_high_quant
i_areas_high_quant[13]
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
i_areas_high_quant
i_areas_high_quant
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
cores
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
warnings()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
<<<<<<< HEAD
install.packages("leaflet")
41
image.dirs
str_extract(image.dirs, "NAIP")
str_extract(image.dirs, "*NAIP*")
str_extract(image.dirs, ".*NAIP.*")
str_extract(image.dirs, ".*NAIP.*") %>% na.omit()
80/12
80/10
install.packages("htmlwidgets")
library(lubridate)
install.packages(lubridate)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
=======
   grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer)
install.packages("lubridate")
getwd()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
getwd()
getwd()
getwd()
  C-c C-c  C-c C-c

  ua <- urban_areas(cb = T) # Download genearlized (1:500k) boundary file of all US urban areas

  WI <- states(cb = T, ) %>%                 # Download WI shapefile
       gBuffer(width = .0001)
ua_wi
".*WI.*" %in% ua_wi@data$NAME10
ua_wi@data$NAME10 %in% ".*WI.*"
ua_wi@data$NAME10
as.character(ua_wi@data$NAME10) %in% ".*WI.*"
sum(as.character(ua_wi@data$NAME10) %in% ".*WI.*")
as.character(ua_wi@data$NAME10)
as.character(ua_wi@data$NAME10) %in% "WI"
sum(as.character(ua_wi@data$NAME10) %in% ".*WI")
as.character(ua_wi@data$NAME10)
grepl(".*WI",as.character(ua_wi@data$NAME10))
ua_wi
closeAllConnections()
closeAllConnections()
closeAllConnections()
closeAllConnections()
seamlines <- by
closeAllConnections()
closeAllConnections()
closeAllConnections()
getwd()
wd
setwd("../")
wd
getwd()
a
plot(a)
str(data.frame(seamlines_untion_ua))
str(data.frame(seamlines_union_ua))
plot(seamlines_union_ua)
data.frame(seamlines_union_ua) %>% head
rm(seamlines_by_ua)
plot(seamlines_by_ua)
?on.exit
str(df)
df
df
df
warnings(df)
warnings(df) <- NULL
warnings()
ascii
getMethod("ascii")
getMethod(ascii)
getMethod("ascii")
?addPolygons
seamlines_by_ua
?gArea
seamlines_by_ua
str(data.frame(seamlines_by_ua))
sapply(seamlines_by_ua, gArea)
sapply(seamlines_by_ua, "gArea")
lapply(seamlines_by_ua, "gArea")
str(data.frame(seamlines_by_ua))
selected_seamlines_by_ua
naip.dir
head(naip.tif.names)
naip.tile.dir
list.files(naip.tile.dir)
>>>>>>> ec214d49d0259b4291374bb8cfeb9173c45c5296
