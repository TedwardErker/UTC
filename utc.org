#+TITLE: Wisconsin Urban Tree Canopy Mapping
#+AUTHOR: Tedward Erker
#+email: erker@wisc.edu
#+PROPERTY:  header-args:R :cache no :results output :tangle classifying_urban_WI.R :exports both :comments link :session *R:utc*
#+STARTUP: indent
#+FILETAGS: work utc

* Begin with end in mind
** End Product:
A map of urban cover with associated model uncertainty.  For the
Madison Area.

A reproducible workflow to apply this to any city in WI (or perhaps
country) with minimal work from user.
** Automated workflow
I need to be able to run the whole script with one key stroke and get
a series of tables and figures that show the performance of the
classifiers.  Additionally (and more challenging) I need to be able to
easily add in
1) new training data
2) new features (esp additional texture layers and segmentations,
   possibly more moments than mean and sd in segments.)
3) new classifiers (more than just svm and rf)
4) new classes?

** Best Classifer
To make this map I need to find the best classifier to apply to the
maps.  To know the best classifier I need to perform an accuracy assessment.


npx = number of pixels in segmentation
cpt = compactness parameter

| Image       | Method | Pixel (Overall Accuracy) | Field Plot (RMSE) | Block (RMSE) |
|-------------+--------+--------------------------+-------------------+--------------|
| NAIP        | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
| PAN_SPOT... |        |                          |                   |              |




1) Classification:
Images x segmentation x classification method

2 x 3 x 2 = 12

1) Accuracy:
   1) Pointwise - confusion matrix
      1) google earth points (robi's points)
      2) google earth points (grid of points)
      3) Field plot points
   2) Plotwise
      1) google earth grids, changing area under consideration
      2) field plot, changing definition of tree

Pointwise - confusion matrix




** Directory Structure
*** Pjt_UTC
**** code
- contains this file
**** figs
**** DD

**** RD_UrbanAreasShapefile
**** RD_WaterShapefile
**** RD_CroplandDataLayer

**** RD_Training_Regions
***** Madison
Shapefile that contains the regions from which I'll do
manual/supervised classification in the Madison Area
***** Wausau
Shapefile that contains the regions from which I'll do
manual/supervised classification in the Madison Area

**** RD_Accuracy
***** Grids
***** Field Plot
***** Robi's Points
**** RD_NAIP
**** RD_SPOT

** Plan [2016-08-29 Mon]

*** TODO UTC Tasks [0/6]
1) [ ] Make NAIP images cropped to extent of other large WI cities
2) [ ] Select cities that have imagery from each hour of day (8am - 1pm)
3) [ ] Improve model
   1) [ ] add bagging to svm
   2) [ ] test feature selection (removing directional texture variables)
   3) [ ] test gbm classifier
   4) [ ] add Training data from other cities. Identify which cities.
4) [ ] Assess Accuracy Across State (Madison, Wausau, NE WI, perhaps
   Eau Claire)
5) [ ] Classify whole state
   1) [ ] add buffers to urban areas to allow for growth (10% diameter
      of urban area)
   2) [ ] relabel water, crops, and wetland
6) [ ] Merge classifications into giant raster

*** TODO Complete utc classification but not write up
DEADLINE: <2016-10-07 Fri -40d>
*** TODO Complete UTC project, classification and write up
DEADLINE: <2016-11-01 Tue -80d>

This is 64 days from now.

* Workflow [2016-08-29 Mon]
** Libraries
#+BEGIN_SRC R
  ##  install.packages(c("gdalUtils","ascii","rgeos","mlr","broom","rgdal","raster","plyr","ggplot2","dplyr","tidyr","stringr","foreach","doParallel","glcm","randomForest","kernlab","irace","parallelMap"))
  ## install.packages("e1071")
  ##   install.packages("FSelector")
  ##install.packages("gdalUtils")
  ##install.packages("rgeos")

  library(gdalUtils)
  library(ascii)
  library(rgeos)
  library(mlr)
  library(broom)
  library(rgdal)
  library(raster)
  library(plyr)
  library(ggplot2)
  library(dplyr)
  library(tidyr)
  library(stringr)
  library(foreach)
  library(doParallel)
  library(glcm)
  library(randomForest)
  library(kernlab)
  library(irace)
  library(parallelMap)
  library(FSelector)

#+END_SRC
** Inputs/Variables etc
** Functions
** Create NAIP images for largest city imaged at each hour of day.
** Create a PCA transformation for each hour of day (maybe not necessary, but easy enough)
** Create State-wide classifiers
*** testing if stretching the pca is worthwhile
#+begin_src R
  pca <- stack(str_c(dd.training.dir, "/madisonNAIP.2_pca.tif"))
  pca.stretch <- rescale.0.b(pca,254, each.band = T)
  pca.stretch
#+end_src

#+results:
: class       : RasterBrick
: dimensions  : 212, 445, 94340, 3  (nrow, ncol, ncell, nlayers)
: resolution  : 1, 1  (x, y)
: extent      : 297402, 297847, 4767284, 4767496  (xmin, xmax, ymin, ymax)
: coord. ref. : +proj=utm +zone=16 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs
: data source : in memory
: names       : madisonNAIP.2_pca.1, madisonNAIP.2_pca.2, madisonNAIP.2_pca.3
: min values  :                   0,                   0,                   0
: max values  :                 254,                 254,                 254

#+results:
: [1] 0

** Assess Accuracy of classifiers








* Workflow prior to [2016-08-29 Mon]
** Libraries
#+BEGIN_SRC R
  ##  install.packages(c("gdalUtils","ascii","rgeos","mlr","broom","rgdal","raster","plyr","ggplot2","dplyr","tidyr","stringr","foreach","doParallel","glcm","randomForest","kernlab","irace","parallelMap"))
  ## install.packages("e1071")
  ##   install.packages("FSelector")
  ##install.packages("gdalUtils")
  ##install.packages("rgeos")

  library(gdalUtils)
  library(ascii)
  library(rgeos)
  library(mlr)
  library(broom)
  library(rgdal)
  library(raster)
  library(plyr)
  library(ggplot2)
  library(dplyr)
  library(tidyr)
  library(stringr)
  library(foreach)
  library(doParallel)
  library(glcm)
  library(randomForest)
  library(kernlab)
  library(irace)
  library(parallelMap)
  library(FSelector)

#+END_SRC

#+END_SRC

#+results:

** Inputs
**** Input Directories
#+BEGIN_SRC R
  image.names <- c("NAIP","PanshpSPOT")
  image.dirs <- paste0("../RD_",image.names)
  pca.dir <- "../RD_PCA_Regions"
  training.dir <- "../RD_Training_Regions"
  accuracy.dir <- "../RD_Accuracy"
  grids.accuracy.dir <- str_c(accuracy.dir, "/Grids")
  fieldplots.accuracy.dir<- str_c(accuracy.dir, "/FieldData")
  crop.dir <- "../RD_CroplandDataLayer"
  water.dir <- "../RD_WI-waterbody-24k"
  urban.dir <- "../RD_US_UrbanAreasShapefile"
  urban.and.incorporated.dir <- "../RD_merged_WIurbanAreas_and_incorporatedAreas"
#+END_SRC

#+results:

**** Variable Names and Paths
#+BEGIN_SRC R

  locations = c("madison","wausau")

  image.paths <- expand.grid(image.names,locations) %>% data.frame %>%
      mutate(img.paths = paste0(image.dirs,"/",Var2,Var1,".tif")) %>%
      .$img.paths

  ratio.appendage <- "_ratio"
  pca.appendage <- "_pca"
  model.appendage = "_model"

  feature.df.appendage <- "_featureDF"

  ModelBuilding.appendage = "_modelBuildingDF"

  tile.id.col.nm.for.grid.and.field.accuracy <- c("unq__ID", "Plot", "accuracy_2")
#+END_SRC

#+results:

**** Patterns
#+begin_src R
  grid.pattern = "[a-zA-Z]{3}\\.[0-9]+m\\.[0-9]+" #I removed "_" from end. <2016-07-02 Sat>
  texture.pattern = "stat-.*_window-.*_angle[-]+[0-9]+"
  segmentation.pattern = "Pixel|N-[0-9]+_C-[0-9]+"
  target.pattern = "all|grass|impervious|tree"
  image.pattern = "[a-zA-Z]{5}[a-zA-Z]+"
  model.pattern = "rf_prob|rf_resp|svm_resp"
  tuned.pattern = "Untuned|Tuned"

  point.pattern = "A.[0-9]{4}"
  grid.field.point.pattern <- "(([a-zA-Z]{3}\\.[0-9]+m\\.[0-9]+)|([A-Z].[0-9]*)|(MC.[0-9]*))"

#+end_src

#+results:

**** Texture Params

Think about using ndvi because it might allow differention between
shadows of buildings and shadows of trees.  I should test this by
running it on a small image.

#+begin_src R

  band.for.texture.appendage = "_ratio.nir"
  window <- list(c(3,3), c(5,5), c(7,7))
  statistics = list("homogeneity", "contrast", "correlation", "entropy")
  shift = list(c(0,1),c(1,0),c(1,1),c(-1,1))

  ## band.for.texture.appendage = "_ratio.nir"
  ## window <- list(c(3,3))
  ## statistics = list("homogeneity")
  ## shift = list(c(0,1))

  texture.params <- expand.grid(band.appendage = band.for.texture.appendage,window = window, statistics = statistics, shift = shift, stringsAsFactors = F)

#+end_src

#+results:

**** TODO Segmentation Params
Test a greater range of segment sizes and compactness values!
Especially segments between 30 and 60 m2 which seems to be performing best.
#+begin_src R
  segment.size <- c(rep(15,3), rep(20,3),rep(30,3),rep(45,3),rep(60,3),rep(100,3))
  compactness <- round(segment.size * c(.3, .5, .6))

  ## segment.size <- c(rep(30,1), rep(100,1))
  ## compactness <- segment.size * c(.5)

  ## segment.size <- 20
  ## compactness <- 12

  segment.params <- data.frame(compactness = compactness, segment.size = segment.size)
#+end_src

#+results:

**** Input Shapefile DSNs and Layers
#+BEGIN_SRC R

  pca.region.dsn <- "../RD_PCA_Regions/"
  pca.region.layer.appendage <- "_PCA_regions"

  training.region.dsn <- "../RD_Training_Regions/"
  training.region.layer.appendage <- "_TrainingPolygons"

  grid.accuracy.region.dsn <- "../RD_Accuracy/Grids"
  grid.accuracy.region.layer <- "Grids"

  field.accuracy.region.dsn <- "../RD_Accuracy/FieldData"
  field.accuracy.region.layer <- "fieldPoints"

  point.accuracy.region.dsn <- "../RD_Accuracy/PointsByRobi"
  point.accuracy.region.layer <- "PointsInDomain"

  accuracy.region.dsn <- c(grid.accuracy.region.dsn, field.accuracy.region.dsn, point.accuracy.region.dsn)
  accuracy.region.layer <- c(grid.accuracy.region.layer, field.accuracy.region.layer, point.accuracy.region.layer)
#+END_SRC

#+results:

**** Derived Directories
#+BEGIN_SRC R
                                          # make derived data directory
  derived.dir <- "../DD"

  dd.training.dirs <- str_c(derived.dir, "/",locations,"_Training")

  dd.pca.dirs <- str_c(derived.dir, "/",locations,pca.appendage)

  dd.accuracy.dirs <- str_c(derived.dir, "/",locations,"_Accuracy")

  dd.models.dirs <- paste0(derived.dir,"/",locations,"_Models")

  dd.accuracy.classified.dirs <- str_c(dd.accuracy.dirs, "/ClassifiedTiles")

  derived.dirs <- c(derived.dir, dd.training.dirs, dd.pca.dirs, dd.accuracy.dirs, dd.models.dirs, dd.accuracy.classified.dirs)
#+END_SRC

#+results:

**** Make Derived Directories
#+BEGIN_SRC R

  sapply(derived.dirs, FUN = function(x) dir.create(x))

#+END_SRC

#+results:
#+begin_example

                                ../DD                 ../DD/madison_Training
                                 FALSE                                  FALSE
                 ../DD/wausau_Training                      ../DD/madison_pca
                                 FALSE                                  FALSE
                      ../DD/wausau_pca                 ../DD/madison_Accuracy
                                 FALSE                                  FALSE
                 ../DD/wausau_Accuracy                   ../DD/madison_Models
                                 FALSE                                  FALSE
                   ../DD/wausau_Models ../DD/madison_Accuracy/ClassifiedTiles
                                 FALSE                                  FALSE
 ../DD/wausau_Accuracy/ClassifiedTiles
                                 FALSE
There were 11 warnings (use warnings() to see them)
#+end_example

**** Define Derived Shapefile DSNs and Layers
#+BEGIN_SRC R
  training.region.imageCRS.dsn <- str_c(derived.dir,"/reprojected.Training_Regions")

  pca.region.imageCRS.dsn <- str_c(derived.dir,"/reprojected.PCA_Regions")

  accuracy.region.imageCRS.dsn <- str_c(derived.dir,"/reprojected.Accuracy.Regions")


  lapply(training.region.imageCRS.dsn, FUN = function(x) dir.create(x))
  lapply(pca.region.imageCRS.dsn, FUN = function(x) dir.create(x))
  lapply(accuracy.region.imageCRS.dsn, FUN = function(x) dir.create(x))
#+END_SRC

#+results:
#+begin_example
[[1]]
[1] FALSE

Warning message:
In dir.create(x) : '../DD/reprojected.Training_Regions' already exists
[[1]]
[1] FALSE

Warning message:
In dir.create(x) : '../DD/reprojected.PCA_Regions' already exists
[[1]]
[1] FALSE

Warning message:
In dir.create(x) : '../DD/reprojected.Accuracy.Regions' already exists
#+end_example

**** number of cores
#+BEGIN_SRC R
  cores <- detectCores()
  cores <- 44
#+END_SRC

#+results:

**** CRS
#+BEGIN_SRC R
  utm16 <- CRS("+init=epsg:32616")
  wtm <- CRS("+init=epsg:3071")
#+END_SRC

#+results:

**** ASCII
#+begin_src R
  options(asciiType = "org")
#+end_src

#+results:

**** delete?
#+begin_src R :eval no
                                          #  band.names.wRatios <- c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi")
                                          #  pixel.feature.df.appendage = "_PixelFeatureDF"
                                          #  segmentFeatureDF.appendage = "_SegmentFeatureDF.rds"
                                          #  pca.model.name.appendage = "_pca.rds"

                                          #     mad.grid.id.pattern = "mad.[0-9]+m.[0-9]+"


#+end_src
** Functions
Load functions from utc/R/utc.org
[[file:utc/R/utc.org::*Functions]]
** Determine how to make best classifier for Madison : image, segmentation, model, and def truth
*** Set location to Madison
#+begin_src R
  location <- "madison"
  image.paths <- str_extract(image.paths, paste0(".*",location,".*")) %>% na.omit
  dd.pca.dir <-  str_extract(dd.pca.dirs, paste0(".*",location,".*")) %>% na.omit
  dd.training.dir <- str_extract(dd.training.dirs, paste0(".*",location,".*")) %>% na.omit
  dd.models.dir <- str_extract(dd.models.dirs, paste0(".*",location,".*")) %>% na.omit
  dd.accuracy.dir <- str_extract(dd.accuracy.dirs, paste0(".*",location,".*")) %>% na.omit
  dd.accuracy.classified.dir <-str_extract(dd.accuracy.classified.dirs, paste0(".*",location,".*")) %>% na.omit
#+end_src

#+results:

*** make pca transformation/rotation for slic segmentation algorithm.
**** read in pca model if it exists.  If I run this, don't run rest of pca code in this subtre
#+BEGIN_SRC R :eval no
  ## pca <- foreach(i = seq_along(image.names)) %do% {
  ##    readRDS(str_c(dd.pca.dir,"/madisonNAIP_pca.rds"))
  ## }
#+END_SRC

#+results:

**** Reproject and Crop PCA Region Shapefile to Image
#+BEGIN_SRC R :results none
  foreach(img.pth = image.paths) %do% {

      Reproject_Shapefile_to_Image_CRS(pca.region.dsn,
                                       str_c(location,pca.region.layer.appendage),
                                       img.pth,
                                       pca.region.imageCRS.dsn)

      Crop_image_to_each_Shapefile_polygon(pca.region.imageCRS.dsn,
                                           str_c(location,pca.region.layer.appendage),
                                           img.pth,
                                           cores = cores,
                                           output.dir = dd.pca.dir)
  }
#+END_SRC

**** Add Features (ratios and ndvi)
#+BEGIN_SRC R
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  tile.names <- list.files(dd.pca.dir) %>%
      str_extract(., pattern = ".*[0-9]+.tif") %>%
      str_extract(., pattern = ".*[0-9]+") %>%
      na.omit()

  ratios <- foreach (j = tile.names,
                     .packages = c("raster","stringr")) %dopar% {
                         add.features(tile.dir = dd.pca.dir,
                                      tile.name = j,
                                      band.names = c("blue","green","red","nir"),
                                      ratio.bands = c("blue","green","red","nir"),
                                      texture = F)
                     }

  closeAllConnections()

  stopCluster(cl)
#+END_SRC

#+results:
: Error in summary.connection(connection) : invalid connection

**** Create and Save PCA model/rotation
#+BEGIN_SRC R :results none
  pca <- foreach(img.nm = image.names) %do% {
      make.and.save.pca.transformation(image.dir = dd.pca.dir,
                                       image.name = img.nm,
                                       location = location)
  }
  closeAllConnections()
#+END_SRC

*** Training
**** Make Training Tiles
#+BEGIN_SRC R :results none

  foreach(img.pth = image.paths) %do% {

      Reproject_Shapefile_to_Image_CRS(training.region.dsn,
                                       str_c(location,training.region.layer.appendage),
                                       img.pth,
                                       training.region.imageCRS.dsn)

      Crop_image_to_each_Shapefile_polygon(training.region.imageCRS.dsn,
                                           str_c(location,training.region.layer.appendage),
                                           img.pth,
                                           cores = cores,
                                           output.dir = dd.training.dir)
  }
  closeAllConnections()
#+END_SRC

**** Make Feature data frames, for Each Training Tile

#+begin_src R :results silent
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  pixel.added.features.raster.list <- foreach(img.nm = image.names[1]) %do% {

      tile.names <- list.files(dd.training.dir) %>%
          str_extract(., pattern = str_c(location,img.nm,".[0-9]+.tif")) %>%
          str_extract(., pattern = str_c(location,img.nm,".[0-9]+")) %>%
          na.omit()

      foreach (i = tile.names,
               .packages = c("glcm","raster","stringr","dplyr")) %dopar% {


                   feature.dfs <- make.feature.df(tile.dir = dd.training.dir,
                                                  tile.name = i,
                                                  image.name = img.nm,
                                                  band.names = c("blue","green","red","nir"),
                                                  ndvi = T,
                                                  ratio.bands = c("blue","green","red","nir"),
                                                  texture.params.df = texture.params,
                                                  pixel.df = T,
                                                  pca.location = location,
                                                  segmentation = T,
                                                  segment.params.df = segment.params)

               }
  }
  closeAllConnections()
#+end_src

**** Combine Feature Dataframes
Pattern is image.name_Segmentation
#+BEGIN_SRC R :results none
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  feature.dfs <- list.files(dd.training.dir, full.names = T) %>%
      str_extract(paste0(".*(",feature.df.appendage,").*")) %>%
      na.omit()

  foreach(img.nm = image.names) %do% {
      img.feature.dfs <- str_extract(feature.dfs, str_c(".*",img.nm,".*")) %>%
          na.omit()
      SegParams <- unique(str_extract(img.feature.dfs, segmentation.pattern)) %>%
          na.omit()

      foreach(seg.param.set = SegParams, .packages = c("dplyr","stringr")) %dopar% {
          img.seg.feature.dfs = str_extract(img.feature.dfs, str_c(".*",seg.param.set,".*")) %>%
              na.omit()
          dfs <- lapply(img.seg.feature.dfs, readRDS)
          combined.dfs <- bind_rows(dfs)
          saveRDS(combined.dfs, file = str_c(dd.training.dir, "/", location,img.nm, "_",seg.param.set, feature.df.appendage,".rds"))
      }
  }
  closeAllConnections()
#+END_SRC

**** Create Model Building Dataframes, assign Class to feature dfs
1) Input
   - Segmentation Layer from the Training Regions
   - Classified Training Polygons for each image (NAIP and panSPOT)
2) Operation
   - For Pixels, extract coordinates of pixels that are inside training polygons
     - columns: x,y,class
     - join to pixel feature df
   - For Segments
     - Determine which segments fall majority within training polygons
     - Assign segments the class of the training polygon
     - columns: segment id, class
     - join to segment df

3) Output
   - Model Building Dataframes, 1 for each image and segmentation combination

#+BEGIN_SRC R :results none
  closeAllConnections()
  cl <- makeCluster(cores)

  registerDoParallel(cl)


  model.building.dfs <-  foreach(img.nm = image.names) %do% {

      featureDF.files <- list.files(dd.training.dir) %>%
          str_extract(., str_c(location,img.nm,"_(",segmentation.pattern,")", feature.df.appendage,".rds$")) %>%
          na.omit()

      training.polygon.layer <- list.files(training.region.dsn) %>%
          str_extract(.,str_c(".*",location,img.nm, ".*")) %>%
          na.omit() %>%
          extract.name.from.path() %>%
          unique()

      training.polygons <- readOGR(dsn = training.region.dsn, layer = training.polygon.layer)

      foreach(feature.df.rds = featureDF.files, .packages = c("mlr","foreach","doParallel", "stringr", "raster","rgeos","dplyr","sp","tidyr")) %dopar% {

          feature.df <- readRDS(file = str_c(dd.training.dir,"/",feature.df.rds))

          if(complete.cases(str_extract(feature.df.rds, "Pixel"))) {
              model.building.df <- getPixel.Class.and.Coords.Within.Polygon(PixelFeatureDF = feature.df,
                                                                            training.sp = training.polygons)

              model.building.df <- model.building.df %>%
                  dplyr::select(-x, -y, -id)

              saveRDS(object = model.building.df, file = paste0(dd.training.dir,"/",location,img.nm,"_Pixel",ModelBuilding.appendage,".rds"))
          } else          {
              segment.parameters <- str_extract(feature.df.rds, segmentation.pattern)
              model.building.df <- getSegment.class.and.features.Within.Polygon(SegmentFeatureDF = feature.df,
                                                                                training.sp = training.polygons,
                                                                                seg.tiles.dir = dd.training.dir,
                                                                                seg.params = segment.parameters)
              saveRDS(model.building.df, file = str_c(dd.training.dir,"/",location,img.nm,"_",segment.parameters,ModelBuilding.appendage,".rds"))
          }
      }
  }
  closeAllConnections()
#+END_SRC



**** Plot Model Building Dataframes?? Visualize discriminating features
#+begin_src R :exports results :results graphics :file ./figs/mod.df.check.png :eval yes

  seg.p <- "_N-100_C-50"

  img.nm <- "NAIP"
  mod.df <- readRDS(paste0(dd.training.dir, "/",location,img.nm, seg.p, ModelBuilding.appendage, ".rds"))

  ggplot(mod.df, aes(color = factor(Class), y = ndvi_mean, x = red_sd)) + geom_point(alpha = .9)
                                          #    ggplot(out, aes(color = factor(Class), y = ndvi_mean, x = red_sd)) + geom_point(alpha = .9)
                                          #  ggplot(model.building.df, aes(color = factor(Class), y = ndvi_mean, x = red_sd)) + geom_point(alpha = .5)

#+end_src


#+begin_src R :exports results :results graphics :file ./figs/mod.df.pixel.check.png :eval yes
  mod.df <- readRDS(paste0(dd.training.dir, "/",location,img.nm, "_Pixel", ModelBuilding.appendage,".rds"))
  ggplot(mod.df, aes(color = factor(Class), y = ndvi, x = ratio.nir_stat.homogeneity_window.3_angle.0)) + geom_point(alpha = .5)
#+end_src


**** NEXT Create and SaveModels: REMOVE NAs for SVM pixel classification

***** untuned models
#+BEGIN_SRC R :results none
  cl <- makeCluster(cores)
  registerDoParallel(cl)
                                          # parallel across images and modelbuilding dfs

  ModelBuildingRDSs <- list.files(dd.training.dir) %>%
      str_extract(., str_c(location,".*",ModelBuilding.appendage, ".rds")) %>%
      na.omit()


  foreach(ModelBuildingRDS = ModelBuildingRDSs,
          .packages = c("parallelMap","randomForest","kernlab","irace","mlr","stringr","dplyr","foreach","doParallel")) %dopar% {

              img.nm <- str_extract(ModelBuildingRDS, "NAIP|PanshpSPOT")

              Build.and.Save.models(dir = dd.training.dir,
                                    modelBuildingData = ModelBuildingRDS,
                                    models.dir = dd.models.dir,
                                    image.name = img.nm,
                                    location = location)
          }

  closeAllConnections()
#+end_src

***** Bagging the svm?
***** NEXT feature selecting and tuning models

****** feature selection
******* Show importance of features
#+begin_src R
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  fv <- foreach(img.nm = image.names, .combine = "rbind") %do% {

      ModelBuildingRDSs <- list.files(dd.training.dir) %>%
          str_extract(., str_c(location,img.nm,".*",ModelBuilding.appendage, ".rds")) %>%
          na.omit()

      foreach(ModelBuildingRDS = ModelBuildingRDSs,
              .packages = c("parallelMap","randomForest","kernlab","irace","mlr","stringr","dplyr","foreach","doParallel"),
              .combine = "rbind") %do% {

                  fv <- print.feature.importance(dir = dd.training.dir,
                                                 modelBuildingData = ModelBuildingRDS,
                                                 image.name = img.nm,
                                                 location = location,
                                                 feature.importance.methods = c("information.gain","chi.squared"))

                  fv$modelBuildingDF <- ModelBuildingRDS
                  fv
              }
  }


#+end_src

#+results:

#+begin_src R
  options(warn = -1)
  ## fv.u <- unlist(fv, recursive = F)
  ## fv.u <- unlist(fv.u, recursive = F)
  ## sapply(fv.u, ascii)
  fv %>% ascii
  options(warn = 1)
#+end_src

#+results:
: Error in 1:ncol(xx) : argument of length 0

******* build models
#+begin_src R
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  foreach(img.nm = image.names) %do% {

      ModelBuildingRDSs <- list.files(dd.training.dir) %>%
          str_extract(., str_c(location,img.nm,".*",ModelBuilding.appendage, ".rds")) %>%
          na.omit()

      foreach(ModelBuildingRDS = ModelBuildingRDSs,
              .packages = c("parallelMap","randomForest","kernlab","irace","mlr","stringr","dplyr","foreach","doParallel")) %dopar% {

                  Build.and.Save.FeatureSelected.models(dir = dd.training.dir,
                                                        modelBuildingData = ModelBuildingRDS,
                                                        models.dir = dd.models.dir,
                                                        image.name = img.nm,
                                                        location = location)
              }
  }

#+end_src

****** tuned



for tuning see:
https://mlr-org.github.io/mlr-tutorial/release/html/nested_resampling/index.html


#+begin_src R :eval no
  Build.and.Save.Tuned.models <- function( dir = dd.training.dir,
                                          modelBuildingData = ModelBuildingRDS,
                                          models.dir = Models.dir,
                                          image.name){

      dat <- readRDS(paste0(dir,"/",modelBuildingData)) %>%
          as.data.frame()

      image.and.segmentation.stem = str_replace(modelBuildingData, ModelBuilding.appendage,"")

      names <- colnames(dat)
      names <- str_replace(names, "\\(",".")
      names <- str_replace(names, "\\)",".")
      names <- str_replace(names, "\\:",".")
      colnames(dat) <- names

                                          # Create Task
      utc.task <- makeClassifTask(id = image.name, data = dat, target = "Class")

                                          # make parameter set for tuning

      rf.ps <- makeParamSet(makeIntegerParam("ntree", lower = 1L, upper = 500L),
                            makeIntegerParam("mtry", lower = 1L, upper = 50L))

      svm.ps <- makeParamSet(makeNumericParam("C", lower = -12, upper = 12, trafo = function(x) 2^x),
                             makeDiscreteParam("kernel", values = c("vanilladot", "polydot", "rbfdot")),
                             makeNumericParam("sigma", lower = -12, upper = 12, trafo = function(x) 2^x,
                                              requires = quote(kernel == "rbfdot")),
                             makeIntegerParam("degree", lower = 2L, upper = 5L,
                                              requires = quote(kernel == "polydot")))

                                          # tune
                                          # inner

      ctrl = makeTuneControlIrace(maxExperiments = 200L)
      inner = makeResampleDesc("CV", iters = 2L)
      svm.lrn = makeTuneWrapper("classif.ksvm", resampling = inner, par.set = svm.ps, control = ctrl, show.info = T)
      rf.lrn = makeTuneWrapper("classif.randomForest", resampling = inner, par.set = rf.ps, control = ctrl, show.info = T)

                                          #outer
      lrnrs = list(svm.lrn, rf.lrn)
      outer = makeResampleDesc("CV", iters = 3L)

                                          #    parallelStartMulticore(cores)

      res = benchmark(lrnrs, utc.task, outer, measures = acc, show.info = FALSE)

                                          #   parallelStop()

      saveRDS(res, file = paste0(models.dir,"/",image.and.segmentation.stem, models.appendage))
  }



#+END_SRC

**** Look at models

#+begin_src R :eval no
  df <- readRDS(paste0(dd.training.dir, "/madisonNAIP_N-30_C-15.ModelBuilding.rds"))
  mod <- readRDS(paste0(Models.dir, "/madisonNAIP_N-100_C-50.models.rds"))



  getBMRModels(mod)
  getBMRLearners(mod)
  getBMRPerformances(mod)
  getBMRTuneModults(mod, as.df = T)

  getBMRTuneModults(mod, as.df = T) %>%
      group_by(learner.id) %>%
      summarize_each(funs = "mean")


  mods<-getBMRModels(mod)



#+end_src

*** Testing/Accuracy
**** Make tiles at accuracy regions

make this i = 1:2 (or 1:3) to do all the accuracy regions

#+BEGIN_SRC R :results none

  foreach(i = 2:3) %do% {

      foreach(img.pth = image.paths) %do% {

          Reproject_Shapefile_to_Image_CRS(accuracy.region.dsn[i],
                                           accuracy.region.layer[i],
                                           img.pth,
                                           accuracy.region.imageCRS.dsn)

          Crop_image_to_regions_around_points_nameBygrid(shapefile.dsn = accuracy.region.imageCRS.dsn,
                                                         shapefile.layer = accuracy.region.layer[i],
                                                         image.path = img.pth,
                                                         cores = cores,
                                                         output.dir = dd.accuracy.dir,
                                                         column.name = tile.id.col.nm.for.grid.and.field.accuracy[i],
                                                         polygon.buffer.size = 50)

      }
  }
  closeAllConnections()

#+END_SRC

**** Make Feature data frames, for each Accuracy Region tile

#+begin_src R :results silent
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  tile.names <- list.files(dd.accuracy.dir) %>%
      str_match(., pattern = str_c("(",location,".*",grid.field.point.pattern,")(.tif)"))

  tile.names <- tile.names[,2] %>% na.omit()

  pixel.added.features.raster.list <- foreach (i = tile.names,
                                               .packages = c("glcm","raster","stringr","dplyr")) %dopar% {

                                                   img.nm <- str_extract(i, ("NAIP|PanshpSPOT"))

                                                   feature.dfs <- make.feature.df(tile.dir = dd.accuracy.dir,
                                                                                  tile.name = i,
                                                                                  image.name = img.nm,
                                                                                  bad.names = c("blue","green","red","nir"),
                                                                                  ndvi = T,
                                                                                  ratio.bands = c("blue","green","red","nir"),
                                                                                  texture.params.df = texture.params,
                                                                                  pixel.df = T,
                                                                                  pca.location = location,
                                                                                  segmentation = T,
                                                                                  segment.params.df = segment.params)

                                               }

  closeAllConnections()
#+end_src

**** Classify Tiles at accuracy regions

#+BEGIN_SRC R :results none
  cl <- makeCluster(cores)
  registerDoParallel(cl)



  classified.grid.tiles <-       foreach(img.nm = image.names[1]) %do% {

      models <- list.files(dd.models.dir) %>%
          str_extract(., str_c(".*",location,img.nm,".*")) %>%
          na.omit()

      tile.names <- list.files(dd.accuracy.dir) %>%
          str_match(., pattern = str_c("(",location,img.nm,".*?)_.*\\.tif$"))

      tile.names <- tile.names[,2] %>% na.omit() %>% unique()


      foreach(tile.nm = tile.names,
              .packages = c("plyr","dplyr","raster","stringr","mlr","foreach","doParallel")) %dopar% {

                  foreach(model = models) %do% {

                      seg.p <- str_extract(model, segmentation.pattern)

                      if(grepl("N-[0-9]+_C-[0-9]+",seg.p)) {
                          segment.tile.name.append <- paste0("_",seg.p,".tif")
                          segment.feature.df.name.append <- paste0("_",seg.p,feature.df.appendage,".rds")

                          classify.segmented.raster(segment.feature.df.dir = dd.accuracy.dir,
                                                    model.dir = dd.models.dir,
                                                    segment.dir = dd.accuracy.dir,
                                                    tile.name = tile.nm,
                                                    segmentation.appendage = segment.tile.name.append,
                                                    model.name.rds = model,
                                                    segment.feature.appendage = segment.feature.df.name.append,
                                                    segmentation.prms = seg.p)

                      } else {
                          classify.pixel.raster(tile.dir = dd.accuracy.dir,
                                                tile.name = tile.nm,
                                                pixelFeatureDF.appendage = feature.df.appendage,
                                                model.dir = dd.models.dir,
                                                model.rds = model,
                                                seg.prms = seg.p)
                      }
                  }
              }
  }

  closeAllConnections()
#+END_SRC
**** Point-wise accuracy.  regular confusion matrix thing.  I should do this for the grids and the field plot data also, but there is spatial association to consider.
***** Random Points
****** Google as reference
#+BEGIN_SRC R
  r.pts <- readOGR(dsn = point.accuracy.region.dsn, layer = point.accuracy.region.layer, stringsAsFactors = F)





  r.pts@data$cover = mapvalues(r.pts@data$cover,
                               from = c("imperv", "grass", "tree", "soil", "water", "wetland"),
                               to = c("i","g","t","i",NA,NA))

  xy <- coordinates(r.pts)
  r.pts@data$x <- xy[,1]
  r.pts@data$y <- xy[,2]

  classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
      str_extract(., pattern = ".*.tif$") %>%
      str_extract(., pattern = str_c(".*",grid.field.point.pattern, ".*")) %>%
      na.omit()

  ## point.names <- classified.tile.paths %>%
  ##     str_match(., paste0(".*(",point.pattern,").*"))

  ## point.names <- point.names[,2] %>%
  ##     unique() %>%
  ##     na.omit()

  point.names <- r.pts@data$accuracy_2




  cl <- makeCluster(cores)
  registerDoParallel(cl)


  error.df <- foreach(pt.name = point.names, .combine = "rbind",
                      .packages = c("doParallel","plyr","raster","dplyr", "stringr","ggplot2")) %dopar% {

                          pts <- r.pts[r.pts@data$accuracy_2== pt.name,]

                          classified.tile.paths.at.point <- str_extract(classified.tile.paths, str_c(".*",pt.name,"_.*")) %>%
                              na.omit()

                          ## classified.tile.paths.at.grid2 = classified.tile.paths.at.grid %>%
                          ##      str_extract(., ".*madisonNAIP.*N-105.*svm_.*") %>%
                          ##      na.omit()

                                          #         classified.tile.path.at.grid = classified.tile.paths.at.grid[1]



                          foreach(classified.tile.path.at.point = classified.tile.paths.at.point,
                                  .combine = "rbind",
                                  .packages = c("plyr","raster","dplyr", "stringr","ggplot2")) %do% {

                                      classified.tile.name.at.point <- basename(classified.tile.path.at.point)
                                      classified.tile <- raster(classified.tile.path.at.point)

                                      tgt <- str_extract(classified.tile.name.at.point, "tree|grass|impervious|all")
                                      tgt <- mapvalues(tgt, c("tree","grass","impervious","all"), c("t","g","i","a"))

                                      ##  png(str_c("figs/","ClassifiedVersusGrid","/",names(classified.tile),".png"))
                                      ## print(pts.on.classified.tile.plot(pts, classified.tile, target = tgt))
                                      ## dev.off()

                                      PixBool <- !is.na((str_extract(classified.tile.path.at.point, "_Pixel_")))

                                      if(!is.na(str_extract(classified.tile.path.at.point, "_all_"))) {

                                          error <- calcErrorAllMultinomial.wrefColumn(pts, classified.tile, Pixel = PixBool, referenceColumn = "cover", one.point = T)
                                          error <- error %>%
                                              t() %>%
                                              data.frame() %>%
                                              mutate(point = pt.name,
                                                     image =  str_extract(classified.tile.name.at.point, image.pattern),
                                                     target.cover = str_extract(classified.tile.name.at.point, target.pattern),
                                                     model =  str_extract(classified.tile.name.at.point, model.pattern),
                                                     seg.params = str_extract(classified.tile.name.at.point, segmentation.pattern),
                                                     tuned = str_extract(classified.tile.name.at.point, tuned.pattern))
                                          error
                                      } else {
                                          target = str_extract(classified.tile.name.at.point, "tree|grass|impervious")
                                          target <- mapvalues(target, c("tree","grass","impervious"), c("t","g","i"))
                                          error <- calcErrorBinomial.wrefColumn(pts, classified.tile, target, Pixel = PixBool, referenceColumn = "cover", one.point = T)
                                          error <- error %>%
                                              t() %>%
                                              data.frame() %>%
                                              mutate(point = pt.name,
                                                     image =  str_extract(classified.tile.name.at.point, image.pattern),
                                                     target.cover = str_extract(classified.tile.name.at.point, target.pattern),
                                                     model =  str_extract(classified.tile.name.at.point, model.pattern),
                                                     seg.params = str_extract(classified.tile.name.at.point, seg.prms),
                                                     tuned = str_extract(classified.tile.name.at.point, tuned.pattern))
                                          error
                                      }
                                  }
                      }

  closeAllConnections()


  saveRDS(error.df, str_c(derived.dir, "/RandomPoints.GoogleReference.point2pixel.error.df.rds"))

#+END_SRC

****** NAIP as reference
#+BEGIN_SRC R
  r.pts <- readOGR(dsn = point.accuracy.region.dsn, layer = point.accuracy.region.layer, stringsAsFactors = F)

  r.pts@data$e_naip_cvr = mapvalues(r.pts@data$e_naip_cvr,
                                    from = c("imperv", "grass", "tree", "soil", "water", "wetland"),
                                    to = c("i","g","t","i",NA,NA))

  xy <- coordinates(r.pts)
  r.pts@data$x <- xy[,1]
  r.pts@data$y <- xy[,2]

  classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
      str_extract(., pattern = ".*.tif$") %>%
      str_extract(., pattern = str_c(".*",grid.field.point.pattern, ".*")) %>%
      na.omit()

  ## point.names <- classified.tile.paths %>%
  ##     str_match(., paste0(".*(",point.pattern,").*"))

  ## point.names <- point.names[,2] %>%
  ##     unique() %>%
  ##     na.omit()

  point.names <- r.pts@data$accuracy_2

  ## grid.name = str_extract(grid.names, ".*150m-[56].*") %>% na.omit()



  cl <- makeCluster(cores)
  registerDoParallel(cl)


  error.df <- foreach(pt.name = point.names, .combine = "rbind",
                      .packages = c("doParallel","plyr","raster","dplyr", "stringr","ggplot2")) %dopar% {

                          pts <- r.pts[r.pts@data$accuracy_2== pt.name,]

                          classified.tile.paths.at.point <- str_extract(classified.tile.paths, str_c(".*",pt.name,"_.*")) %>%
                              na.omit()

                          ## classified.tile.paths.at.grid2 = classified.tile.paths.at.grid %>%
                          ##      str_extract(., ".*madisonNAIP.*N-105.*svm_.*") %>%
                          ##      na.omit()

                                          #         classified.tile.path.at.grid = classified.tile.paths.at.grid[1]



                          foreach(classified.tile.path.at.point = classified.tile.paths.at.point,
                                  .combine = "rbind",
                                  .packages = c("plyr","raster","dplyr", "stringr","ggplot2")) %do% {

                                      classified.tile.name.at.point <- basename(classified.tile.path.at.point)
                                      classified.tile <- raster(classified.tile.path.at.point)

                                      tgt <- str_extract(classified.tile.name.at.point, "tree|grass|impervious|all")
                                      tgt <- mapvalues(tgt, c("tree","grass","impervious","all"), c("t","g","i","a"))

                                      ##  png(str_c("figs/","ClassifiedVersusGrid","/",names(classified.tile),".png"))
                                      ## print(pts.on.classified.tile.plot(pts, classified.tile, target = tgt))
                                      ## dev.off()

                                      PixBool <- !is.na((str_extract(classified.tile.path.at.point, "_Pixel_")))

                                      if(!is.na(str_extract(classified.tile.path.at.point, "_all_"))) {

                                          error <- calcErrorAllMultinomial.wrefColumn(pts, classified.tile, Pixel = PixBool, referenceColumn = "e_naip_cvr", one.point = T)
                                          error <- error %>%
                                              t() %>%
                                              data.frame() %>%
                                              mutate(point = pt.name,
                                                     image =  str_extract(classified.tile.name.at.point, image.pattern),
                                                     target.cover = str_extract(classified.tile.name.at.point, target.pattern),
                                                     model =  str_extract(classified.tile.name.at.point, model.pattern),
                                                     seg.params = str_extract(classified.tile.name.at.point, segmentation.pattern),
                                                     tuned = str_extract(classified.tile.name.at.point, tuned.pattern))
                                          error
                                      } else {
                                          target = str_extract(classified.tile.name.at.point, "tree|grass|impervious")
                                          target <- mapvalues(target, c("tree","grass","impervious"), c("t","g","i"))
                                          error <- calcErrorBinomial.wrefColumn(pts, classified.tile, target, Pixel = PixBool, referenceColumn = "e_naip_cvr", one.point = T)
                                          error <- error %>%
                                              t() %>%
                                              data.frame() %>%
                                              mutate(point = pt.name,
                                                     image =  str_extract(classified.tile.name.at.point, image.pattern),
                                                     target.cover = str_extract(classified.tile.name.at.point, target.pattern),
                                                     model =  str_extract(classified.tile.name.at.point, model.pattern),
                                                     seg.params = str_extract(classified.tile.name.at.point, seg.prms),
                                                     tuned = str_extract(classified.tile.name.at.point, tuned.pattern))
                                          error
                                      }
                                  }
                      }

  closeAllConnections()


  saveRDS(error.df, str_c(derived.dir, "/RandomPoints.NAIPreference.point2pixel.error.df.rds"))

#+END_SRC

#+results:
: OGR data source with driver: ESRI Shapefile
: Source: "../RD_Accuracy/PointsByRobi", layer: "PointsInDomain"
: with 610 features
: It has 9 fields


***** Grids

#+BEGIN_SRC R
  grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer, stringsAsFactors = F)

  xy <- coordinates(grd)
  grd@data$x <- xy[,1]
  grd@data$y <- xy[,2]

  classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
      str_extract(., pattern = ".*.tif$") %>%
      str_extract(., pattern = str_c(".*",grid.pattern, ".*")) %>%
      na.omit()


  grid.names <- classified.tile.paths %>%
      str_match(., paste0(".*(",grid.pattern,").*"))

  grid.names <- grid.names[,2] %>%
      unique() %>%
      na.omit()

  ## grid.name = str_extract(grid.names, ".*150m-[56].*") %>% na.omit()



  cl <- makeCluster(cores)
  registerDoParallel(cl)


  error.df <- foreach(grid.name = grid.names, .combine = "rbind") %do% {

      pts <- grd[grd@data$unq__ID== grid.name,]

      classified.tile.paths.at.grid <- str_extract(classified.tile.paths, str_c(".*",grid.name,"_.*")) %>%
          na.omit()

      ## classified.tile.paths.at.grid2 = classified.tile.paths.at.grid %>%
      ##      str_extract(., ".*madisonNAIP.*N-105.*svm_.*") %>%
      ##      na.omit()

                                          #         classified.tile.path.at.grid = classified.tile.paths.at.grid[1]



      foreach(classified.tile.path.at.grid = classified.tile.paths.at.grid,
              .combine = "rbind",
              .packages = c("plyr","raster","dplyr", "stringr","ggplot2")) %dopar% {

                  classified.tile.name.at.grid <- basename(classified.tile.path.at.grid)
                  classified.tile <- raster(classified.tile.path.at.grid)

                  tgt <- str_extract(classified.tile.name.at.grid, "tree|grass|impervious|all")
                  tgt <- mapvalues(tgt, c("tree","grass","impervious","all"), c("t","g","i","a"))

                  ##  png(str_c("figs/","ClassifiedVersusGrid","/",names(classified.tile),".png"))
                  ## print(pts.on.classified.tile.plot(pts, classified.tile, target = tgt))
                  ## dev.off()

                  PixBool <- !is.na((str_extract(classified.tile.path.at.grid, "_Pixel_")))

                  if(!is.na(str_extract(classified.tile.path.at.grid, "_all_"))) {
                      error <- calcErrorAllMultinomial(pts, classified.tile, Pixel = PixBool)
                      error <- error %>%
                          t() %>%
                          data.frame() %>%
                          mutate(grid = grid.name,
                                 image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                 target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                 model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                 seg.params = str_extract(classified.tile.name.at.grid, segmentation.pattern),
                                 tuned = str_extract(classified.tile.name.at.grid, tuned.pattern))
                      error
                  } else {
                      target = str_extract(classified.tile.name.at.grid, "tree|grass|impervious")
                      target <- mapvalues(target, c("tree","grass","impervious"), c("t","g","i"))
                      error <- calcErrorBinomial(pts, classified.tile, target, Pixel = PixBool)
                      error <- error %>%
                          t() %>%
                          data.frame() %>%
                          mutate(grid = grid.name,
                                 image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                 target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                 model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                 seg.params = str_extract(classified.tile.name.at.grid, seg.prms),
                                 tuned = str_extract(classified.tile.name.at.grid, tuned.pattern))
                      error
                  }
              }
  }
  closeAllConnections()


  saveRDS(error.df, str_c(derived.dir, "/Grids.point2pixel.error.df.rds"))

#+END_SRC

#+results:
: OGR data source with driver: ESRI Shapefile
: Source: "../RD_Accuracy/Grids", layer: "Grids"
: with 20209 features
: It has 15 fields

***** Field Plots
#+BEGIN_SRC R
  field.pts <- readOGR(dsn = field.accuracy.region.dsn, layer = field.accuracy.region.layer, stringsAsFactors = F)


                                          # convert class of field pts to "g", "i", "t"




  field.pts@data$cover = mapvalues(field.pts@data$cover,
                                   from = c("imperv", "grass", "tree", "soil", "water", "wetland"),
                                   to = c("i","g","t","i",NA,NA))

  xy <- coordinates(field.pts)
  field.pts@data$x <- xy[,1]
  field.pts@data$y <- xy[,2]

  classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
      str_extract(., pattern = ".*.tif$") %>%
      str_extract(., pattern = str_c(".*",grid.field.point.pattern, ".*")) %>%
      na.omit()

  ## point.names <- classified.tile.paths %>%
  ##     str_match(., paste0(".*(",point.pattern,").*"))

  ## point.names <- point.names[,2] %>%
  ##     unique() %>%
  ##     na.omit()

  point.names <- field.pts@data$accuracy_2




  cl <- makeCluster(cores)
  registerDoParallel(cl)


  error.df <- foreach(pt.name = point.names, .combine = "rbind",
                      .packages = c("doParallel","plyr","raster","dplyr", "stringr","ggplot2")) %dopar% {

                          pts <- field.pts[field.pts@data$accuracy_2== pt.name,]

                          classified.tile.paths.at.point <- str_extract(classified.tile.paths, str_c(".*",pt.name,"_.*")) %>%
                              na.omit()

                          ## classified.tile.paths.at.grid2 = classified.tile.paths.at.grid %>%
                          ##      str_extract(., ".*madisonNAIP.*N-105.*svm_.*") %>%
                          ##      na.omit()

                                          #         classified.tile.path.at.grid = classified.tile.paths.at.grid[1]



                          foreach(classified.tile.path.at.point = classified.tile.paths.at.point,
                                  .combine = "rbind",
                                  .packages = c("plyr","raster","dplyr", "stringr","ggplot2")) %do% {

                                      classified.tile.name.at.point <- basename(classified.tile.path.at.point)
                                      classified.tile <- raster(classified.tile.path.at.point)

                                      tgt <- str_extract(classified.tile.name.at.point, "tree|grass|impervious|all")
                                      tgt <- mapvalues(tgt, c("tree","grass","impervious","all"), c("t","g","i","a"))

                                      ##  png(str_c("figs/","ClassifiedVersusGrid","/",names(classified.tile),".png"))
                                      ## print(pts.on.classified.tile.plot(pts, classified.tile, target = tgt))
                                      ## dev.off()

                                      PixBool <- !is.na((str_extract(classified.tile.path.at.point, "_Pixel_")))

                                      if(!is.na(str_extract(classified.tile.path.at.point, "_all_"))) {

                                          error <- calcErrorAllMultinomial.wrefColumn(pts, classified.tile, Pixel = PixBool, referenceColumn = "cover", one.point = T)
                                          error <- error %>%
                                              t() %>%
                                              data.frame() %>%
                                              mutate(point = pt.name,
                                                     image =  str_extract(classified.tile.name.at.point, image.pattern),
                                                     target.cover = str_extract(classified.tile.name.at.point, target.pattern),
                                                     model =  str_extract(classified.tile.name.at.point, model.pattern),
                                                     seg.params = str_extract(classified.tile.name.at.point, segmentation.pattern),
                                                     tuned = str_extract(classified.tile.name.at.point, tuned.pattern))
                                          error
                                      } else {
                                          target = str_extract(classified.tile.name.at.point, "tree|grass|impervious")
                                          target <- mapvalues(target, c("tree","grass","impervious"), c("t","g","i"))
                                          error <- calcErrorBinomial.wrefColumn(pts, classified.tile, target, Pixel = PixBool, referenceColumn = "cover", one.point = T)
                                          error <- error %>%
                                              t() %>%
                                              data.frame() %>%
                                              mutate(point = pt.name,
                                                     image =  str_extract(classified.tile.name.at.point, image.pattern),
                                                     target.cover = str_extract(classified.tile.name.at.point, target.pattern),
                                                     model =  str_extract(classified.tile.name.at.point, model.pattern),
                                                     seg.params = str_extract(classified.tile.name.at.point, seg.prms),
                                                     tuned = str_extract(classified.tile.name.at.point, tuned.pattern))
                                          error
                                      }
                                  }
                      }

  closeAllConnections()


  saveRDS(error.df, str_c(derived.dir, "/RandomPoints.GoogleReference.point2pixel.error.df.rds"))

#+END_SRC

**** Area-wise accuracy. RMSE, grids and field plots
***** RMSE at grid level
****** Combine google earth grid estimates of cover with classified tile estimates of cover

Create dataframe with structure:

| %t.img | %g.img | %i.img | %o.img | image      | segmentation | target.cover        | target.type         | model                   | tile                   | cropped.to.n.pts | %t.goog | %g.goog | %i.goog | %o.goog |   |   |   |   |   |   |   |   |
|--------+--------+--------+--------+------------+--------------+---------------------+---------------------+-------------------------+------------------------+------------------+---------+---------+---------+---------+---+---+---+---+---+---+---+---|
|    0-1 |    0-1 |    0-1 |    0-1 | NAIP       | Pixel        | grass               | binomial (two)      | random forest prob      | mad-size-id (up to 50) |                4 |     0-1 |     0-1 |     0-1 |     0-1 |   |   |   |   |   |   |   |   |
|        |        |        |        | panshpSPOT | 30 m2        | tree                | multinomial (three) | random forest resp      |                        |                9 |         |         |         |         |   |   |   |   |   |   |   |   |
|        |        |        |        |            | 60 m2        | impervious          |                     | support vector machines |                        |               16 |         |         |         |         |   |   |   |   |   |   |   |   |
|        |        |        |        |            |              | NA (if multinomial) |                     |                         |                        |               25 |         |         |         |         |   |   |   |   |   |   |   |   |
|        |        |        |        |            | 105 m2       |                     |                     |                         |                        |              ... |         |         |         |         |   |   |   |   |   |   |   |   |



******* Create DF of % cover from grids cropped to different extents
#+BEGIN_SRC R
  grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer, stringsAsFactors = F)
  grd.df <- grd@data

                                          # remove wausau grids
  grd.df <- grd.df[grepl("mad.*", grd.df$unq__ID),]


                                          # .25
  mod <- .25
  n.rows.and.columns.for.subset = c(2)

  out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {
      calc.pct.cvr.for.grid.subset(grd.df, n.rows.and.columns.for.sub, mod = mod)
  }

  Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.mod.25 <- bind_rows(out)


                                          # .5
  mod <- .5
  n.rows.and.columns.for.subset = c(3,4)

  out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {
      calc.pct.cvr.for.grid.subset(grd.df, n.rows.and.columns.for.sub, mod = mod)
  }

  Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.mod.5 <- bind_rows(out)


                                          # 1
  mod <- 1
  n.rows.and.columns.for.subset = c(5,10,15)

  out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {
      calc.pct.cvr.for.grid.subset(grd.df, n.rows.and.columns.for.sub, mod = mod)
  }

  Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.mod1 <- bind_rows(out)


  Percent.Cover.Grids <- bind_rows(list(Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.mod.25,
                                        Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.mod.5,
                                        Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.mod1))



  saveRDS(Percent.Cover.Grids, str_c(derived.dir,"/","Grids.Percent.Cover.diffScale",".rds"))
#+END_SRC

#+results:
#+begin_example
 OGR data source with driver: ESRI Shapefile
 Source: "../RD_Accuracy/Grids", layer: "Grids"
 with 20209 features
 It has 15 fields
  Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Warning message:
 Unknown column 'o'
  Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Warning messages:
 1: Unknown column 'o'
 2: Unknown column 'o'
  Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
 Joining, by = "unq__ID"
#+end_example

******* Create DF of % cover from classified rasters cropped to different extents
#+BEGIN_SRC R
  grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer)


                                          # get path of grid tiles (not interested in fieldplot classified tiles)
  classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
      str_extract(., pattern = ".*.tif$") %>%
      str_extract(., pattern = str_c(".*", grid.pattern, ".*")) %>%
                                          #        str_extract(., pattern = str_c(".*", best.model.pattern, ".*")) %>%
      na.omit()
#+end_src

#+results:
: OGR data source with driver: ESRI Shapefile
: Source: "../RD_Accuracy/Grids", layer: "Grids"
: with 20209 features
: It has 15 fields


#+begin_src R :eval no
  n.rows.and.columns.for.subset = c(2,3,4,5,10,15,20,25)

  ## cl <- makeCluster(cores)
  ## registerDoParallel(cl)


  out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {

      pct.class.cover <- foreach(tile.path = classified.tile.paths,
                                 .packages = c("raster","plyr","dplyr","stringr","rgeos")) %do% {
                                     pc <- calculate.percent.cover.in.classified.tile(pts = grd,
                                                                                      tile.pth = tile.path,
                                                                                      n.rows.and.columns.subset = n.rows.and.columns.for.sub)
                                     return(pc)
                                 }
      pct.class.cover <- bind_rows(pct.class.cover)

      saveRDS(pct.class.cover, str_c(derived.dir,"/","Mad.Percent.Cover.Classified.Tiles.nRows",n.rows.and.columns.for.sub, ".rds"))
  }
#+end_src


******* Join Cover from Grids with predicted Cover from images
******** Tile df
#+begin_src R
  class.cover.files <- list.files(derived.dir, full.names = T) %>%
      str_extract(., ".*Mad.Percent.Cover.Classified.Tiles.*") %>%
      na.omit()

  class.cover.dfs <- lapply(class.cover.files, readRDS)

                                          #    out <- unlist(class.cover.dfs,recursive = F)

  Percent.Cover.Tiles <- bind_rows(class.cover.dfs)
  str(data.frame(Percent.Cover.Tiles))
#+END_SRC

#+results:
#+begin_example
'data.frame':	10868 obs. of  12 variables:
 $ pct_g_pred            : num  0.147 0.158 0.228 0.127 0.225 ...
 $ pct_t_pred            : num  0.853 0.842 0.772 0.873 0.775 ...
 $ grid.tile.target.model: chr  "madisonNAIP.mad.100m.1_N-100_C-30_madisonNAIP_all_Untuned_rf_prob.tif" "madisonNAIP.mad.100m.1_N-100_C-30_madisonNAIP_all_Untuned_svm_resp.tif" "madisonNAIP.mad.100m.1_N-100_C-50_madisonNAIP_all_Untuned_rf_prob.tif" "madisonNAIP.mad.100m.1_N-100_C-50_madisonNAIP_all_Untuned_svm_resp.tif" ...
 $ grid                  : chr  "mad.100m.1" "mad.100m.1" "mad.100m.1" "mad.100m.1" ...
 $ image                 : chr  "madisonNAIP" "madisonNAIP" "madisonNAIP" "madisonNAIP" ...
 $ target.cover          : chr  "all" "all" "all" "all" ...
 $ model                 : chr  "rf_prob" "svm_resp" "rf_prob" "svm_resp" ...
 $ grid.row.col.num      : num  10 10 10 10 10 10 10 10 10 10 ...
 $ area                  : num  4054 4054 4054 4054 4054 ...
 $ seg.params            : chr  "N-100_C-30" "N-100_C-30" "N-100_C-50" "N-100_C-50" ...
 $ target.type           : chr  "multinomial" "multinomial" "multinomial" "multinomial" ...
 $ pct_i_pred            : num  NA NA NA NA NA ...
#+end_example

******** Grid points df
#+BEGIN_SRC R
  Percent.Cover.Grids <- readRDS(str_c(derived.dir,"/","Grids.Percent.Cover.diffScale.rds"))
  str(data.frame(Percent.Cover.Grids))
#+end_src

#+results:
#+begin_example
'data.frame':	266 obs. of  10 variables:
 $ grid             : chr  "mad.100m.1" "mad.100m.10" "mad.100m.11" "mad.100m.12" ...
 $ n.points         : int  25 25 25 25 25 25 25 25 25 25 ...
 $ area             : num  50 50 50 50 50 50 50 50 50 50 ...
 $ pct.g.googleEarth: num  0 0.04 1 0 0 0.44 1 0 0 0 ...
 $ pct.i.googleEarth: num  0 0.72 0 1 1 0 0 0.24 1 0.2 ...
 $ pct.t.googleEarth: num  1 0.24 0 0 0 0.56 0 0.76 0 0.8 ...
 $ target.type      : chr  "multinomial" "multinomial" "multinomial" "multinomial" ...
 $ target.cover     : chr  "all" "all" "all" "all" ...
 $ grid.row.col.num : num  2 2 2 2 2 2 2 2 2 2 ...
 $ pct.o.googleEarth: num  NA NA NA NA NA NA NA NA NA NA ...
#+end_example

******** Join
#+begin_src R

                                          #Percent.Cover.Classified.Tiles.dataframe <- Percent.Cover.Classified.Tiles.dataframe %>%
                                          #    rename(pct_g_pred = pct_g, pct_t_pred = pct_t, pct_i_pred = pct_i, pct_o_pred = pct_o)

  grid.master.df <- left_join(Percent.Cover.Tiles, Percent.Cover.Grids, by = c("grid" = "grid", "grid.row.col.num" = "grid.row.col.num"))

                                          # Should join by Joining by: c("grid", "target.cover", "n.points", "target.type")

  str(grid.master.df)
#+END_SRC

#+results:
#+begin_example
'data.frame':	10868 obs. of  20 variables:
 $ pct_g_pred            : num  0.147 0.158 0.228 0.127 0.225 ...
 $ pct_t_pred            : num  0.853 0.842 0.772 0.873 0.775 ...
 $ grid.tile.target.model: chr  "madisonNAIP.mad.100m.1_N-100_C-30_madisonNAIP_all_Untuned_rf_prob.tif" "madisonNAIP.mad.100m.1_N-100_C-30_madisonNAIP_all_Untuned_svm_resp.tif" "madisonNAIP.mad.100m.1_N-100_C-50_madisonNAIP_all_Untuned_rf_prob.tif" "madisonNAIP.mad.100m.1_N-100_C-50_madisonNAIP_all_Untuned_svm_resp.tif" ...
 $ grid                  : chr  "mad.100m.1" "mad.100m.1" "mad.100m.1" "mad.100m.1" ...
 $ image                 : chr  "madisonNAIP" "madisonNAIP" "madisonNAIP" "madisonNAIP" ...
 $ target.cover.x        : chr  "all" "all" "all" "all" ...
 $ model                 : chr  "rf_prob" "svm_resp" "rf_prob" "svm_resp" ...
 $ grid.row.col.num      : num  10 10 10 10 10 10 10 10 10 10 ...
 $ area.x                : num  4054 4054 4054 4054 4054 ...
 $ seg.params            : chr  "N-100_C-30" "N-100_C-30" "N-100_C-50" "N-100_C-50" ...
 $ target.type.x         : chr  "multinomial" "multinomial" "multinomial" "multinomial" ...
 $ pct_i_pred            : num  NA NA NA NA NA ...
 $ n.points              : int  100 100 100 100 100 100 100 100 100 100 ...
 $ area.y                : num  4050 4050 4050 4050 4050 4050 4050 4050 4050 4050 ...
 $ pct.g.googleEarth     : num  0.23 0.23 0.23 0.23 0.23 0.23 0.23 0.23 0.23 0.23 ...
 $ pct.i.googleEarth     : num  0 0 0 0 0 0 0 0 0 0 ...
 $ pct.t.googleEarth     : num  0.71 0.71 0.71 0.71 0.71 0.71 0.71 0.71 0.71 0.71 ...
 $ target.type.y         : chr  "multinomial" "multinomial" "multinomial" "multinomial" ...
 $ target.cover.y        : chr  "all" "all" "all" "all" ...
 $ pct.o.googleEarth     : num  0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 0.06 ...
#+end_example


****** Make MAE plots

#+BEGIN_SRC R :results graphics :file figs/RMSE_plot.png :height 400 :width 400

  sub.grid.master.df <- grid.master.df %>%
      filter(seg.params == "N-30_C-15",
             grid.row.col.num == 5)

  ggplot(sub.grid.master.df, aes( x = pct.t.googleEarth, y = pct_t_pred, color = model)) +
      geom_point() + geom_smooth() + theme_classic() +
      geom_line(data = data.frame(pct.t.googleEarth = c(0,1), pct_t_pred = c(0,1), seg.params = "1:1"),
                color = "black", size = 1) +
      ggtitle("NAIP, n.pts: 25")

#+END_SRC

#+results:
[[file:figs/RMSE_plot.png]]

******* Multiple MAE plots
#+begin_src R :exports results :results graphics :file ./figs/raes.png :width 800 :height 1000
  grid.master.df <- grid.master.df %>%
      mutate(segment.size = ifelse(seg.params == "Pixel",1,as.numeric(str_match(seg.params, "N-([0-9]*)_.*")[,2])))

  ggplot(grid.master.df, aes(x = pct.t.googleEarth, y = pct_t_pred, color = model)) + geom_point() +
      geom_smooth() +
      facet_grid(grid.row.col.num~segment.size) + coord_equal() +
      geom_line(data = data.frame(pct.t.googleEarth = c(0,1), pct_t_pred = c(0,1), seg.params = "1:1"),      color = "black", size = 1)
#+end_src

#+results:
[[file:./figs/raes.png]]



****** Calc RMSE table

Create dataframe with structure:

| RMSE | image | segmentation | target | model | cropped.to.n.pts | cover_type |   |   |   |   |   |   |   |
|------+-------+--------------+--------+-------+------------------+------------+---+---+---+---+---+---+---|
|      |       |              |        |       |                  |            |   |   |   |   |   |   |   |


******* Calc Error Column

#+BEGIN_SRC R
  error_tree <- grid.master.df %>%
      group_by(image, model, seg.params, grid.row.col.num) %>%
      mutate(t_error = (pct_t_pred - pct.t.googleEarth)) %>%
      mutate(segment.size = ifelse(seg.params == "Pixel",1,as.numeric(str_match(seg.params, "N-([0-9]*)_.*")[,2])))


  error_tree %>%
      select(image, model, n.points, seg.params, grid, t_error, grid.row.col.num, segment.size) %>%
      filter(n.points == 225) %>%
      ungroup() %>%
      arrange(desc(abs(t_error))) %>%
      data.frame() %>%
      head()
#+END_SRC

#+results:
#+begin_example
        image    model n.points seg.params       grid   t_error
1 madisonNAIP svm_resp      225  N-20_C-10 mad.100m.9 0.5643061
2 madisonNAIP svm_resp      225  N-45_C-14 mad.100m.9 0.5632591
3 madisonNAIP svm_resp      225   N-15_C-4 mad.100m.9 0.5630687
4 madisonNAIP svm_resp      225   N-15_C-9 mad.100m.9 0.5516467
5 madisonNAIP svm_resp      225   N-30_C-9 mad.100m.9 0.5383210
6 madisonNAIP svm_resp      225  N-20_C-12 mad.100m.9 0.5302303
  grid.row.col.num segment.size
1               15           20
2               15           45
3               15           15
4               15           15
5               15           30
6               15           20
#+end_example


******* Plot distributions of errors
******** errors
#+begin_src R :exports results :results graphics :file ./figs/error_distributions.png :width 600
  ggplot(error_tree, aes(x = t_error)) + geom_histogram() + facet_grid(grid.row.col.num ~ segment.size)
#+end_src

#+results:
[[file:./figs/error_distributions.png]]


******** absolute errors
#+begin_src R :exports results :results graphics :file ./figs/abs_error_distributions.png :width 600
  ggplot(error_tree, aes(x = abs(t_error))) + geom_histogram() + facet_grid(grid.row.col.num ~ segment.size)
#+end_src

#+results:
[[file:./figs/abs_error_distributions.png]]

******* Calc MAE, mean absolute error
#+BEGIN_SRC R

      MAE_tree <- grid.master.df %>%
          group_by(image, model, grid.row.col.num, seg.params) %>%
          summarize(MAE_t = mean(abs(pct_t_pred - pct.t.googleEarth), na.rm =T ),
                    sd_MAE_t = sd((pct_t_pred - pct.t.googleEarth), na.rm =T ),
                    n.points = mean(n.points))

      MAE_tree <- MAE_tree %>%
          mutate(segment.size = ifelse(seg.params == "Pixel",1,as.numeric(str_match(seg.params, "N-([0-9]*)_.*")[,2])),
                 compactness =  ifelse(seg.params == "Pixel",1,as.numeric(str_match(seg.params, "N-[0-9]*_C-([0-9]*).*")[,2])),
                 area = (7 *(grid.row.col.num-1)^2))


#+END_SRC

#+results:



****** MAE analysis

Which combination of image, segmentation, target, model and n.pts
(spatial scale) minimize error?

#+BEGIN_SRC R :results raw
  options(asciiType = "org")
  options(warn = -1)
  MAE_tree %>%
      ungroup() %>%
      arrange(MAE_t) %>%
      head(n = 30) %>%
      ascii()
#+END_SRC

#+results:
 |    | image       | model    | grid.row.col.num | seg.params | MAE_t | sd_MAE_t | n.points | segment.size | compactness |
 |----+-------------+----------+------------------+------------+-------+----------+----------+--------------+-------------|
 |  1 | madisonNAIP | svm_resp |            15.00 | N-20_C-6   |  0.05 |     0.08 |   225.00 |        20.00 |        6.00 |
 |  2 | madisonNAIP | svm_resp |            15.00 | N-30_C-18  |  0.06 |     0.08 |   225.00 |        30.00 |       18.00 |
 |  3 | madisonNAIP | rf_prob  |            15.00 | N-15_C-9   |  0.06 |     0.07 |   225.00 |        15.00 |        9.00 |
 |  4 | madisonNAIP | rf_prob  |            15.00 | N-30_C-15  |  0.06 |     0.08 |   225.00 |        30.00 |       15.00 |
 |  5 | madisonNAIP | rf_prob  |            15.00 | N-100_C-60 |  0.06 |     0.08 |   225.00 |       100.00 |       60.00 |
 |  6 | madisonNAIP | rf_prob  |            15.00 | N-30_C-18  |  0.06 |     0.08 |   225.00 |        30.00 |       18.00 |
 |  7 | madisonNAIP | svm_resp |            10.00 | N-20_C-6   |  0.06 |     0.09 |   100.00 |        20.00 |        6.00 |
 |  8 | madisonNAIP | svm_resp |            15.00 | Pixel      |  0.06 |     0.08 |   225.00 |         1.00 |        1.00 |
 |  9 | madisonNAIP | rf_prob  |            15.00 | N-20_C-10  |  0.07 |     0.07 |   225.00 |        20.00 |       10.00 |
 | 10 | madisonNAIP | rf_prob  |            15.00 | N-100_C-50 |  0.07 |     0.08 |   225.00 |       100.00 |       50.00 |
 | 11 | madisonNAIP | svm_resp |            10.00 | N-30_C-18  |  0.07 |     0.09 |   100.00 |        30.00 |       18.00 |
 | 12 | madisonNAIP | rf_prob  |            15.00 | N-20_C-6   |  0.07 |     0.08 |   225.00 |        20.00 |        6.00 |
 | 13 | madisonNAIP | svm_resp |            15.00 | N-60_C-18  |  0.07 |     0.08 |   225.00 |        60.00 |       18.00 |
 | 14 | madisonNAIP | rf_prob  |            15.00 | N-15_C-4   |  0.07 |     0.08 |   225.00 |        15.00 |        4.00 |
 | 15 | madisonNAIP | rf_prob  |            15.00 | N-45_C-22  |  0.07 |     0.08 |   225.00 |        45.00 |       22.00 |
 | 16 | madisonNAIP | rf_prob  |            10.00 | N-15_C-9   |  0.07 |     0.10 |   100.00 |        15.00 |        9.00 |
 | 17 | madisonNAIP | rf_prob  |            15.00 | N-60_C-36  |  0.07 |     0.08 |   225.00 |        60.00 |       36.00 |
 | 18 | madisonNAIP | rf_prob  |            10.00 | N-30_C-15  |  0.07 |     0.10 |   100.00 |        30.00 |       15.00 |
 | 19 | madisonNAIP | rf_prob  |            15.00 | N-20_C-12  |  0.07 |     0.08 |   225.00 |        20.00 |       12.00 |
 | 20 | madisonNAIP | rf_prob  |            10.00 | N-20_C-10  |  0.08 |     0.09 |   100.00 |        20.00 |       10.00 |
 | 21 | madisonNAIP | rf_prob  |            10.00 | N-100_C-60 |  0.08 |     0.09 |   100.00 |       100.00 |       60.00 |
 | 22 | madisonNAIP | rf_prob  |            10.00 | N-30_C-18  |  0.08 |     0.10 |   100.00 |        30.00 |       18.00 |
 | 23 | madisonNAIP | rf_prob  |            15.00 | N-15_C-8   |  0.08 |     0.08 |   225.00 |        15.00 |        8.00 |
 | 24 | madisonNAIP | rf_prob  |            15.00 | N-45_C-27  |  0.08 |     0.08 |   225.00 |        45.00 |       27.00 |
 | 25 | madisonNAIP | rf_prob  |            10.00 | N-15_C-4   |  0.08 |     0.09 |   100.00 |        15.00 |        4.00 |
 | 26 | madisonNAIP | svm_resp |            10.00 | Pixel      |  0.08 |     0.10 |   100.00 |         1.00 |        1.00 |
 | 27 | madisonNAIP | rf_prob  |            10.00 | N-60_C-36  |  0.08 |     0.09 |   100.00 |        60.00 |       36.00 |
 | 28 | madisonNAIP | rf_prob  |            15.00 | N-30_C-9   |  0.08 |     0.08 |   225.00 |        30.00 |        9.00 |
 | 29 | madisonNAIP | svm_resp |            15.00 | N-60_C-30  |  0.08 |     0.08 |   225.00 |        60.00 |       30.00 |
 | 30 | madisonNAIP | svm_resp |            15.00 | N-100_C-60 |  0.08 |     0.08 |   225.00 |       100.00 |       60.00 |
Joining, by = "unq__ID"
|   | image       | model   | grid.row.col.num | seg.params | MAE_t | sd_MAE_t | n.points | segment.size |
|---+-------------+---------+------------------+------------+-------+----------+----------+--------------|
| 1 | madisonNAIP | rf_prob | 15.00            | N-30_C-15  | 0.06  | 0.08     | 225.00   | 30.00        |
| 2 | madisonNAIP | rf_prob | 10.00            | N-30_C-15  | 0.07  | 0.10     | 100.00   | 30.00        |
| 3 | madisonNAIP | rf_prob | 4.00             | N-30_C-15  | 0.11  | 0.13     | 49.00    | 30.00        |
| 4 | madisonNAIP | rf_prob | 5.00             | N-30_C-15  | 0.14  | 0.17     | 25.00    | 30.00        |
| 5 | madisonNAIP | rf_prob | 3.00             | N-30_C-15  | 0.15  | 0.18     | 25.00    | 30.00        |
| 6 | madisonNAIP | rf_prob | 2.00             | N-30_C-15  | 0.23  | 0.32     | 25.00    | 30.00        |
| 7 | madisonNAIP | rf_prob | 20.00            | N-30_C-15  |       |          |          | 30.00        |
| 8 | madisonNAIP | rf_prob | 25.00            | N-30_C-15  |       |          |          | 30.00        |


******* What's the best average model using minimum MAE as criteria?
#+begin_src R
  options(warn = -1)
  MAE_tree %>%
      group_by(seg.params, model, image, grid.row.col.num) %>%
      summarize(mean_error_across_grids = mean(MAE_t, na.rm = T)) %>%
      group_by(grid.row.col.num) %>%
      top_n(-1, wt = mean_error_across_grids) %>%
      arrange(grid.row.col.num, mean_error_across_grids) %>%
      data.frame %>%
      ascii
  options(warn = 1)
#+end_src

#+results:
:  |   | seg.params | model    | image       | grid.row.col.num | mean_error_across_grids |
: |---+------------+----------+-------------+------------------+-------------------------|
: | 1 | N-20_C-10  | rf_prob  | madisonNAIP | 2.00             | 0.18                    |
: | 2 | N-15_C-9   | rf_prob  | madisonNAIP | 3.00             | 0.13                    |
: | 3 | N-15_C-9   | rf_prob  | madisonNAIP | 4.00             | 0.09                    |
: | 4 | N-15_C-8   | svm_resp | madisonNAIP | 5.00             | 0.12                    |
: | 5 | N-20_C-6   | svm_resp | madisonNAIP | 10.00            | 0.06                    |
: | 6 | N-20_C-6   | svm_resp | madisonNAIP | 15.00            | 0.05                    |

******* What are the top 5 models at each scale?
#+begin_src R
options(warn = -1)
MAE_tree %>%
group_by(seg.params, model, image, grid.row.col.num) %>%
summarize(mean_error_across_grids = mean(MAE_t, na.rm = T)) %>%
group_by(grid.row.col.num) %>%
top_n(-5, wt = mean_error_across_grids) %>%
arrange(grid.row.col.num, mean_error_across_grids) %>%
data.frame %>%
ascii
options(warn = 1)
#+end_src

#+results:
#+begin_example
 |    | seg.params | model    | image       | grid.row.col.num | mean_error_across_grids |
|----+------------+----------+-------------+------------------+-------------------------|
| 1  | N-20_C-10  | rf_prob  | madisonNAIP | 2.00             | 0.18                    |
| 2  | N-30_C-9   | rf_prob  | madisonNAIP | 2.00             | 0.19                    |
| 3  | Pixel      | svm_resp | madisonNAIP | 2.00             | 0.20                    |
| 4  | N-60_C-30  | svm_resp | madisonNAIP | 2.00             | 0.20                    |
| 5  | N-15_C-4   | rf_prob  | madisonNAIP | 2.00             | 0.21                    |
| 6  | N-15_C-9   | rf_prob  | madisonNAIP | 3.00             | 0.13                    |
| 7  | Pixel      | svm_resp | madisonNAIP | 3.00             | 0.13                    |
| 8  | N-45_C-14  | rf_prob  | madisonNAIP | 3.00             | 0.13                    |
| 9  | N-20_C-6   | svm_resp | madisonNAIP | 3.00             | 0.14                    |
| 10 | N-30_C-9   | rf_prob  | madisonNAIP | 3.00             | 0.14                    |
| 11 | N-15_C-9   | rf_prob  | madisonNAIP | 4.00             | 0.09                    |
| 12 | N-20_C-6   | rf_prob  | madisonNAIP | 4.00             | 0.10                    |
| 13 | N-15_C-4   | rf_prob  | madisonNAIP | 4.00             | 0.10                    |
| 14 | N-20_C-6   | svm_resp | madisonNAIP | 4.00             | 0.10                    |
| 15 | N-30_C-18  | rf_prob  | madisonNAIP | 4.00             | 0.11                    |
| 16 | N-15_C-8   | svm_resp | madisonNAIP | 5.00             | 0.12                    |
| 17 | N-30_C-18  | svm_resp | madisonNAIP | 5.00             | 0.12                    |
| 18 | Pixel      | svm_resp | madisonNAIP | 5.00             | 0.12                    |
| 19 | N-20_C-6   | svm_resp | madisonNAIP | 5.00             | 0.13                    |
| 20 | N-60_C-30  | svm_resp | madisonNAIP | 5.00             | 0.13                    |
| 21 | N-20_C-6   | svm_resp | madisonNAIP | 10.00            | 0.06                    |
| 22 | N-30_C-18  | svm_resp | madisonNAIP | 10.00            | 0.07                    |
| 23 | N-15_C-9   | rf_prob  | madisonNAIP | 10.00            | 0.07                    |
| 24 | N-30_C-15  | rf_prob  | madisonNAIP | 10.00            | 0.07                    |
| 25 | N-20_C-10  | rf_prob  | madisonNAIP | 10.00            | 0.08                    |
| 26 | N-20_C-6   | svm_resp | madisonNAIP | 15.00            | 0.05                    |
| 27 | N-30_C-18  | svm_resp | madisonNAIP | 15.00            | 0.06                    |
| 28 | N-15_C-9   | rf_prob  | madisonNAIP | 15.00            | 0.06                    |
| 29 | N-30_C-15  | rf_prob  | madisonNAIP | 15.00            | 0.06                    |
| 30 | N-100_C-60 | rf_prob  | madisonNAIP | 15.00            | 0.06                    |
#+end_example

Plot:
x = cropped.to.n.pts
y = RMSE
color = model
facet(segmentation~cover_type)

#+BEGIN_SRC R :results graphics :file figs/Grids_MAE_areaVSerror.png :height 300 :width 900

    MAE_tree_.5compactness <- MAE_tree %>%
      mutate(c = compactness/segment.size) %>%
      filter( c > .45 & c < .55 | c ==1) %>%
      filter(area < 2000)

      ggplot(MAE_tree_.5compactness, aes(x = area, y = MAE_t, color = model, size = n.points)) + geom_point() +
          facet_grid(image~segment.size, labeller = label_both) +
            theme(text = element_text(size = 15))

#+END_SRC

#+results:
[[file:figs/Grids_MAE_areaVSerror.png]]



#+begin_src R :exports results :results graphics :file ./figs/MAE_areaVSerror_N-30_C-15.png

    MAE_tree.sub <- MAE_tree %>%
      filter(segment.size == 30, compactness == 15, model == "rf_prob")

    ggplot(MAE_tree.sub, aes(x = grid.row.col.num, y = MAE_t, color = model, size = n.points)) + geom_point() +
            theme(text = element_text(size = 20)) +
        facet_grid(image~segment.size, labeller = label_both) +
  ggtitle("Decrease in error with increasing area")

#+end_src

#+results:
[[file:./figs/MAE_areaVSerror_N-30_C-15.png]]


#+begin_src R
(MAE_tree.sub) %>% data.frame
#+end_src

#+results:
#+begin_example
        image   model grid.row.col.num seg.params      MAE_t   sd_MAE_t
1 madisonNAIP rf_prob                2  N-30_C-15 0.23256276 0.31975161
2 madisonNAIP rf_prob                3  N-30_C-15 0.14957574 0.18125608
3 madisonNAIP rf_prob                4  N-30_C-15 0.10584939 0.12563883
4 madisonNAIP rf_prob                5  N-30_C-15 0.14341725 0.16637486
5 madisonNAIP rf_prob               10  N-30_C-15 0.07244346 0.09530333
6 madisonNAIP rf_prob               15  N-30_C-15 0.06155936 0.07615797
7 madisonNAIP rf_prob               20  N-30_C-15        NaN         NA
8 madisonNAIP rf_prob               25  N-30_C-15        NaN         NA
  n.points segment.size compactness
1       25           30          15
2       25           30          15
3       49           30          15
4       25           30          15
5      100           30          15
6      225           30          15
7       NA           30          15
8       NA           30          15
#+end_example

#+BEGIN_SRC R :results graphics :file figs/MAE_tree_compare_seg.sizeXMAE.png :height 800 :width 600

  ggplot(MAE_tree, aes(x = segment.size, y = MAE_t, color = n.points, group = interaction(n.points)) + geom_line() +
      facet_grid(model~image)

#+END_SRC

#+results:
[[file:figs/MAE_tree_compare_seg.sizeXMAE.png]]


#+BEGIN_SRC R :results raw
  m1 <-lm(MAE_t*100 ~ image * (model +  target.type + n.points * segment.size), data = MAE_tree)
  tidy(m1, digits = 2) %>%
ascii()
#+END_SRC

#+results:
Error in eval(expr, envir, enclos) : object 'target.type' not found
 Error in tidy(m1, digits = 2) : object 'm1' not found
[1] "org_babel_R_eoe"


*** Summarize Accuracy Assessment Results

Comparing classification to other estimates of cover.

**** Random Points

***** Table showing performance of classifiers
#+begin_src R

#+end_src
***** Plots showing how image, segment size, compactness, and model affect accuracy

**** Field Data
**** Grid of Points
#+begin_src R :results none
      error.df <- readRDS(str_c(derived.dir, "/Grids.point2pixel.error.df.rds"))

      error.df %>%
          arrange(overall.error) %>%
          head()

      error.df %>%
          arrange(desc(overall.error)) %>%
          head()

      error.df %>%
          filter(seg.params != "Pixel") %>%
          arrange(desc(overall.error)) %>%
          head()

  error.df <- error.df %>%
      mutate(segment.size = as.numeric(ifelse(!is.na(str_match(seg.params, "N-([0-9]+)_C-[0-9]+")[,2]), str_match(seg.params, "N-([0-9]+)_C-[0-9]+")[,2], 1)),
             segment.size = ifelse(image == "panshpSPOT", segment.size * 1.5, segment.size),
             compactness = as.numeric(str_match(seg.params, "N-[0-9]+_C-([0-9]+)")[,2]))
#+end_src

***** load grid.points
#+begin_src R
  grid.points <- readOGR(dsn = accuracy.region.imageCRS.dsn,
                         layer = "madisonNAIP_Grids")

#+end_src

#+results:
:  OGR data source with driver: ESRI Shapefile
: Source: "../DD/reprojected.Accuracy.Regions", layer: "madisonNAIP_Grids"
: with 20209 features
: It has 15 fields

***** Plots of 20 best classified grids with points superimposed
For each grid, find the best classification.  Plot best 20 grids.
#+begin_src R :results raw
    best.classified.grids <- error.df %>%
        ungroup() %>%
        group_by(grid) %>%
        top_n(1, desc(overall.error)) %>%
        ungroup() %>%
        arrange(overall.error) %>%
        select(overall.error, grid,image, target.cover, model, seg.params) %>%
        mutate(path = paste0(dd.accuracy.classified.dir,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif")) %>%
        head(n = 20)

options(warn = -1)
  best.classified.grids %>% ascii
options(warn = 1)
#+end_src

#+results:
|    | overall.error | grid        | image       | target.cover | model    | seg.params | path                                                                                                  |
|----+---------------+-------------+-------------+--------------+----------+------------+-------------------------------------------------------------------------------------------------------|
|  1 |          0.00 | mad.50m.2   | madisonNAIP | all          | rf_prob  | N-60_C-30  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-60_C-30_madisonNAIP_all_rf_prob.tif    |
|  2 |          0.00 | mad.50m.2   | madisonNAIP | all          | rf_prob  | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif    |
|  3 |          0.02 | mad.100m.12 | madisonNAIP | all          | rf_prob  | N-30_C-18  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-30_C-18_madisonNAIP_all_rf_prob.tif  |
|  4 |          0.02 | mad.100m.12 | madisonNAIP | all          | rf_prob  | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
|  5 |          0.03 | mad.50m.5   | madisonNAIP | all          | svm_resp | N-100_C-30 | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-100_C-30_madisonNAIP_all_svm_resp.tif  |
|  6 |          0.03 | mad.50m.5   | madisonNAIP | all          | svm_resp | N-100_C-50 | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-100_C-50_madisonNAIP_all_svm_resp.tif  |
|  7 |          0.03 | mad.100m.23 | madisonNAIP | all          | rf_prob  | N-45_C-14  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-45_C-14_madisonNAIP_all_rf_prob.tif  |
|  8 |          0.03 | mad.100m.23 | madisonNAIP | all          | rf_prob  | N-45_C-27  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-45_C-27_madisonNAIP_all_rf_prob.tif  |
|  9 |          0.03 | mad.150m.9  | madisonNAIP | all          | rf_prob  | N-30_C-18  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-30_C-18_madisonNAIP_all_rf_prob.tif   |
| 10 |          0.04 | mad.100m.13 | madisonNAIP | all          | rf_prob  | N-15_C-4   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-15_C-4_madisonNAIP_all_rf_prob.tif   |
| 11 |          0.04 | mad.100m.13 | madisonNAIP | all          | rf_prob  | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 12 |          0.04 | mad.100m.13 | madisonNAIP | all          | svm_resp | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-60_C-36_madisonNAIP_all_svm_resp.tif |
| 13 |          0.04 | mad.100m.13 | madisonNAIP | all          | rf_prob  | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_Pixel_madisonNAIP_all_rf_prob.tif      |
| 14 |          0.06 | mad.100m.27 | madisonNAIP | all          | rf_prob  | N-100_C-50 | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-100_C-50_madisonNAIP_all_rf_prob.tif |
| 15 |          0.06 | mad.100m.27 | madisonNAIP | all          | rf_prob  | N-30_C-18  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-30_C-18_madisonNAIP_all_rf_prob.tif  |
| 16 |          0.06 | mad.100m.27 | madisonNAIP | all          | rf_prob  | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 17 |          0.06 | mad.150m.5  | madisonNAIP | all          | rf_prob  | N-60_C-18  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-60_C-18_madisonNAIP_all_rf_prob.tif   |
| 18 |          0.06 | mad.200m.2  | madisonNAIP | all          | rf_prob  | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 19 |          0.07 | mad.100m.28 | madisonNAIP | all          | rf_prob  | N-30_C-15  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-30_C-15_madisonNAIP_all_rf_prob.tif  |
| 20 |          0.07 | mad.100m.3  | madisonNAIP | all          | svm_resp | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_Pixel_madisonNAIP_all_svm_resp.tif      |
 Error in eval(expr, envir, enclos) : object 'error.df' not found
Error in eval(expr, envir, enclos) :
  object 'best.classified.grids' not found
 Error: object 'ClassifiedTilesDirName' not found
Error in eval(expr, envir, enclos) :
  object 'best.classified.grids' not found


#+begin_src R :results none

  lapply(1:nrow(best.classified.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = best.classified.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = best.classified.grids$path[i],
                                           fig.dir = "figs/bestgrids",
                                           target = "a")
  })

  ## plts <- lapply(best.classified.grids$path, function(path) {
  ##   grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##   points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##   points@data <- points@data %>%
  ##       mutate(x = coordinates(points)[,1],
  ##              y = coordinates(points)[,2])
  ##   ras <- raster(path)
  ##   pts.on.classified.tile.plot(fig.dir = "figs/bestgrids",points, ras, target = "a")
  ## })

  #+end_src

#+BEGIN_SRC R :results raw :eval no

best.grid.paths <- list.files("figs/bestgrids", full.names = T)

a <- sapply(best.grid.paths, function(x) message("[[file:",x,"]]"))

#+END_SRC

***** DONE Plots of 20 worst classified grids with points superimposed.
For each grid, find the worst classification.  Plot worst 20 grids.
#+begin_src R :results raw
      worst.classified.grids <- error.df %>%
          ungroup() %>%
          group_by(grid) %>%
          top_n(1, overall.error) %>%
          ungroup() %>%
          arrange(desc(overall.error)) %>%
          select(overall.error, grid,image, target.cover, model, seg.params) %>%
          mutate(path = paste0(dd.accuracy.classified.dir,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif")) %>%
          head(n = 20)

  options(warn = -1)
    worst.classified.grids %>% ascii
  options(warn = 1)
#+end_src

#+results:
|    | overall.error | grid        | image       | target.cover | model    | seg.params | path                                                                                                  |
|----+---------------+-------------+-------------+--------------+----------+------------+-------------------------------------------------------------------------------------------------------|
|  1 |          0.63 | mad.100m.9  | madisonNAIP | all          | svm_resp | N-20_C-10  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-10_madisonNAIP_all_svm_resp.tif  |
|  2 |          0.61 | mad.50m.3   | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-20_C-6_madisonNAIP_all_svm_resp.tif    |
|  3 |          0.59 | mad.100m.22 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-20_C-6_madisonNAIP_all_svm_resp.tif  |
|  4 |          0.58 | mad.50m.1   | madisonNAIP | all          | svm_resp | N-45_C-14  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-45_C-14_madisonNAIP_all_svm_resp.tif   |
|  5 |          0.56 | mad.100m.17 | madisonNAIP | all          | svm_resp | N-20_C-12  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-20_C-12_madisonNAIP_all_svm_resp.tif |
|  6 |          0.56 | mad.100m.17 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-20_C-6_madisonNAIP_all_svm_resp.tif  |
|  7 |          0.54 | mad.150m.6  | madisonNAIP | all          | svm_resp | N-20_C-12  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-12_madisonNAIP_all_svm_resp.tif  |
|  8 |          0.51 | mad.100m.29 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-20_C-6_madisonNAIP_all_svm_resp.tif  |
|  9 |          0.51 | mad.150m.4  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-20_C-6_madisonNAIP_all_svm_resp.tif   |
| 10 |          0.48 | mad.150m.10 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-20_C-6_madisonNAIP_all_svm_resp.tif  |
| 11 |          0.48 | mad.150m.8  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-6_madisonNAIP_all_svm_resp.tif   |
| 12 |          0.47 | mad.100m.30 | madisonNAIP | all          | svm_resp | N-15_C-4   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-15_C-4_madisonNAIP_all_svm_resp.tif  |
| 13 |          0.46 | mad.150m.1  | madisonNAIP | all          | svm_resp | N-20_C-10  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-20_C-10_madisonNAIP_all_svm_resp.tif  |
| 14 |          0.45 | mad.100m.20 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-20_C-6_madisonNAIP_all_svm_resp.tif  |
| 15 |          0.44 | mad.100m.5  | madisonNAIP | all          | svm_resp | N-20_C-10  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-20_C-10_madisonNAIP_all_svm_resp.tif  |
| 16 |          0.44 | mad.150m.2  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-20_C-6_madisonNAIP_all_svm_resp.tif   |
| 17 |          0.43 | mad.100m.10 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-20_C-6_madisonNAIP_all_svm_resp.tif  |
| 18 |          0.43 | mad.100m.24 | madisonNAIP | all          | svm_resp | N-30_C-9   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-30_C-9_madisonNAIP_all_svm_resp.tif  |
| 19 |          0.43 | mad.150m.3  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-20_C-6_madisonNAIP_all_svm_resp.tif   |
| 20 |          0.42 | mad.100m.19 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-20_C-6_madisonNAIP_all_svm_resp.tif  |
 Error: object 'ClassifiedTilesDirName' not found
Error in eval(expr, envir, enclos) :
  object 'worst.classified.grids' not found

  ## plts <- lapply(worst.classified.grids$path, function(path) {
  ##   grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##   points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##   points@data <- points@data %>%
  ##       mutate(x = coordinates(points)[,1],
  ##              y = coordinates(points)[,2])
  ##   ras <- raster(path)
  ##   pts.on.classified.tile.plot(fig.dir = "figs/worstgrids",points, ras, target = "a")
  ## })

#+begin_src R

  lapply(1:nrow(worst.classified.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = worst.classified.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = worst.classified.grids$path[i],
                                           fig.dir = "figs/worstgrids",
                                           target = "a")
  })


#+end_src

  ## plts <- lapply(worst.classified.grids$path, function(path) {
  ##   grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##   points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##   points@data <- points@data %>%
  ##       mutate(x = coordinates(points)[,1],
  ##              y = coordinates(points)[,2])
  ##   ras <- raster(path)
  ##   pts.on.classified.tile.plot(fig.dir = "figs/worstgrids",points, ras, target = "a")
  ## })

  #+end_src

#+results:
:  Error in .local(.Object, ...) :
:   `../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_Pixel_madisonNAIP_all_rf_prob.tif' does not exist in the file system,
: and is not recognised as a supported dataset name.
:
:
: Error in .rasterObjectFromFile(x, band = band, objecttype = "RasterLayer",  (from #17) :
:   Cannot create a RasterLayer object from this file. (file does not exist)

#+begin_example
 Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 324 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 646 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 382 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 87 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 48 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 228 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 53 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 305 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 107 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 472 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 67 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 353 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 1125 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 256 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 665 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 395 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 92 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 334 rows containing missing values (geom_raster).
[[1]]
png
  2

[[2]]
png
  2

[[3]]
png
  2

[[4]]
png
  2

[[5]]
png
  2

[[6]]
png
  2

[[7]]
png
  2

[[8]]
png
  2

[[9]]
png
  2

[[10]]
png
  2

[[11]]
png
  2

[[12]]
png
  2

[[13]]
png
  2

[[14]]
png
  2

[[15]]
png
  2

[[16]]
png
  2

[[17]]
png
  2

[[18]]
png
  2

[[19]]
png
  2

[[20]]
png
  2
#+end_example

#+BEGIN_SRC R :results raw :eval no

worst.grid.paths <- list.files("figs/worstgrids", full.names = T)

a <- sapply(worst.grid.paths, function(x) message("[[file:",x,"]]"))

#+END_SRC


***** Table showing performace of classifiers, average over all grids, increasing error
#+begin_src R :results raw
    error.df.avg.class <- error.df %>%
        select(-grid) %>%
        group_by(image, target.cover, model, seg.params, segment.size, compactness,tuned) %>%
        summarize_each(funs(mean(.,na.rm = T))) %>%
        ungroup() %>%
        arrange(overall.error)


  options(warn = -1)
    error.df.avg.class %>% ascii
  options(warn = 1)
#+end_src

#+results:
|    | image       | target.cover | model    | seg.params | segment.size | compactness | tuned   | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|----+-------------+--------------+----------+------------+--------------+-------------+---------+---------------+-------------------------------+------------------------------------+------------------------------|
|  1 | madisonNAIP | all          | rf_prob  | N-60_C-36  |        60.00 |       36.00 | Untuned |          0.19 |                          0.42 |                               0.26 |                         0.21 |
|  2 | madisonNAIP | all          | rf_prob  | N-45_C-22  |        45.00 |       22.00 | Untuned |          0.20 |                          0.42 |                               0.26 |                         0.24 |
|  3 | madisonNAIP | all          | rf_prob  | N-30_C-15  |        30.00 |       15.00 | Untuned |          0.20 |                          0.41 |                               0.24 |                         0.26 |
|  4 | madisonNAIP | all          | rf_prob  | N-15_C-8   |        15.00 |        8.00 | Untuned |          0.20 |                          0.47 |                               0.25 |                         0.20 |
|  5 | madisonNAIP | all          | rf_prob  | N-20_C-10  |        20.00 |       10.00 | Untuned |          0.20 |                          0.46 |                               0.24 |                         0.23 |
|  6 | madisonNAIP | all          | rf_prob  | N-30_C-18  |        30.00 |       18.00 | Untuned |          0.20 |                          0.42 |                               0.25 |                         0.23 |
|  7 | madisonNAIP | all          | rf_prob  | N-60_C-18  |        60.00 |       18.00 | Untuned |          0.20 |                          0.51 |                               0.24 |                         0.20 |
|  8 | madisonNAIP | all          | rf_prob  | N-60_C-30  |        60.00 |       30.00 | Untuned |          0.20 |                          0.50 |                               0.26 |                         0.18 |
|  9 | madisonNAIP | all          | rf_prob  | N-20_C-12  |        20.00 |       12.00 | Untuned |          0.20 |                          0.45 |                               0.27 |                         0.20 |
| 10 | madisonNAIP | all          | rf_prob  | N-100_C-60 |       100.00 |       60.00 | Untuned |          0.20 |                          0.40 |                               0.26 |                         0.26 |
| 11 | madisonNAIP | all          | rf_prob  | N-30_C-9   |        30.00 |        9.00 | Untuned |          0.20 |                          0.46 |                               0.26 |                         0.21 |
| 12 | madisonNAIP | all          | rf_prob  | N-45_C-27  |        45.00 |       27.00 | Untuned |          0.20 |                          0.48 |                               0.27 |                         0.21 |
| 13 | madisonNAIP | all          | rf_prob  | N-100_C-50 |       100.00 |       50.00 | Untuned |          0.20 |                          0.39 |                               0.27 |                         0.26 |
| 14 | madisonNAIP | all          | rf_prob  | N-15_C-9   |        15.00 |        9.00 | Untuned |          0.20 |                          0.40 |                               0.26 |                         0.26 |
| 15 | madisonNAIP | all          | rf_prob  | N-45_C-14  |        45.00 |       14.00 | Untuned |          0.20 |                          0.47 |                               0.26 |                         0.21 |
| 16 | madisonNAIP | all          | rf_prob  | N-100_C-30 |       100.00 |       30.00 | Untuned |          0.20 |                          0.48 |                               0.27 |                         0.20 |
| 17 | madisonNAIP | all          | rf_prob  | N-20_C-6   |        20.00 |        6.00 | Untuned |          0.20 |                          0.47 |                               0.25 |                         0.24 |
| 18 | madisonNAIP | all          | rf_prob  | N-15_C-4   |        15.00 |        4.00 | Untuned |          0.21 |                          0.42 |                               0.27 |                         0.24 |
| 19 | madisonNAIP | all          | rf_prob  | Pixel      |         1.00 |             | Untuned |          0.21 |                          0.52 |                               0.24 |                         0.16 |
| 20 | madisonNAIP | all          | svm_resp | N-60_C-30  |        60.00 |       30.00 | Untuned |          0.23 |                          0.56 |                               0.24 |                         0.24 |
| 21 | madisonNAIP | all          | svm_resp | Pixel      |         1.00 |             | Untuned |          0.23 |                          0.58 |                               0.12 |                         0.32 |
| 22 | madisonNAIP | all          | svm_resp | N-45_C-27  |        45.00 |       27.00 | Untuned |          0.23 |                          0.57 |                               0.27 |                         0.22 |
| 23 | madisonNAIP | all          | svm_resp | N-45_C-22  |        45.00 |       22.00 | Untuned |          0.23 |                          0.53 |                               0.29 |                         0.23 |
| 24 | madisonNAIP | all          | svm_resp | N-100_C-50 |       100.00 |       50.00 | Untuned |          0.24 |                          0.55 |                               0.27 |                         0.24 |
| 25 | madisonNAIP | all          | svm_resp | N-100_C-30 |       100.00 |       30.00 | Untuned |          0.24 |                          0.56 |                               0.26 |                         0.26 |
| 26 | madisonNAIP | all          | svm_resp | N-100_C-60 |       100.00 |       60.00 | Untuned |          0.24 |                          0.56 |                               0.26 |                         0.27 |
| 27 | madisonNAIP | all          | svm_resp | N-60_C-18  |        60.00 |       18.00 | Untuned |          0.24 |                          0.59 |                               0.21 |                         0.31 |
| 28 | madisonNAIP | all          | svm_resp | N-60_C-36  |        60.00 |       36.00 | Untuned |          0.24 |                          0.55 |                               0.31 |                         0.20 |
| 29 | madisonNAIP | all          | svm_resp | N-30_C-18  |        30.00 |       18.00 | Untuned |          0.24 |                          0.54 |                               0.20 |                         0.34 |
| 30 | madisonNAIP | all          | svm_resp | N-30_C-15  |        30.00 |       15.00 | Untuned |          0.25 |                          0.57 |                               0.28 |                         0.24 |
| 31 | madisonNAIP | all          | svm_resp | N-15_C-8   |        15.00 |        8.00 | Untuned |          0.26 |                          0.56 |                               0.30 |                         0.25 |
| 32 | madisonNAIP | all          | svm_resp | N-45_C-14  |        45.00 |       14.00 | Untuned |          0.28 |                          0.55 |                               0.46 |                         0.12 |
| 33 | madisonNAIP | all          | svm_resp | N-15_C-9   |        15.00 |        9.00 | Untuned |          0.29 |                          0.55 |                               0.54 |                         0.10 |
| 34 | madisonNAIP | all          | svm_resp | N-30_C-9   |        30.00 |        9.00 | Untuned |          0.30 |                          0.56 |                               0.54 |                         0.10 |
| 35 | madisonNAIP | all          | svm_resp | N-15_C-4   |        15.00 |        4.00 | Untuned |          0.31 |                          0.56 |                               0.57 |                         0.13 |
| 36 | madisonNAIP | all          | svm_resp | N-20_C-12  |        20.00 |       12.00 | Untuned |          0.32 |                          0.57 |                               0.60 |                         0.09 |
| 37 | madisonNAIP | all          | svm_resp | N-20_C-6   |        20.00 |        6.00 | Untuned |          0.32 |                          0.33 |                               0.54 |                         0.37 |
| 38 | madisonNAIP | all          | svm_resp | N-20_C-10  |        20.00 |       10.00 | Untuned |          0.32 |                          0.59 |                               0.60 |                         0.10 |
 Error: unknown variable to group by : segment.size
Error in eval(expr, envir, enclos) :
  object 'error.df.avg.class' not found
 Error: unknown variable to group by : segment.size
|   | image       | target.cover | model   | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|---+-------------+--------------+---------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
| 1 | madisonNAIP | all          | rf_prob | Pixel      | 1.00         |             | 0.21          | 0.52                          | 0.24                               | 0.16                         |


|    | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|----+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
|  1 | madisonNAIP | all          | rf_prob  | Pixel      |         1.00 |             |          0.22 |                          0.52 |                               0.22 |                         0.19 |
|  2 | madisonNAIP | all          | svm_resp | Pixel      |         1.00 |             |          0.23 |                          0.57 |                               0.14 |                         0.30 |
|  3 | madisonNAIP | all          | rf_prob  | N-30_C-18  |        30.00 |       18.00 |          0.24 |                          0.46 |                               0.32 |                         0.24 |
|  4 | madisonNAIP | all          | rf_prob  | N-45_C-22  |        45.00 |       22.00 |          0.24 |                          0.46 |                               0.30 |                         0.24 |
|  5 | madisonNAIP | all          | rf_prob  | N-100_C-50 |       100.00 |       50.00 |          0.24 |                          0.41 |                               0.30 |                         0.29 |
|  6 | madisonNAIP | all          | rf_prob  | N-20_C-6   |        20.00 |        6.00 |          0.24 |                          0.53 |                               0.40 |                         0.25 |
|  7 | madisonNAIP | all          | rf_prob  | N-20_C-12  |        20.00 |       12.00 |          0.24 |                          0.52 |                               0.36 |                         0.23 |
|  8 | madisonNAIP | all          | rf_prob  | N-100_C-60 |       100.00 |       60.00 |          0.26 |                          0.41 |                               0.28 |                         0.32 |
|  9 | madisonNAIP | all          | rf_prob  | N-30_C-15  |        30.00 |       15.00 |          0.28 |                          0.46 |                               0.33 |                         0.26 |
| 10 | madisonNAIP | all          | svm_resp | N-45_C-14  |        45.00 |       14.00 |          0.28 |                          0.55 |                               0.26 |                         0.33 |
| 11 | madisonNAIP | all          | svm_resp | N-30_C-18  |        30.00 |       18.00 |          0.28 |                          0.57 |                               0.39 |                         0.22 |
| 12 | madisonNAIP | all          | rf_prob  | N-30_C-9   |        30.00 |        9.00 |          0.28 |                          0.48 |                               0.33 |                         0.28 |
| 13 | madisonNAIP | all          | svm_resp | N-20_C-6   |        20.00 |        6.00 |          0.28 |                          0.62 |                               0.51 |                         0.23 |
| 14 | madisonNAIP | all          | svm_resp | N-100_C-50 |       100.00 |       50.00 |          0.29 |                          0.54 |                               0.30 |                         0.29 |
| 15 | madisonNAIP | all          | rf_prob  | N-20_C-10  |        20.00 |       10.00 |          0.29 |                          0.52 |                               0.33 |                         0.25 |
| 16 | madisonNAIP | all          | svm_resp | N-30_C-9   |        30.00 |        9.00 |          0.29 |                          0.60 |                               0.36 |                         0.27 |
| 17 | madisonNAIP | all          | svm_resp | N-30_C-15  |        30.00 |       15.00 |          0.29 |                          0.59 |                               0.40 |                         0.23 |
| 18 | madisonNAIP | all          | svm_resp | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
| 19 | madisonNAIP | all          | rf_prob  | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.45 |                               0.32 |                         0.28 |
| 20 | madisonNAIP | all          | rf_prob  | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.49 |                               0.33 |                         0.26 |
| 21 | madisonNAIP | all          | svm_resp | N-45_C-27  |        45.00 |       27.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
| 22 | madisonNAIP | all          | svm_resp | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.54 |                               0.34 |                         0.28 |
| 23 | madisonNAIP | all          | rf_prob  | N-60_C-18  |        60.00 |       18.00 |          0.30 |                          0.48 |                               0.29 |                         0.31 |
| 24 | madisonNAIP | all          | svm_resp | N-100_C-60 |       100.00 |       60.00 |          0.30 |                          0.54 |                               0.31 |                         0.31 |
| 25 | madisonNAIP | all          | rf_prob  | N-45_C-14  |        45.00 |       14.00 |          0.30 |                          0.45 |                               0.35 |                         0.30 |
| 26 | madisonNAIP | all          | rf_prob  | N-45_C-27  |        45.00 |       27.00 |          0.31 |                          0.46 |                               0.36 |                         0.27 |
| 27 | madisonNAIP | all          | svm_resp | N-60_C-18  |        60.00 |       18.00 |          0.31 |                          0.56 |                               0.28 |                         0.38 |
| 28 | madisonNAIP | all          | svm_resp | N-45_C-22  |        45.00 |       22.00 |          0.32 |                          0.54 |                               0.37 |                         0.29 |
| 29 | madisonNAIP | all          | svm_resp | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.54 |                               0.35 |                         0.31 |
| 30 | madisonNAIP | all          | svm_resp | N-20_C-12  |        20.00 |       12.00 |          0.33 |                          0.60 |                               0.60 |                         0.17 |
| 31 | madisonNAIP | all          | rf_prob  | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.50 |                               0.35 |                         0.30 |
| 32 | madisonNAIP | all          | svm_resp | N-20_C-10  |        20.00 |       10.00 |          0.33 |                          0.62 |                               0.59 |                         0.17 |


|   | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|---+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
| 1 | madisonNAIP | all          | svm_resp | Pixel      | 1.00         |             | 0.26          | 0.39                          | 0.52                               | 0.10                         |
| 2 | madisonNAIP | all          | rf_prob  | Pixel      | 1.00         |             | 0.27          | 0.53                          | 0.53                               | 0.10                         |
| 3 | madisonNAIP | all          | svm_resp | N-30_C-15  | 30.00        | 15.00       | 0.83          | 0.80                          | 0.05                               | 1.00                         |
| 4 | madisonNAIP | all          | rf_prob  | N-30_C-15  | 30.00        | 15.00       | 0.84          | 0.67                          | 0.12                               | 1.00                         |
| 5 | madisonNAIP | all          | rf_prob  | N-100_C-50 | 100.00       | 50.00       | 0.84          | 0.66                          | 0.43                               | 1.00                         |
| 6 | madisonNAIP | all          | svm_resp | N-100_C-50 | 100.00       | 50.00       | 0.85          | 0.85                          | 0.01                               | 1.00                         |

***** Table showing performace of classifiers, average over all grids, decreasing accuracy
#+begin_src R :results raw
      options(warn = -1)
        error.df.avg.class %>%
            arrange(desc(overall.error)) %>%
            ascii
      options(warn = 1)
#+end_src

#+results:
 |   | image       | target.cover | model   | seg.params | segment.size | compactness | tuned   | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
 |---+-------------+--------------+---------+------------+--------------+-------------+---------+---------------+-------------------------------+------------------------------------+------------------------------|
 | 1 | madisonNAIP | all          | rf_prob | Pixel      |         1.00 |             | Untuned |          0.21 |                          0.52 |                               0.24 |                         0.16 |



 |    | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
 |----+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
 |  1 | madisonNAIP | all          | svm_resp | N-20_C-10  |        20.00 |       10.00 |          0.33 |                          0.62 |                               0.59 |                         0.17 |
 |  2 | madisonNAIP | all          | rf_prob  | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.50 |                               0.35 |                         0.30 |
 |  3 | madisonNAIP | all          | svm_resp | N-20_C-12  |        20.00 |       12.00 |          0.33 |                          0.60 |                               0.60 |                         0.17 |
 |  4 | madisonNAIP | all          | svm_resp | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.54 |                               0.35 |                         0.31 |
 |  5 | madisonNAIP | all          | svm_resp | N-45_C-22  |        45.00 |       22.00 |          0.32 |                          0.54 |                               0.37 |                         0.29 |
 |  6 | madisonNAIP | all          | svm_resp | N-60_C-18  |        60.00 |       18.00 |          0.31 |                          0.56 |                               0.28 |                         0.38 |
 |  7 | madisonNAIP | all          | rf_prob  | N-45_C-27  |        45.00 |       27.00 |          0.31 |                          0.46 |                               0.36 |                         0.27 |
 |  8 | madisonNAIP | all          | rf_prob  | N-45_C-14  |        45.00 |       14.00 |          0.30 |                          0.45 |                               0.35 |                         0.30 |
 |  9 | madisonNAIP | all          | svm_resp | N-100_C-60 |       100.00 |       60.00 |          0.30 |                          0.54 |                               0.31 |                         0.31 |
 | 10 | madisonNAIP | all          | rf_prob  | N-60_C-18  |        60.00 |       18.00 |          0.30 |                          0.48 |                               0.29 |                         0.31 |
 | 11 | madisonNAIP | all          | svm_resp | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.54 |                               0.34 |                         0.28 |
 | 12 | madisonNAIP | all          | svm_resp | N-45_C-27  |        45.00 |       27.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
 | 13 | madisonNAIP | all          | rf_prob  | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.49 |                               0.33 |                         0.26 |
 | 14 | madisonNAIP | all          | rf_prob  | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.45 |                               0.32 |                         0.28 |
 | 15 | madisonNAIP | all          | svm_resp | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
 | 16 | madisonNAIP | all          | svm_resp | N-30_C-15  |        30.00 |       15.00 |          0.29 |                          0.59 |                               0.40 |                         0.23 |
 | 17 | madisonNAIP | all          | svm_resp | N-30_C-9   |        30.00 |        9.00 |          0.29 |                          0.60 |                               0.36 |                         0.27 |
 | 18 | madisonNAIP | all          | rf_prob  | N-20_C-10  |        20.00 |       10.00 |          0.29 |                          0.52 |                               0.33 |                         0.25 |
 | 19 | madisonNAIP | all          | svm_resp | N-100_C-50 |       100.00 |       50.00 |          0.29 |                          0.54 |                               0.30 |                         0.29 |
 | 20 | madisonNAIP | all          | svm_resp | N-20_C-6   |        20.00 |        6.00 |          0.28 |                          0.62 |                               0.51 |                         0.23 |
 | 21 | madisonNAIP | all          | rf_prob  | N-30_C-9   |        30.00 |        9.00 |          0.28 |                          0.48 |                               0.33 |                         0.28 |
 | 22 | madisonNAIP | all          | svm_resp | N-30_C-18  |        30.00 |       18.00 |          0.28 |                          0.57 |                               0.39 |                         0.22 |
 | 23 | madisonNAIP | all          | svm_resp | N-45_C-14  |        45.00 |       14.00 |          0.28 |                          0.55 |                               0.26 |                         0.33 |
 | 24 | madisonNAIP | all          | rf_prob  | N-30_C-15  |        30.00 |       15.00 |          0.28 |                          0.46 |                               0.33 |                         0.26 |
 | 25 | madisonNAIP | all          | rf_prob  | N-100_C-60 |       100.00 |       60.00 |          0.26 |                          0.41 |                               0.28 |                         0.32 |
 | 26 | madisonNAIP | all          | rf_prob  | N-20_C-12  |        20.00 |       12.00 |          0.24 |                          0.52 |                               0.36 |                         0.23 |
 | 27 | madisonNAIP | all          | rf_prob  | N-20_C-6   |        20.00 |        6.00 |          0.24 |                          0.53 |                               0.40 |                         0.25 |
 | 28 | madisonNAIP | all          | rf_prob  | N-100_C-50 |       100.00 |       50.00 |          0.24 |                          0.41 |                               0.30 |                         0.29 |
 | 29 | madisonNAIP | all          | rf_prob  | N-45_C-22  |        45.00 |       22.00 |          0.24 |                          0.46 |                               0.30 |                         0.24 |
 | 30 | madisonNAIP | all          | rf_prob  | N-30_C-18  |        30.00 |       18.00 |          0.24 |                          0.46 |                               0.32 |                         0.24 |
 | 31 | madisonNAIP | all          | svm_resp | Pixel      |         1.00 |             |          0.23 |                          0.57 |                               0.14 |                         0.30 |
 | 32 | madisonNAIP | all          | rf_prob  | Pixel      |         1.00 |             |          0.22 |                          0.52 |                               0.22 |                         0.19 |

***** Plots of 20 *best* classified grids by *best* classifier with points superimposed
#+begin_src R :results raw
  best.classif.overall <- error.df.avg.class %>%
      arrange(overall.error) %>%
      slice(1) %>%
      data.frame()

  best.classif.best.grids <- best.classif.overall %>%
      select(image, target.cover, model, seg.params) %>%
      left_join(., error.df) %>%
      arrange(overall.error) %>%
      select(overall.error, grid,image, target.cover, model, seg.params) %>%
      mutate(path = paste0(dd.accuracy.classified.dir,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif"))

      options(warn = -1)

            best.classif.best.grids %>%
            ascii

      options(warn = 1)

#+end_src

#+results:
 Joining, by = c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                                 |
|----+---------------+-------------+-------------+--------------+---------+------------+------------------------------------------------------------------------------------------------------|
| 1  | 0.00          | mad.50m.2   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 2  | 0.02          | mad.100m.12 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 3  | 0.04          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 4  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 5  | 0.05          | mad.150m.9  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 6  | 0.05          | mad.100m.13 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 7  | 0.06          | mad.100m.27 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 8  | 0.06          | mad.200m.2  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 9  | 0.07          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 10 | 0.08          | mad.150m.5  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 11 | 0.08          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.09          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.09          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.09          | mad.100m.4  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.14          | mad.200m.4  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 16 | 0.16          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 17 | 0.16          | mad.100m.8  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.18          | mad.100m.14 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 19 | 0.18          | mad.200m.1  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 20 | 0.18          | mad.100m.30 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 21 | 0.19          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 22 | 0.20          | mad.100m.5  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 23 | 0.21          | mad.100m.18 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 24 | 0.22          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 25 | 0.22          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 26 | 0.24          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 27 | 0.24          | mad.150m.7  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 28 | 0.25          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.25          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 30 | 0.26          | mad.150m.1  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 31 | 0.26          | mad.150m.4  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 32 | 0.27          | mad.150m.2  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 33 | 0.27          | mad.100m.17 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 34 | 0.27          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 35 | 0.27          | mad.50m.1   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 36 | 0.28          | mad.100m.16 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 37 | 0.29          | mad.150m.10 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 38 | 0.29          | mad.100m.20 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 39 | 0.30          | mad.200m.3  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 40 | 0.30          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.31          | mad.100m.24 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 42 | 0.31          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 43 | 0.32          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 44 | 0.35          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 45 | 0.35          | mad.50m.3   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 46 | 0.38          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-60_C-36_madisonNAIP_all_rf_prob.tif |
 Joining, by = c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                                |
|----+---------------+-------------+-------------+--------------+---------+------------+-----------------------------------------------------------------------------------------------------|
| 1  | 0.03          | mad.50m.2   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 2  | 0.03          | mad.100m.12 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 3  | 0.03          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 4  | 0.04          | mad.150m.9  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 5  | 0.04          | mad.100m.13 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 6  | 0.04          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 7  | 0.07          | mad.150m.5  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 8  | 0.07          | mad.200m.2  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 9  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 10 | 0.08          | mad.100m.27 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 11 | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.09          | mad.100m.4  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.09          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 14 | 0.11          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.13          | mad.200m.4  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 16 | 0.15          | mad.200m.1  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.16          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 18 | 0.19          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 19 | 0.19          | mad.100m.8  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 20 | 0.20          | mad.100m.30 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 21 | 0.21          | mad.100m.14 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 22 | 0.21          | mad.100m.5  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 23 | 0.22          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 24 | 0.23          | mad.100m.18 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 25 | 0.23          | mad.100m.17 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 26 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 27 | 0.24          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 28 | 0.25          | mad.150m.7  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.26          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 30 | 0.26          | mad.150m.4  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 31 | 0.27          | mad.150m.1  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 32 | 0.27          | mad.100m.16 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 33 | 0.27          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 34 | 0.28          | mad.150m.10 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 35 | 0.28          | mad.100m.24 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 36 | 0.28          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 37 | 0.29          | mad.150m.2  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 38 | 0.29          | mad.100m.20 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 39 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 40 | 0.30          | mad.200m.3  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.30          | mad.50m.1   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 42 | 0.31          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 43 | 0.31          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 44 | 0.32          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 45 | 0.34          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 46 | 0.37          | mad.50m.3   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
 Joining, by = c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                                |
|----+---------------+-------------+-------------+--------------+---------+------------+-----------------------------------------------------------------------------------------------------|
| 1  | 0.03          | mad.50m.2   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 2  | 0.03          | mad.100m.12 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 3  | 0.03          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 4  | 0.04          | mad.150m.9  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 5  | 0.04          | mad.100m.13 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 6  | 0.04          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 7  | 0.07          | mad.150m.5  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 8  | 0.07          | mad.200m.2  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 9  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 10 | 0.08          | mad.100m.27 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 11 | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.09          | mad.100m.4  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.09          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 14 | 0.11          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.13          | mad.200m.4  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 16 | 0.15          | mad.200m.1  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.16          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 18 | 0.19          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 19 | 0.19          | mad.100m.8  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 20 | 0.20          | mad.100m.30 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 21 | 0.21          | mad.100m.14 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 22 | 0.21          | mad.100m.5  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 23 | 0.22          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 24 | 0.23          | mad.100m.18 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 25 | 0.23          | mad.100m.17 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 26 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 27 | 0.24          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 28 | 0.25          | mad.150m.7  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.26          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 30 | 0.26          | mad.150m.4  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 31 | 0.27          | mad.150m.1  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 32 | 0.27          | mad.100m.16 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 33 | 0.27          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 34 | 0.28          | mad.150m.10 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 35 | 0.28          | mad.100m.24 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 36 | 0.28          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 37 | 0.29          | mad.150m.2  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 38 | 0.29          | mad.100m.20 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 39 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 40 | 0.30          | mad.200m.3  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.30          | mad.50m.1   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
| 42 | 0.31          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 43 | 0.31          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 44 | 0.32          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-15_C-8_madisonNAIP_all_rf_prob.tif  |
| 45 | 0.34          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-15_C-8_madisonNAIP_all_rf_prob.tif |
| 46 | 0.37          | mad.50m.3   | madisonNAIP | all          | rf_prob | N-15_C-8   | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-15_C-8_madisonNAIP_all_rf_prob.tif   |
 Joining, by = c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                                 |
|----+---------------+-------------+-------------+--------------+---------+------------+------------------------------------------------------------------------------------------------------|
| 1  | 0.00          | mad.50m.2   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 2  | 0.02          | mad.100m.12 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 3  | 0.04          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 4  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 5  | 0.05          | mad.150m.9  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 6  | 0.05          | mad.100m.13 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 7  | 0.06          | mad.100m.27 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 8  | 0.06          | mad.200m.2  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 9  | 0.07          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 10 | 0.08          | mad.150m.5  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 11 | 0.08          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.09          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.09          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.09          | mad.100m.4  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.14          | mad.200m.4  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 16 | 0.16          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 17 | 0.16          | mad.100m.8  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.18          | mad.100m.14 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 19 | 0.18          | mad.200m.1  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 20 | 0.18          | mad.100m.30 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 21 | 0.19          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 22 | 0.20          | mad.100m.5  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 23 | 0.21          | mad.100m.18 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 24 | 0.22          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 25 | 0.22          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 26 | 0.24          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 27 | 0.24          | mad.150m.7  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 28 | 0.25          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.25          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 30 | 0.26          | mad.150m.1  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 31 | 0.26          | mad.150m.4  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 32 | 0.27          | mad.150m.2  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 33 | 0.27          | mad.100m.17 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 34 | 0.27          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 35 | 0.27          | mad.50m.1   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 36 | 0.28          | mad.100m.16 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 37 | 0.29          | mad.150m.10 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 38 | 0.29          | mad.100m.20 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 39 | 0.30          | mad.200m.3  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 40 | 0.30          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.31          | mad.100m.24 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 42 | 0.31          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-60_C-36_madisonNAIP_all_rf_prob.tif |
| 43 | 0.32          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 44 | 0.35          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-60_C-36_madisonNAIP_all_rf_prob.tif  |
| 45 | 0.35          | mad.50m.3   | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 46 | 0.38          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-60_C-36  | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-60_C-36_madisonNAIP_all_rf_prob.tif |
 Joining, by = c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                             |
|----+---------------+-------------+-------------+--------------+---------+------------+--------------------------------------------------------------------------------------------------|
| 1  | 0.04          | mad.50m.2   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_Pixel_madisonNAIP_all_rf_prob.tif   |
| 2  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_Pixel_madisonNAIP_all_rf_prob.tif |
| 3  | 0.04          | mad.100m.12 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_Pixel_madisonNAIP_all_rf_prob.tif |
| 4  | 0.05          | mad.150m.9  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_Pixel_madisonNAIP_all_rf_prob.tif  |
| 5  | 0.05          | mad.50m.5   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_Pixel_madisonNAIP_all_rf_prob.tif   |
| 6  | 0.08          | mad.150m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 7  | 0.08          | mad.100m.13 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_Pixel_madisonNAIP_all_rf_prob.tif |
| 8  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 9  | 0.08          | mad.100m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 10 | 0.12          | mad.100m.27 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_Pixel_madisonNAIP_all_rf_prob.tif |
| 11 | 0.13          | mad.100m.28 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_Pixel_madisonNAIP_all_rf_prob.tif |
| 12 | 0.14          | mad.100m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.15          | mad.200m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.16          | mad.100m.21 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_Pixel_madisonNAIP_all_rf_prob.tif |
| 15 | 0.16          | mad.200m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 16 | 0.17          | mad.200m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.17          | mad.100m.14 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_Pixel_madisonNAIP_all_rf_prob.tif |
| 18 | 0.21          | mad.100m.11 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_Pixel_madisonNAIP_all_rf_prob.tif |
| 19 | 0.21          | mad.100m.30 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_Pixel_madisonNAIP_all_rf_prob.tif |
| 20 | 0.21          | mad.100m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 21 | 0.22          | mad.100m.8  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_Pixel_madisonNAIP_all_rf_prob.tif  |
| 22 | 0.22          | mad.100m.18 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_Pixel_madisonNAIP_all_rf_prob.tif |
| 23 | 0.22          | mad.200m.2  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_Pixel_madisonNAIP_all_rf_prob.tif  |
| 24 | 0.23          | mad.50m.4   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_Pixel_madisonNAIP_all_rf_prob.tif   |
| 25 | 0.24          | mad.150m.2  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_Pixel_madisonNAIP_all_rf_prob.tif  |
| 26 | 0.24          | mad.150m.6  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_Pixel_madisonNAIP_all_rf_prob.tif  |
| 27 | 0.25          | mad.100m.24 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_Pixel_madisonNAIP_all_rf_prob.tif |
| 28 | 0.25          | mad.150m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.25          | mad.150m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 30 | 0.26          | mad.100m.19 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_Pixel_madisonNAIP_all_rf_prob.tif |
| 31 | 0.28          | mad.100m.20 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_Pixel_madisonNAIP_all_rf_prob.tif |
| 32 | 0.28          | mad.150m.10 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_Pixel_madisonNAIP_all_rf_prob.tif |
| 33 | 0.28          | mad.100m.7  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_Pixel_madisonNAIP_all_rf_prob.tif  |
| 34 | 0.29          | mad.50m.1   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_Pixel_madisonNAIP_all_rf_prob.tif   |
| 35 | 0.29          | mad.200m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 36 | 0.30          | mad.100m.29 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_Pixel_madisonNAIP_all_rf_prob.tif |
| 37 | 0.30          | mad.150m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 38 | 0.30          | mad.150m.7  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_Pixel_madisonNAIP_all_rf_prob.tif  |
| 39 | 0.31          | mad.100m.17 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_Pixel_madisonNAIP_all_rf_prob.tif |
| 40 | 0.31          | mad.100m.6  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_Pixel_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.32          | mad.100m.10 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_Pixel_madisonNAIP_all_rf_prob.tif |
| 42 | 0.32          | mad.100m.16 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_Pixel_madisonNAIP_all_rf_prob.tif |
| 43 | 0.32          | mad.100m.9  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_Pixel_madisonNAIP_all_rf_prob.tif  |
| 44 | 0.37          | mad.50m.3   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_Pixel_madisonNAIP_all_rf_prob.tif   |
| 45 | 0.38          | mad.150m.8  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_Pixel_madisonNAIP_all_rf_prob.tif  |
| 46 | 0.39          | mad.100m.22 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_Pixel_madisonNAIP_all_rf_prob.tif |
 Joining by: c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                             |
|----+---------------+-------------+-------------+--------------+---------+------------+--------------------------------------------------------------------------------------------------|
| 1  | 0.02          | mad.150m.9  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_Pixel_madisonNAIP_all_rf_prob.tif  |
| 2  | 0.04          | mad.50m.2   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_Pixel_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_Pixel_madisonNAIP_all_rf_prob.tif |
| 4  | 0.06          | mad.100m.12 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_Pixel_madisonNAIP_all_rf_prob.tif |
| 5  | 0.06          | mad.50m.5   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_Pixel_madisonNAIP_all_rf_prob.tif   |
| 6  | 0.07          | mad.100m.28 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_Pixel_madisonNAIP_all_rf_prob.tif |
| 7  | 0.08          | mad.100m.13 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_Pixel_madisonNAIP_all_rf_prob.tif |
| 8  | 0.08          | mad.150m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 9  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 10 | 0.09          | mad.100m.27 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_Pixel_madisonNAIP_all_rf_prob.tif |
| 11 | 0.09          | mad.100m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.12          | mad.200m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.15          | mad.200m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.17          | mad.100m.21 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_Pixel_madisonNAIP_all_rf_prob.tif |
| 15 | 0.18          | mad.200m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 16 | 0.19          | mad.100m.11 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_Pixel_madisonNAIP_all_rf_prob.tif |
| 17 | 0.20          | mad.100m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.21          | mad.100m.8  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_Pixel_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.22          | mad.100m.30 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_Pixel_madisonNAIP_all_rf_prob.tif |
| 20 | 0.22          | mad.100m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 21 | 0.22          | mad.150m.7  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_Pixel_madisonNAIP_all_rf_prob.tif  |
| 22 | 0.23          | mad.100m.18 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_Pixel_madisonNAIP_all_rf_prob.tif |
| 23 | 0.23          | mad.100m.19 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_Pixel_madisonNAIP_all_rf_prob.tif |
| 24 | 0.23          | mad.150m.2  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_Pixel_madisonNAIP_all_rf_prob.tif  |
| 25 | 0.24          | mad.150m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 26 | 0.24          | mad.50m.1   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_Pixel_madisonNAIP_all_rf_prob.tif   |
| 27 | 0.24          | mad.50m.4   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_Pixel_madisonNAIP_all_rf_prob.tif   |
| 28 | 0.24          | mad.150m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.25          | mad.100m.14 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_Pixel_madisonNAIP_all_rf_prob.tif |
| 30 | 0.25          | mad.100m.20 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_Pixel_madisonNAIP_all_rf_prob.tif |
| 31 | 0.25          | mad.100m.7  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_Pixel_madisonNAIP_all_rf_prob.tif  |
| 32 | 0.26          | mad.200m.2  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_Pixel_madisonNAIP_all_rf_prob.tif  |
| 33 | 0.26          | mad.150m.6  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_Pixel_madisonNAIP_all_rf_prob.tif  |
| 34 | 0.27          | mad.100m.24 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_Pixel_madisonNAIP_all_rf_prob.tif |
| 35 | 0.28          | mad.100m.17 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_Pixel_madisonNAIP_all_rf_prob.tif |
| 36 | 0.28          | mad.100m.16 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_Pixel_madisonNAIP_all_rf_prob.tif |
| 37 | 0.28          | mad.100m.6  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_Pixel_madisonNAIP_all_rf_prob.tif  |
| 38 | 0.29          | mad.100m.29 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_Pixel_madisonNAIP_all_rf_prob.tif |
| 39 | 0.29          | mad.150m.10 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_Pixel_madisonNAIP_all_rf_prob.tif |
| 40 | 0.30          | mad.100m.9  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_Pixel_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.31          | mad.100m.10 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_Pixel_madisonNAIP_all_rf_prob.tif |
| 42 | 0.32          | mad.200m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 43 | 0.33          | mad.150m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 44 | 0.35          | mad.50m.3   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_Pixel_madisonNAIP_all_rf_prob.tif   |
| 45 | 0.37          | mad.100m.22 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_Pixel_madisonNAIP_all_rf_prob.tif |
| 46 | 0.40          | mad.150m.8  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_Pixel_madisonNAIP_all_rf_prob.tif  |
 Joining by: c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                             |
|----+---------------+-------------+-------------+--------------+---------+------------+--------------------------------------------------------------------------------------------------|
| 1  | 0.02          | mad.150m.9  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_Pixel_madisonNAIP_all_rf_prob.tif  |
| 2  | 0.04          | mad.50m.2   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_Pixel_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_Pixel_madisonNAIP_all_rf_prob.tif |
| 4  | 0.06          | mad.100m.12 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_Pixel_madisonNAIP_all_rf_prob.tif |
| 5  | 0.06          | mad.50m.5   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_Pixel_madisonNAIP_all_rf_prob.tif   |
| 6  | 0.07          | mad.100m.28 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_Pixel_madisonNAIP_all_rf_prob.tif |
| 7  | 0.08          | mad.100m.13 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_Pixel_madisonNAIP_all_rf_prob.tif |
| 8  | 0.08          | mad.150m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 9  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 10 | 0.09          | mad.100m.27 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_Pixel_madisonNAIP_all_rf_prob.tif |
| 11 | 0.09          | mad.100m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.12          | mad.200m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.15          | mad.200m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.17          | mad.100m.21 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_Pixel_madisonNAIP_all_rf_prob.tif |
| 15 | 0.18          | mad.200m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 16 | 0.19          | mad.100m.11 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_Pixel_madisonNAIP_all_rf_prob.tif |
| 17 | 0.20          | mad.100m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.21          | mad.100m.8  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_Pixel_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.22          | mad.100m.30 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_Pixel_madisonNAIP_all_rf_prob.tif |
| 20 | 0.22          | mad.100m.5  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_Pixel_madisonNAIP_all_rf_prob.tif  |
| 21 | 0.22          | mad.150m.7  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_Pixel_madisonNAIP_all_rf_prob.tif  |
| 22 | 0.23          | mad.100m.18 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_Pixel_madisonNAIP_all_rf_prob.tif |
| 23 | 0.23          | mad.100m.19 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_Pixel_madisonNAIP_all_rf_prob.tif |
| 24 | 0.23          | mad.150m.2  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_Pixel_madisonNAIP_all_rf_prob.tif  |
| 25 | 0.24          | mad.150m.4  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_Pixel_madisonNAIP_all_rf_prob.tif  |
| 26 | 0.24          | mad.50m.1   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_Pixel_madisonNAIP_all_rf_prob.tif   |
| 27 | 0.24          | mad.50m.4   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_Pixel_madisonNAIP_all_rf_prob.tif   |
| 28 | 0.24          | mad.150m.1  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_Pixel_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.25          | mad.100m.14 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_Pixel_madisonNAIP_all_rf_prob.tif |
| 30 | 0.25          | mad.100m.20 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_Pixel_madisonNAIP_all_rf_prob.tif |
| 31 | 0.25          | mad.100m.7  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_Pixel_madisonNAIP_all_rf_prob.tif  |
| 32 | 0.26          | mad.200m.2  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_Pixel_madisonNAIP_all_rf_prob.tif  |
| 33 | 0.26          | mad.150m.6  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_Pixel_madisonNAIP_all_rf_prob.tif  |
| 34 | 0.27          | mad.100m.24 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_Pixel_madisonNAIP_all_rf_prob.tif |
| 35 | 0.28          | mad.100m.17 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_Pixel_madisonNAIP_all_rf_prob.tif |
| 36 | 0.28          | mad.100m.16 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_Pixel_madisonNAIP_all_rf_prob.tif |
| 37 | 0.28          | mad.100m.6  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_Pixel_madisonNAIP_all_rf_prob.tif  |
| 38 | 0.29          | mad.100m.29 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_Pixel_madisonNAIP_all_rf_prob.tif |
| 39 | 0.29          | mad.150m.10 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_Pixel_madisonNAIP_all_rf_prob.tif |
| 40 | 0.30          | mad.100m.9  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_Pixel_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.31          | mad.100m.10 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_Pixel_madisonNAIP_all_rf_prob.tif |
| 42 | 0.32          | mad.200m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 43 | 0.33          | mad.150m.3  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_Pixel_madisonNAIP_all_rf_prob.tif  |
| 44 | 0.35          | mad.50m.3   | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_Pixel_madisonNAIP_all_rf_prob.tif   |
| 45 | 0.37          | mad.100m.22 | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_Pixel_madisonNAIP_all_rf_prob.tif |
| 46 | 0.40          | mad.150m.8  | madisonNAIP | all          | rf_prob | Pixel      | ../DD/madison_Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_Pixel_madisonNAIP_all_rf_prob.tif  |
 Joining by: c("image", "target.cover", "model", "seg.params")
Error: object 'ClassifiedTilesDirName' not found
 Error in eval(expr, envir, enclos) :
  object 'best.classif.best.grids' not found
 Joining by: c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                         |
|----+---------------+-------------+-------------+--------------+---------+------------+----------------------------------------------------------------------------------------------|
| 1  | 0.02          | mad.100m.12 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 2  | 0.03          | mad.50m.2   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.04          | mad.150m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 4  | 0.05          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 5  | 0.05          | mad.100m.13 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 6  | 0.07          | mad.200m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 7  | 0.07          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 8  | 0.08          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 9  | 0.08          | mad.100m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 10 | 0.08          | mad.100m.27 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 11 | 0.08          | mad.150m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.10          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.11          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.14          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 16 | 0.14          | mad.200m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.16          | mad.200m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.17          | mad.100m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.18          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 20 | 0.18          | mad.100m.14 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 21 | 0.19          | mad.100m.30 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 22 | 0.20          | mad.100m.18 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 23 | 0.21          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 24 | 0.22          | mad.100m.17 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 25 | 0.22          | mad.100m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 26 | 0.23          | mad.50m.1   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 27 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 28 | 0.24          | mad.150m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.24          | mad.150m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 30 | 0.25          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 31 | 0.26          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 32 | 0.26          | mad.150m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 33 | 0.26          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 34 | 0.27          | mad.150m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 35 | 0.27          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 36 | 0.27          | mad.100m.24 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 37 | 0.28          | mad.100m.16 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 38 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 39 | 0.29          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 40 | 0.29          | mad.150m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.30          | mad.200m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 42 | 0.30          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 43 | 0.31          | mad.100m.20 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 44 | 0.34          | mad.50m.3   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 45 | 0.34          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 46 | 0.35          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-20_C-12_madisonNAIP_all_rf_prob.tif |

 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                         |
|----+---------------+-------------+-------------+--------------+---------+------------+----------------------------------------------------------------------------------------------|
| 1  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 2  | 0.07          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.08          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 4  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 5  | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 6  | 0.12          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 7  | 0.14          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 8  | 0.17          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 9  | 0.21          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 10 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 11 | 0.25          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 12 | 0.26          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 13 | 0.26          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.27          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.28          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 16 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.30          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.34          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.35          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 20 |               | mad.100m.12 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 21 |               | mad.100m.13 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 22 |               | mad.100m.14 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 23 |               | mad.100m.16 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 24 |               | mad.100m.17 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 25 |               | mad.100m.18 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 26 |               | mad.100m.20 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 27 |               | mad.100m.24 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 28 |               | mad.100m.27 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 29 |               | mad.100m.30 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 30 |               | mad.100m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 31 |               | mad.100m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 32 |               | mad.100m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 33 |               | mad.150m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 34 |               | mad.150m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 35 |               | mad.150m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 36 |               | mad.150m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 37 |               | mad.150m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 38 |               | mad.150m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 39 |               | mad.150m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 40 |               | mad.200m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 41 |               | mad.200m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 42 |               | mad.200m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 43 |               | mad.200m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 44 |               | mad.50m.1   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 45 |               | mad.50m.2   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 46 |               | mad.50m.3   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
 Joining by: c("image", "target.cover", "model", "seg.params")
Error in options(., warn = -1) : invalid argument
 Warning in rep(rownames, length = nrow(x)) :
  'x' is NULL so the result will be NULL
Warning in rep(colnames, length = ncol(x)) :
  'x' is NULL so the result will be NULL
|    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                         |
|----+---------------+-------------+-------------+--------------+---------+------------+----------------------------------------------------------------------------------------------|
| 1  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 2  | 0.07          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.08          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 4  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 5  | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 6  | 0.12          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 7  | 0.14          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 8  | 0.17          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 9  | 0.21          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 10 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 11 | 0.25          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 12 | 0.26          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 13 | 0.26          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.27          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.28          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 16 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.30          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.34          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.35          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 20 |               | mad.100m.12 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-20_C-12_madisonNAIP_all_rf_prob.tif |


#+begin_src R

best.classif.best.grids <- best.classif.best.grids %>%  head(n=20)


  lapply(1:nrow(best.classif.best.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = best.classif.best.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = best.classif.best.grids$path[i],
                                           fig.dir = "figs/bestclassif.bestgrids",
                                           target = "a")
  })



  ## plts <- lapply(best.classif.best.grids$path, function(path) {
  ##     grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##     points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##     points@data <- points@data %>%
  ##         mutate(x = coordinates(points)[,1],
  ##                y = coordinates(points)[,2])
  ##     ras <- raster(path)
  ##     pts.on.classified.tile.plot(fig.dir = "figs/bestclassif.bestgrids",points, ras, target = "a")
  ## })


#+end_src

#+results:
#+begin_example
 Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
Warning in dir.create(fig.dir) :
  'figs/bestclassif.bestgrids' already exists
[[1]]
null device
          1

[[2]]
null device
          1

[[3]]
null device
          1

[[4]]
null device
          1

[[5]]
null device
          1

[[6]]
null device
          1

[[7]]
null device
          1

[[8]]
null device
          1

[[9]]
null device
          1

[[10]]
null device
          1

[[11]]
null device
          1

[[12]]
null device
          1

[[13]]
null device
          1

[[14]]
null device
          1

[[15]]
null device
          1

[[16]]
null device
          1

[[17]]
null device
          1

[[18]]
null device
          1

[[19]]
null device
          1

[[20]]
null device
          1
#+end_example

***** Plots of 20 *worst* classified grids by *best* classifier with points superimposed
#+begin_src R :results none
      best.classif.overall <- error.df.avg.class %>%
        arrange(overall.error) %>%
          slice(1) %>%
        data.frame()

  best.classif.worst.grids <- best.classif.overall %>%
    select(image, target.cover, model, seg.params) %>%
      left_join(., error.df) %>%
      arrange(desc(overall.error)) %>%
      select(overall.error, grid,image, target.cover, model, seg.params) %>%
      mutate(path = paste0(dd.accuracy.classified.dir,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif")) %>%
      head(n=20)


  lapply(1:nrow(best.classif.worst.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = best.classif.worst.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = best.classif.worst.grids$path[i],
                                           fig.dir = "figs/bestclassif.worstgrids",
                                           target = "a")
  })

  ## plts <- lapply(best.classif.worst.grids$path, function(path) {
  ##   grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##   points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##   points@data <- points@data %>%
  ##       mutate(x = coordinates(points)[,1],
  ##              y = coordinates(points)[,2])
  ##   ras <- raster(path)
  ##   pts.on.classified.tile.plot(fig.dir = "figs/bestclassif.worstgrids",points, ras, target = "a")
  ## })


#+end_src

***** Plots showing how image, segment size, compactness, and model affect accuracy

****** plot 1
#+begin_src R :exports results :results graphics :file ./figs/gridAcc.p1.png
ggplot(error.df, aes(y = overall.error, x = segment.size, color = compactness, group = model)) + geom_point() + facet_grid(model~image)
#+end_src

#+results:
[[file:./figs/gridAcc.p1.png]]

****** plot 2
#+begin_src R :exports results :results graphics :file ./figs/gridAcc.p2.png :height 800 :width 1000
ggplot(error.df, aes(y = overall.error, x = segment.size, color = compactness/segment.size, group = model)) + geom_jitter() + facet_grid(model~image)
#+end_src

#+results:
[[file:./figs/gridAcc.p2.png]]

****** plot 3
#+begin_src R :exports results :results graphics :file ./figs/grid_pointwise_avgacrossgrids.png :width 600
ggplot(error.df.avg.class, aes(y = overall.error, x = segment.size, color = model, size = compactness/segment.size)) +
geom_point() +
          theme(text = element_text(size = 15))
#+end_src

#+results:
[[file:./figs/grid_pointwise_avgacrossgrids.png]]

***** Table showing the *best* classified grids, averaged across all classifiers
#+begin_src R
    error.df.avg.grids <- error.df %>%
        select(-image, -model, -target.cover, -seg.params, -segment.size, -compactness) %>%
        group_by(grid) %>%
        summarize_each(funs(mean(.,na.rm = T))) %>%
        ungroup() %>%
        arrange(overall.error)


  options(warn = -1)
    error.df.avg.grids %>% ascii
  options(warn = 1)
#+end_src

#+results:
#+begin_example
|    | grid        | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|----+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
| 1  | mad.50m.2   | 0.04          |                               | 0.00                               | 1.00                         |
| 2  | mad.150m.9  | 0.05          | 0.10                          | 0.00                               | 0.74                         |
| 3  | mad.100m.12 | 0.06          | 0.13                          | 0.00                               |                              |
| 4  | mad.100m.13 | 0.08          | 1.00                          | 0.01                               | 0.86                         |
| 5  | mad.100m.4  | 0.11          | 0.89                          | 0.01                               | 0.88                         |
| 6  | mad.100m.27 | 0.11          | 0.14                          | 0.08                               |                              |
| 7  | mad.150m.5  | 0.15          | 0.22                          | 0.01                               | 0.61                         |
| 8  | mad.200m.2  | 0.16          | 0.13                          | 0.07                               | 0.72                         |
| 9  | mad.200m.5  | 0.19          | 0.09                          | 0.97                               | 0.44                         |
| 10 | mad.50m.1   | 0.23          | 0.75                          | 0.10                               | 0.88                         |
| 11 | mad.200m.1  | 0.23          | 0.19                          | 0.06                               | 0.67                         |
| 12 | mad.200m.4  | 0.23          | 0.19                          | 0.06                               | 0.76                         |
| 13 | mad.100m.30 | 0.25          | 0.90                          | 0.04                               | 0.93                         |
| 14 | mad.100m.8  | 0.27          | 0.68                          | 0.04                               | 0.86                         |
| 15 | mad.100m.28 | 0.28          | 0.20                          |                                    | 0.38                         |
| 16 | mad.100m.16 | 0.28          | 0.02                          |                                    | 0.66                         |
| 17 | mad.100m.9  | 0.29          | 0.27                          | 0.15                               | 0.71                         |
| 18 | mad.100m.5  | 0.30          | 0.34                          | 0.13                               | 0.72                         |
| 19 | mad.100m.18 | 0.31          | 0.34                          | 0.18                               | 0.60                         |
| 20 | mad.150m.4  | 0.32          | 0.36                          | 0.16                               | 0.74                         |
| 21 | mad.100m.11 | 0.34          | 0.16                          | 0.40                               | 0.53                         |
| 22 | mad.150m.2  | 0.35          | 0.42                          | 0.15                               | 0.52                         |
| 23 | mad.50m.5   | 0.36          | 0.34                          | 0.22                               | 0.37                         |
| 24 | mad.50m.3   | 0.37          | 0.69                          | 0.25                               | 0.61                         |
| 25 | mad.150m.7  | 0.37          | 0.36                          |                                    | 0.43                         |
| 26 | mad.100m.23 | 0.38          | 0.12                          |                                    | 0.40                         |
| 27 | mad.50m.4   | 0.38          | 0.66                          | 0.23                               | 0.53                         |
| 28 | mad.100m.17 | 0.40          | 0.51                          | 0.25                               | 0.57                         |
| 29 | mad.150m.1  | 0.40          | 0.34                          | 0.28                               | 0.66                         |
| 30 | mad.100m.6  | 0.40          | 0.35                          | 0.35                               | 0.46                         |
| 31 | mad.100m.14 | 0.40          | 0.46                          | 0.06                               | 0.49                         |
| 32 | mad.100m.21 | 0.41          | 0.62                          | 0.36                               | 0.41                         |
| 33 | mad.100m.7  | 0.42          | 0.36                          | 0.45                               | 0.45                         |
| 34 | mad.100m.24 | 0.42          | 0.58                          | 0.25                               | 0.51                         |
| 35 | mad.100m.20 | 0.42          | 0.38                          | 0.38                               | 0.48                         |
| 36 | mad.100m.19 | 0.44          | 0.42                          | 0.40                               | 0.45                         |
| 37 | mad.100m.3  | 0.44          | 0.81                          | 0.28                               | 0.45                         |
| 38 | mad.150m.10 | 0.44          | 0.44                          | 0.30                               | 0.52                         |
| 39 | mad.200m.3  | 0.45          | 0.46                          | 0.24                               | 0.55                         |
| 40 | mad.150m.6  | 0.46          | 0.51                          | 0.39                               | 0.50                         |
| 41 | mad.150m.3  | 0.47          | 0.68                          | 0.24                               | 0.60                         |
| 42 | mad.100m.29 | 0.48          | 0.60                          | 0.47                               | 0.46                         |
| 43 | mad.150m.8  | 0.48          | 0.76                          | 0.19                               | 0.72                         |
| 44 | mad.100m.22 | 0.49          | 0.57                          | 0.34                               | 0.56                         |
| 45 | mad.100m.10 | 0.50          | 0.70                          | 0.33                               | 0.53                         |
| 46 | mad.100m.1  | 0.52          | 0.24                          |                                    | 0.55                         |
#+end_example

***** Table showing the *worst* classified grids, averaged across all classifiers
#+begin_src R :results raw
    error.df.avg.grids <- error.df %>%
        select(-image, -model, -target.cover, -seg.params, -segment.size, -compactness) %>%
        group_by(grid) %>%
        summarize_each(funs(mean(.,na.rm = T))) %>%
        ungroup() %>%
        arrange(overall.error)

  options(warn = -1)
    error.df.avg.grids %>% arrange(desc(overall.error)) %>% ascii
  options(warn = 1)
#+end_src

#+results:


***** Plots showing how grid characteristics (e.g. heterogeneity) affect accuracy


*** Save Best Model

This will fail unless the error.df is the correct one.
#+begin_src R

  #  error.df <- readRDS("~/Pjt_UTC/DD/RandomPoints.GoogleReference.point2pixel.error.df.rds")
    error.df <- readRDS("../DD/RandomPoints.NAIPreference.point2pixel.error.df.rds")

        error.df.avg.class <-   error.df %>%
            group_by(image, target.cover, model, seg.params, tuned) %>%
            mutate(overall.error = as.numeric(as.character(overall.error))) %>%
            summarize(error = mean(overall.error, na.rm = T)) %>%
            arrange(error)


  best.classif.overall <- error.df.avg.class %>%
      ungroup() %>%
            slice(1) %>%
          mutate(path = paste0(image,"_",seg.params,"_",model,"_",tuned,"_model.rds"))

        best.model <- readRDS(paste0(dd.models.dir,"/",best.classif.overall$path))

        saveRDS(best.model, paste0(dd.models.dir,"/best_mad_model_",best.classif.overall$path))

#+end_src

#+results:
:  Joining, by = c("image", "target.cover", "model", "seg.params", "tuned")
: Error in gzfile(file, "rb") : invalid 'description' argument
: Error in gzfile(file, mode) : invalid 'description' argument
: In addition: Warning message:
: In if (file == "") stop("'file' must be non-empty string") :
:   the condition has length > 1 and only the first element will be used

** Test How Madison Model performs for Wausau
*** Set location to Wausau and image to NAIP, pca location to "madison", models: Madison
#+begin_src R
  location <- "wausau"
  image.name <- "NAIP"
  image.paths <- str_extract(image.paths, paste0(".*",location,image.name,".*")) %>% na.omit

  dd.accuracy.dir <- str_extract(dd.accuracy.dirs, paste0(".*",location,".*")) %>% na.omit
  dd.accuracy.classified.dir <-str_extract(dd.accuracy.classified.dirs, paste0(".*",location,".*")) %>% na.omit

  dd.models.dir <- str_extract(dd.models.dirs, paste0(".*","madison",".*")) %>% na.omit

  dd.pca.dir <-  str_extract(dd.pca.dirs, paste0(".*","madison",".*")) %>% na.omit
  pca.location <- "madison"
#+end_src

#+results:

#+results:{{{results(==)}}}
*** Make tiles at accuracy regions

make this i = 1:2 (or 1:3) to do all the accuracy regions

#+BEGIN_SRC R :results none

      foreach(i = 1) %do% {

        foreach(img.pth = image.paths) %do% {

            Reproject_Shapefile_to_Image_CRS(accuracy.region.dsn[i],
                                             accuracy.region.layer[i],
                                             img.pth,
                                             accuracy.region.imageCRS.dsn)


            Crop_image_to_regions_around_points_nameBygrid(shapefile.dsn = accuracy.region.imageCRS.dsn,
                                                           shapefile.layer = accuracy.region.layer[i],
                                                           image.path = img.pth,
                                                           cores = cores,
                                                           output.dir = dd.accuracy.dir,
                                                           column.name = tile.id.col.nm.for.grid.and.field.accuracy[i])

        }
    }


#+END_SRC

*** Make Feature data frames, for each Accuracy Region tile; "madison" is pca location

 #+begin_src R :results silent

segment.params <- segment.params %>% filter(compactness == 15, segment.size == 30)

      cl <- makeCluster(cores)
      registerDoParallel(cl)



      pixel.added.features.raster.list <- foreach(img.nm = image.names) %do% {

                                              #img.nm <- image.names[1]

          tile.names <- list.files(dd.accuracy.dir) %>%
              str_match(., pattern = str_c("(",location,img.nm,".",grid.pattern,")(.tif)"))

          tile.names <- tile.names[,2] %>% na.omit()

          foreach (i = tile.names,
                   .packages = c("glcm","raster","stringr","dplyr")) %dopar% {

                       feature.dfs <- make.feature.df(tile.dir = dd.accuracy.dir,
                                                      tile.name = i,
                                                      image.name = img.nm,
                                                      band.names = c("blue","green","red","nir"),
                                                      ndvi = T,
                                                      ratio.bands = c("blue","green","red","nir"),
                                                      texture.params.df = texture.params,
                                                      pixel.df = F,
                                                      pca.location = pca.location,
                                                      segmentation = T,
                                                      segment.params.df = segment.params,
                                                      using.krusty = T)

                   }
      }

#+end_src

*** Classify Tiles at accuracy regions using "best model"
#+BEGIN_SRC R :results none
   cl <- makeCluster(cores)
   registerDoParallel(cl)



   classified.grid.tiles <-
       foreach(img.nm = image.names) %do% {

           best.model <- list.files(dd.models.dir) %>%
               str_extract(., "best_mad_model_.*") %>%
               na.omit()

           tile.names <- list.files(dd.accuracy.dir) %>%
               str_match(., pattern = str_c("(",location,img.nm,".*?)_.*\\.tif$"))

           tile.names <- tile.names[,2] %>% na.omit() %>% unique()


           foreach(tile.nm = tile.names,
                   .packages = c("plyr","dplyr","raster","stringr","mlr","foreach","doParallel")) %do% {

               foreach(model = best.model) %do% {

                   seg.p <- str_extract(model, segmentation.pattern)

                   if(grepl("N-[0-9]+_C-[0-9]+",seg.p)) {
                          segment.tile.name.append <- paste0("_",seg.p,".tif")
                          segment.feature.df.name.append <- paste0("_",seg.p,feature.df.appendage,".rds")

                          classify.segmented.raster(segment.feature.df.dir = dd.accuracy.dir,
                                          model.dir = dd.models.dir,
                                          segment.dir = dd.accuracy.dir,
                                          classify.out.dir = dd.accuracy.classified.dir,
                                          tile.name = tile.nm,
                                          segmentation.appendage = segment.tile.name.append,
                                          model.name.rds = model,
                                          segment.feature.appendage = segment.feature.df.name.append,
                                          segmentation.prms = seg.p)

                   } else {
                       classify.pixel.raster(tile.dir = dd.accuracy.dir,
                                             tile.name = tile.nm,
                                             pixelFeatureDF.appendage = feature.df.appendage,
                                             model.dir = dd.models.dir,
                                             model.rds = model,
                                             seg.prms = seg.p)
                   }
               }
           }
       }

  stopCluster(cl)

       ## out <- foreach(i = 1:length(urb.polys),
       ##               .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr")) %dopar% {

#+END_SRC




*** Point-wise accuracy.  regular confusion matrix thing.  I should do this for the grids and the field plot data
#+BEGIN_SRC R
      grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer, stringsAsFactors = F)

      xy <- coordinates(grd)
      grd@data$x <- xy[,1]
      grd@data$y <- xy[,2]

  classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
      str_extract(., pattern = ".*.tif$") %>%
          str_extract(., pattern = str_c(".*",grid.pattern, ".*")) %>%
          na.omit()


  grid.names <- classified.tile.paths %>%
      str_match(., paste0(".*(",grid.pattern,").*"))

  grid.names <- grid.names[,2] %>%
      unique() %>%
      na.omit()


      cl <- makeCluster(cores)
      registerDoParallel(cl)


      error.df <- foreach(grid.name = grid.names, .combine = "rbind") %do% {

          pts <- grd[grd@data$unq__ID== grid.name,]

          classified.tile.paths.at.grid <- str_extract(classified.tile.paths, str_c(".*",grid.name,"_.*")) %>%
              na.omit()

          ## classified.tile.paths.at.grid2 = classified.tile.paths.at.grid %>%
          ##      str_extract(., ".*madisonNAIP.*N-105.*svm_.*") %>%
          ##      na.omit()

  #         classified.tile.path.at.grid = classified.tile.paths.at.grid[1]



          foreach(classified.tile.path.at.grid = classified.tile.paths.at.grid,
                  .combine = "rbind",
                  .packages = c("plyr","raster","dplyr", "stringr","ggplot2")) %dopar% {

                      classified.tile.name.at.grid <- basename(classified.tile.path.at.grid)
                      classified.tile <- raster(classified.tile.path.at.grid)

                      tgt <- str_extract(classified.tile.name.at.grid, "tree|grass|impervious|all")
                      tgt <- mapvalues(tgt, c("tree","grass","impervious","all"), c("t","g","i","a"))

                     ##  png(str_c("figs/","ClassifiedVersusGrid","/",names(classified.tile),".png"))
                     ## print(pts.on.classified.tile.plot(pts, classified.tile, target = tgt))
                     ## dev.off()

                      PixBool <- !is.na((str_extract(classified.tile.path.at.grid, "_Pixel_")))

                      if(!is.na(str_extract(classified.tile.path.at.grid, "_all_"))) {
                          error <- calcErrorAllMultinomial(pts, classified.tile, Pixel = PixBool)
                          error <- error %>%
                              t() %>%
                              data.frame() %>%
                              mutate(grid = grid.name,
                                     image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                     target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                     model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                     seg.params = str_extract(classified.tile.name.at.grid, segmentation.pattern))
                          error
                      } else {
                          target = str_extract(classified.tile.name.at.grid, "tree|grass|impervious")
                          target <- mapvalues(target, c("tree","grass","impervious"), c("t","g","i"))
                          error <- calcErrorBinomial(pts, classified.tile, target, Pixel = PixBool)
                          error <- error %>%
                              t() %>%
                              data.frame() %>%
                              mutate(grid = grid.name,
                                     image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                     target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                     model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                     seg.params = str_extract(classified.tile.name.at.grid, seg.prms))

                          error
                      }
                  }
      }



      saveRDS(error.df, str_c(derived.dir, "/",location,"_point2pixel.error.df.rds"))

  ##   tile.name.at.urb.poly <- tiles.names.at.urb.poly[[1]]
#+END_SRC

#+results:
: OGR data source with driver: ESRI Shapefile
: Source: "../RD_Accuracy/Grids", layer: "Grids"
: with 20209 features
: It has 15 fields

#+begin_src R
  df <- readRDS(str_c(derived.dir, "/",location,"_point2pixel.error.df.rds")) %>%
      summarize(mean.overall.error = mean(overall.error))
  df

  df <- readRDS(str_c(derived.dir, "/",location,"_point2pixel.error.df.rds"))
df
#+end_src

#+results:
#+begin_example
  mean.overall.error
1              0.188
   overall.error pct.grass.classified.as.other
1    0.142222222                     0.2142857
2    0.000000000                           NaN
3    0.044444444                     0.5000000
4    0.008888889                           NaN
5    0.173333333                     0.3269231
6    0.262222222                     0.3148148
7    0.266666667                     0.5479452
8    0.151111111                     0.1349693
9    0.373333333                     0.2179487
10   0.457777778                     0.8666667
   pct.impervious.classified.as.other pct.tree.classified.as.other        grid
1                          0.04545455                  0.888888889 wau.100m.10
2                                 NaN                  0.000000000  wau.100m.1
3                          0.28571429                  0.014423077  wau.100m.2
4                                 NaN                  0.008888889  wau.100m.3
5                          0.03311258                  0.772727273  wau.100m.4
6                          0.07407407                  0.288135593  wau.100m.5
7                          0.07627119                  0.281250000  wau.100m.6
8                          0.10638298                  0.384615385  wau.100m.7
9                          0.20754717                  0.547619048  wau.100m.8
10                         0.40625000                  0.388059701  wau.100m.9
        image target.cover   model seg.params
1  wausauNAIP          all rf_prob  N-30_C-15
2  wausauNAIP          all rf_prob  N-30_C-15
3  wausauNAIP          all rf_prob  N-30_C-15
4  wausauNAIP          all rf_prob  N-30_C-15
5  wausauNAIP          all rf_prob  N-30_C-15
6  wausauNAIP          all rf_prob  N-30_C-15
7  wausauNAIP          all rf_prob  N-30_C-15
8  wausauNAIP          all rf_prob  N-30_C-15
9  wausauNAIP          all rf_prob  N-30_C-15
10 wausauNAIP          all rf_prob  N-30_C-15
#+end_example

*** RMSE at grid level
**** Combine google earth grid estimates of cover with classified tile estimates of cover

 Create dataframe with structure:

 | %t.img | %g.img | %i.img | %o.img | image      | segmentation | target.cover        | target.type         | model                   | tile                   | cropped.to.n.pts | %t.goog | %g.goog | %i.goog | %o.goog |   |   |   |   |   |   |   |   |
 |--------+--------+--------+--------+------------+--------------+---------------------+---------------------+-------------------------+------------------------+------------------+---------+---------+---------+---------+---+---+---+---+---+---+---+---|
 |    0-1 |    0-1 |    0-1 |    0-1 | NAIP       | Pixel        | grass               | binomial (two)      | random forest prob      | mad-size-id (up to 50) |                4 |     0-1 |     0-1 |     0-1 |     0-1 |   |   |   |   |   |   |   |   |
 |        |        |        |        | panshpSPOT | 30 m2        | tree                | multinomial (three) | random forest resp      |                        |                9 |         |         |         |         |   |   |   |   |   |   |   |   |
 |        |        |        |        |            | 60 m2        | impervious          |                     | support vector machines |                        |               16 |         |         |         |         |   |   |   |   |   |   |   |   |
 |        |        |        |        |            |              | NA (if multinomial) |                     |                         |                        |               25 |         |         |         |         |   |   |   |   |   |   |   |   |
 |        |        |        |        |            | 105 m2       |                     |                     |                         |                        |              ... |         |         |         |         |   |   |   |   |   |   |   |   |



***** Create DF of % cover from grids cropped to different extents
 #+BEGIN_SRC R
           grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer)
           grd.df <- grd@data

   mod <- 1
      n.rows.and.columns.for.subset = c(15)

           out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {
               calc.pct.cvr.for.grid.subset(grd.df, n.rows.and.columns.for.sub, mod = 1)
           }

           Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets <- bind_rows(out)

      Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets <- Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets
#%>%
 #         rename(grid = unq__ID)

        saveRDS(Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets, str_c(derived.dir,"/","Wausau.Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.dataframe",".rds"))
 #+END_SRC

 #+results:
 : OGR data source with driver: ESRI Shapefile
 : Source: "../RD_Accuracy/Grids", layer: "Grids"
 : with 20209 features
 : It has 15 fields
 : Warning message:
 : closing unused connection 4 (<-localhost:11537)
 :  Joining, by = "unq__ID"
 : Joining, by = "unq__ID"
 : Joining, by = "unq__ID"

***** Create DF of % cover from classified rasters cropped to different extents

#+BEGIN_SRC R
way.grid.id.pattern <- ".*wau.*"

    grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer)


    # get path of grid tiles (not interested in fieldplot classified tiles)
        classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
            str_extract(., pattern = ".*.tif$") %>%
            str_extract(., pattern = str_c(".*",wau.grid.id.pattern, ".*")) %>%
              na.omit()


  n.rows.and.columns.for.subset = c(15)


  cl <- makeCluster(cores)
  registerDoParallel(cl)


      out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {
             pct.class.cover <- foreach(tile.path = classified.tile.paths, .packages = c("raster","dplyr","stringr")) %dopar% {
               calculate.percent.cover.in.classified.tile(pts = grd,
                                                           tile.pth = tile.path,
                                                           n.rows.and.columns.subset = n.rows.and.columns.for.sub)

            }
                saveRDS(pct.class.cover, str_c(derived.dir,"/","Wausau.Percent.Cover.Classified.Tiles.nPoints",n.rows.and.columns.for.sub, ".rds"))
      }


  class.cover.files <- list.files(derived.dir, pattern = "Wausau.Percent.Cover.Classified.Tiles.nPoints*", full.names = T)

  class.cover.dfs <- lapply(class.cover.files, readRDS)

  out <- unlist(class.cover.dfs,recursive = F)

       Percent.Cover.Classified.Tiles.dataframe <- bind_rows(out)





  # delete this line if I run it again.
  ## Percent.Cover.Classified.Tiles.dataframe <-rename(Percent.Cover.Classified.Tiles.dataframe,
  ##                                                   image = tile,
  ##                                                   pct_g_pred = pct_g,
  ##                                                   pct_i_pred = pct_i,
  ##                                                   pct_t_pred = pct_t,
  ##                                                   pct_o_pred = pct_o)

    ## saveRDS(Percent.Cover.Classified.Tiles.dataframe, str_c(derived.dir,"/","Percent.Cover.Classified.Tiles.dataframe",".rds"))

#+END_SRC

#+results:
: OGR data source with driver: ESRI Shapefile
: Source: "../RD_Accuracy/Grids", layer: "Grids"
: with 20209 features
: It has 15 fields
:  Error in stri_c(..., sep = sep, collapse = collapse, ignore_null = TRUE) :
:   object 'wau.grid.id.pattern' not found




***** Join Cover from Grids with predicted Cover from images
#+BEGIN_SRC R
    Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets <- readRDS(str_c(derived.dir,"/","Wausau.Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.dataframe",".rds"))

    str(Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets)
    str(Percent.Cover.Classified.Tiles.dataframe)

  Percent.Cover.Classified.Tiles.dataframe %>%
      filter(seg.params == "Pixel") %>%
      data.frame() %>%
      head()

    Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets %>%
        filter(n.points == 400)


  #Percent.Cover.Classified.Tiles.dataframe <- Percent.Cover.Classified.Tiles.dataframe %>%
  #    rename(pct_g_pred = pct_g, pct_t_pred = pct_t, pct_i_pred = pct_i, pct_o_pred = pct_o)


    grid.master.df <- left_join(Percent.Cover.Classified.Tiles.dataframe, Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets)

    # Should join by Joining by: c("grid", "target.cover", "n.points", "target.type")

    str(grid.master.df)

    grid.master.df %>%
  #      filter(n.points == 400) %>%
        data.frame() %>%
        head(n=40)




#+END_SRC

#+results:
#+begin_example
 ..$ : symbol grid
  .. ..$ : symbol n.points
Classes ‘tbl_df’, ‘tbl’ and 'data.frame':	0 obs. of  0 variables
 data frame with 0 columns and 0 rows
 Source: local data frame [0 x 10]
Groups: grid, n.points [0]

# ... with 10 variables: grid <fctr>, n.points <int>, area <dbl>,
#   pct.g.googleEarth <dbl>, pct.i.googleEarth <dbl>, pct.o.googleEarth <dbl>,
#   pct.t.googleEarth <dbl>, target.type <chr>, target.cover <chr>,
#   grid.row.col.num <dbl>
Error: No common variables. Please specify `by` param.
Error in str(grid.master.df) : object 'grid.master.df' not found
 Error in eval(expr, envir, enclos) : object 'grid.master.df' not found
#+end_example


**** Make RMSE plots

#+BEGIN_SRC R :results graphics :file figs/wausauNAIP.100m.RMSE_plot.png :height 800 :width 600

    sub.for.rmse.plot <- grid.master.df %>%
        filter(target.type == "multinomial",
               image == "wausauNAIP",
               n.points == 225)


    ggplot(sub.for.rmse.plot, aes( x = pct.t.googleEarth, y = pct_t_pred, color = model)) +
  geom_point() + geom_smooth() + theme_classic() +
  geom_line(data = data.frame(pct.t.googleEarth = c(0,1), pct_t_pred = c(0,1), seg.params = "1:1"),
  color = "black", size = 1) +
  ggtitle("NAIP, n.pts: 225")

#+END_SRC



**** Calc RMSE table

 Create dataframe with structure:

 | RMSE | image | segmentation | target | model | cropped.to.n.pts | cover_type |   |   |   |   |   |   |   |
 |------+-------+--------------+--------+-------+------------------+------------+---+---+---+---+---+---+---|
 |      |       |              |        |       |                  |            |   |   |   |   |   |   |   |


***** Calc Error Column

#+BEGIN_SRC R
  error_tree <- grid.master.df %>%
      filter(target.cover == "tree" | target.cover == "all") %>%
      select(-target.cover) %>%
      group_by(image, model, n.points, seg.params, target.type) %>%
      mutate(t_error = (pct_t_pred - pct.t.googleEarth))

  error_tree %>%
      select(image, model, n.points, seg.params, target.type, grid, t_error) %>%
      filter(n.points == 225) %>%
      ungroup() %>%
      arrange(desc(abs(t_error))) %>%
      data.frame() %>%
      head(n=50)
#+END_SRC



#+BEGIN_SRC R

    RMSE_tree <- grid.master.df %>%
        filter(target.cover == "tree" | target.cover == "all") %>%
        select(-target.cover) %>%
        group_by(image, model, n.points, seg.params, target.type) %>%
        summarize(RMSE_t = sqrt( mean( (pct_t_pred - pct.t.googleEarth)^2, na.rm =T ) ) )

  RMSE_tree <- RMSE_tree %>%
      mutate(segment.size = ifelse(!is.na(str_extract(seg.params, ".*105.*")), 105,
                            ifelse(!is.na(str_extract(seg.params, ".*60.*")), 60,
                            ifelse(!is.na(str_extract(seg.params, ".*30.*")), 30,
                            ifelse(!is.na(str_extract(seg.params, ".*70.*")), 105,
                            ifelse(!is.na(str_extract(seg.params, ".*40.*")), 60,
                            ifelse(!is.na(str_extract(seg.params, ".*20.*")), 30,1)))))))
#+END_SRC

**** RMSE analysis

Which combination of image, segmentation, target, model and n.pts
(spatial scale) minimize error for each cover_type?

#+BEGIN_SRC R :results raw
options(asciiType = "org")
options(warn = -1)
  RMSE_tree %>%
      ungroup() %>%
      arrange(RMSE_t) %>%
      head(n = 30) %>%
      ascii()
#+END_SRC



Plot:
x = cropped.to.n.pts
y = RMSE
color = model
facet(segmentation~cover_type)

#+BEGIN_SRC R :results graphics :file figs/RMSE_tree_compare_n.ptsXRMSE.png :height 800 :width 600

  ggplot(RMSE_tree, aes(x = n.points, y = RMSE_t, color = model)) + geom_point() +
      facet_grid(segment.size~image)

#+END_SRC


#+BEGIN_SRC R :results graphics :file figs/RMSE_tree_compare_AreaXRMSE_NAIP_seg60.png
  RMSE_tree.sub <- RMSE_tree%>%
      filter(segment.size == 60, image == "madisonNAIP", target.type == "binomial", model == "svm_resp") %>%
      mutate(area_meters_squared = ((sqrt(n.points) - 1) * 7)^2)


  ggplot(RMSE_tree.sub, aes(x = area_meters_squared, y = RMSE_t), color = "blue") + geom_point() +
      labs(y = "Root Mean Squared Prediction Error \n for Percent Tree Cover") +
      theme_classic() +
      theme(axis.title = element_text(size = 24),
            axis.text =  element_text(size = 22)) +
      xlim(0,45000)

#+END_SRC


#+BEGIN_SRC R :results graphics :file figs/RMSE_tree_compare_seg.sizeXRMSE.png :height 800 :width 600

  ggplot(RMSE_tree, aes(x = segment.size, y = RMSE_t, color = n.points, group = interaction(n.points,target.type))) + geom_line() +
      facet_grid(model~image)

#+END_SRC


#+BEGIN_SRC R :results raw

  m1 <-lm(RMSE_t*100 ~ image * (model +  target.type + n.points * segment.size), data = RMSE_tree)
  tidy(m1, digits = 2) %>%
ascii()
#+END_SRC

*** Plot classifications
#+begin_src R
  error.df <- error.df %>%
    mutate(path = paste0(dd.accuracy.classified.dir,"/",image,".",grid,"_",seg.params,"_","madisonNAIP","_",target.cover,"_",model,".tif"))

    lapply(1:nrow(error.df), function(i){
        pts.on.classified.tile.plot.ErrorinTitle(error = error.df$overall.error[i],
                                             grd.pts = grid.points,
                                             classified.tile.path = error.df$path[i],
                                             fig.dir = "figs/wausau.classifications",
                                             target = "a")
    })

#+end_src

#+results:
#+begin_example
 Warning: closing unused connection 6 (<-localhost:11247)
Warning: closing unused connection 5 (<-localhost:11247)
Warning: closing unused connection 4 (<-localhost:11247)
Warning: closing unused connection 3 (<-localhost:11247)
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
Warning in dir.create(fig.dir) :
  'figs/wausau.classifications' already exists
[[1]]
null device
          1

[[2]]
null device
          1

[[3]]
null device
          1

[[4]]
null device
          1

[[5]]
null device
          1

[[6]]
null device
          1

[[7]]
null device
          1

[[8]]
null device
          1

[[9]]
null device
          1

[[10]]
null device
          1
#+end_example

*** Summarize Accuracy Assessment Results

Comparing classification to other estimates of cover.
#+begin_src R :results none
      error.df <- readRDS(str_c(derived.dir, "/",location,"point2pixel.error.df.rds"))

      error.df %>%
          arrange(overall.error) %>%
          head()

      error.df %>%
          arrange(desc(overall.error)) %>%
          head()

      error.df %>%
          filter(seg.params != "Pixel") %>%
          arrange(desc(overall.error)) %>%
          head()

  error.df <- error.df %>%
      mutate(segment.size = as.numeric(ifelse(!is.na(str_match(seg.params, "N-([0-9]+)_C-[0-9]+")[,2]), str_match(seg.params, "N-([0-9]+)_C-[0-9]+")[,2], 1)),
             segment.size = ifelse(image == "panshpSPOT", segment.size * 1.5, segment.size),
             compactness = as.numeric(str_match(seg.params, "N-[0-9]+_C-([0-9]+)")[,2]))

#+end_src

#+begin_src R :results raw
options(warn = -1)
error.df %>% arrange(overall.error) %>% ascii
options(warn = 1)
#+end_src

#+results:
|    | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other | grid        | image      | target.cover | model   | seg.params | path                                                                                           | segment.size | compactness |
|----+---------------+-------------------------------+------------------------------------+------------------------------+-------------+------------+--------------+---------+------------+------------------------------------------------------------------------------------------------+--------------+-------------|
|  1 |          0.10 |                               |                                    |                         0.10 | wau.100m.1  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.1_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
|  2 |          0.20 |                          0.37 |                               0.03 |                         1.00 | wau.100m.4  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.4_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
|  3 |          0.21 |                          0.43 |                               0.02 |                         1.00 | wau.100m.10 | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.10_Pixel_madisonNAIP_all_rf_prob.tif |         1.00 |             |
|  4 |          0.28 |                               |                                    |                         0.28 | wau.100m.3  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.3_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
|  5 |          0.31 |                          0.40 |                               0.00 |                         0.31 | wau.100m.2  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.2_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
|  6 |          0.32 |                          0.25 |                               0.04 |                         0.66 | wau.100m.5  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.5_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
|  7 |          0.33 |                          0.58 |                               0.07 |                         0.69 | wau.100m.6  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.6_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
|  8 |          0.36 |                          0.39 |                               0.06 |                         0.92 | wau.100m.7  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.7_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
|  9 |          0.42 |                          0.17 |                               0.15 |                         0.76 | wau.100m.8  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.8_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |
| 10 |          0.59 |                          0.53 |                               0.28 |                         0.70 | wau.100m.9  | wausauNAIP | all          | rf_prob | Pixel      | ../DD/wausau_Accuracy/ClassifiedTiles/wausauNAIP.wau.100m.9_Pixel_madisonNAIP_all_rf_prob.tif  |         1.00 |             |



* Classify Every Urban Area in the State
** inputs

*** Raster Temp Dir
#+BEGIN_SRC R
R_raster_temp <- "../R_raster_temp"
dir.create(R_raster_temp)
rasterOptions(tmpdir=R_raster_temp)
#+END_SRC

#+results:
: Warning message:
: In dir.create(R_raster_temp) : '../R_raster_temp' already exists

*** Projections
#+BEGIN_SRC R
wtm <- CRS("+init=epsg:3070")
#+END_SRC

#+results:

*** cores
#+BEGIN_SRC R
cores <- detectCores() - 2
#+END_SRC

#+results:

*** Urban, Water, and Wetland shapefiles
#+BEGIN_SRC R
  urban.areas.dsn <- "../RD_merged_WIurbanAreas_and_incorporatedAreas"
    urban.areas.layer <- "Dissolve_Merge_WI_census_inc"

     ## urban.areas.dsn <- "../RD_US_UrbanAreasShapefile"
     ## urban.areas.layer <- "cb_2013_us_ua10_500k"


    water.dsn <- "../RD_WI-waterbody-24k"
    water.layer <- "WD-Hydro-Waterbody-WBIC-AR-24K"

    wetlands.dsn <- "../RD_Wetland"
    wetlands.layer <- "WI_Wetlands"

#+END_SRC

#+results:

*** Cropland Data Layer
#+BEGIN_SRC R
  crop.directory <- "../RD_CroplandDataLayer/"
  crop2010.name <- "CDL_2010_clip_20160128162252_788770535"
  crop2011.name <- "CDL_2011_clip_20160106190244_1504737741"
  crop2012.name <- "CDL_2012_clip_20151229124713_1037776543"
  crop2013.name <- "CDL_2013_clip_20151229123327_86558742"
  crop2014.name <- "CDL_2014_clip_20151229123327_86558742"

  n_croplandLayers <- 5

#+END_SRC

#+results:

*** NAIP tiles directory
#+BEGIN_SRC R
naip.dir <- "../../../../home/erker/NAIP_mount/NAIP13_WTM_TIFs"
#+END_SRC

#+results:
*** Output Directories
#+BEGIN_SRC R
derived.dir <- "../DD/"
classified.urban.areas.dir <- paste0(derived.dir, "ClassifiedUrbanAreas/")
dir.create(classified.urban.areas.dir)
#+END_SRC

#+results:
: Warning message:
: In dir.create(classified.urban.areas.dir) :
:   '../DD/ClassifiedUrbanAreas' already exists

*** Segmentation Parameters
#+BEGIN_SRC R :eval yes
  pixel_size  <- 1 # m^2
  segment_size <- 30 # m^2
  compactness <- 15
  segment.params <- data.frame(compactness = compactness, segment.size = segment_size)
#+END_SRC

#+results:

*** delete
**** PCA
#+BEGIN_SRC R :eval no
madison.naip.pca.path <- "../DD/Madison_pca/madisonNAIP_pca.rds"
#+END_SRC

#+results:

#+results:

**** filename appendages
#+BEGIN_SRC R :eval no
  ratio.tile.name.append = "_ratio"
  pca.tile.name.append = "_pca"
  seg.tile.name.append = paste0("_N-",segment_size,"_C-",compactness)
  segmentFeatureDF.append = "_SegFeatureDF"
#+END_SRC

#+results:

**** Model
#+BEGIN_SRC R :eval no
model.path <- "../DD/Models/best_mad_model.rds"
#+END_SRC

#+results:



** set pca and source location and dd dirs
#+begin_src R
location <- "madison"
dd.pca.dir <-  str_extract(dd.pca.dirs, paste0(".*",location,".*")) %>% na.omit
dd.models.dir <- str_extract(dd.models.dirs, paste0(".*",location,".*")) %>% na.omit
#+end_src

#+results:

** Reproject shapefiles to be wtm, the same as the images
#+BEGIN_SRC R
           urban <- readOGR(dsn = urban.areas.dsn, layer = urban.areas.layer)
  urban <- spTransform(urban, wtm)

    ## wi <- urban[which(!is.na(str_extract(as.character(urban@data$NAME10), ".*WI"))),]
     ##   urban <- spTransform(wi, utm16)



         #  water <- readOGR(dsn = water.dsn, layer = water.layer)

           # Both are already in wtm, no need to transform
#+END_SRC

#+results:
: OGR data source with driver: ESRI Shapefile
: Source: "../RD_merged_WIurbanAreas_and_incorporatedAreas", layer: "Dissolve_Merge_WI_census_inc"
: with 1 features
: It has 1 fields
: There were 18 warnings (use warnings() to see them)

** Disaggregate Urban Area Polygons

#+BEGIN_SRC R
  urb.polys <- disaggregate(as(urban, "SpatialPolygons"))
#+END_SRC

#+results:

** Load NAIP tifs
#+BEGIN_SRC R
  naip.tif.names <- list.files(naip.dir, recursive = T, full.names = T) %>%
    str_extract(pattern = ".*tif$") %>%
    na.omit()
#+END_SRC

#+results:

#+BEGIN_SRC R
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  naip.stacks <- foreach(naip.tif.name = naip.tif.names, .packages = "raster") %dopar% {
      stack(naip.tif.name)
  }

  closeAllConnections()


#+END_SRC

#+results:

#+BEGIN_SRC R
    cl <- makeCluster(cores)
    registerDoParallel(cl)

    naip.extents <- foreach(naip.stack = naip.stacks, .packages = "raster") %dopar% {
        extent(naip.stack)
  }

  closeAllConnections()

#+END_SRC

#+results:

*** For the smaller urban areas
#+begin_src R

  low.q <- .85
  high.q <- .95

    areas <- foreach(i = 1:length(urb.polys), .combine = "rbind") %do% gArea(urb.polys[i])
    low.quant <- quantile(areas[,1],probs = low.q)
    high.quant <- quantile(areas[,1],probs = high.q)

    i_areas_less_quant <- which(areas[,1] < high.quant & areas[,1] > low.quant)
#+end_src

#+results:

 #+BEGIN_SRC R
       cl <- makeCluster(cores)
       registerDoParallel(cl)

   out <- foreach(i = i_areas_less_quant,
                 .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr")) %dopar% {

       urb.poly <- urb.polys[i]
#+END_SRC

 #+results:

**** Set temp dir for this urban area
#+BEGIN_SRC R
temp_i <- paste0(R_raster_temp,"/",i)
dir.create(temp_i)
rasterOptions(tmpdir=temp_i)
#+END_SRC

#+results:

**** Make output dir for this urban area
#+BEGIN_SRC R
urb.path <- paste0(classified.urban.areas.dir, i)
dir.create(urb.path)
#+END_SRC

#+results:
: Warning message:
: In dir.create(urb.path) : '../DD/ClassifiedUrbanAreas/812' already exists

**** Get names of NAIP tiles that intersect with Urban Area
#+BEGIN_SRC R
       tiles.in.urban <-  lapply(naip.extents, function(naip.extent) {
           inter <- raster::intersect(naip.extent, urb.poly)
           ifelse(is.null(inter), F, T)
         })

  tile.index <- which(unlist(tiles.in.urban))

  tiles.names.at.urb.poly <- naip.tif.names[tile.index]

#+END_SRC

#+results:
:  Error in lapply(naip.extents, function(naip.extent) { :
:   object 'naip.extents' not found
: Error in unlist(tiles.in.urban) : object 'tiles.in.urban' not found
: Error: object 'naip.tif.names' not found

**** For each NAIP tile that intersects with Urban Area
#+BEGIN_SRC R

     foreach(t.p = tiles.names.at.urb.poly,
                     .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr","glcm")) %do% {

#+END_SRC

***** Make output dir for this tile
#+BEGIN_SRC R
  tile.name <- basename(t.p) %>%
    str_sub(start = 1, end = -5)  # remove .tif
  tile.urb.path <- paste0(urb.path,"/",tile.name)
  dir.create(tile.urb.path)
message("make tile output dir", tile.urb.path)
#+END_SRC

#+results:
: [1] "make tile output dir ../DD/ClassifiedUrbanAreas/13/m_4208909_se_16_1_20130705_w"

***** Crop to intersection of image and Urban Extent

It would be better to only use one NAIP image if it contains the whole
urban area.  I'm including some tiles that don't add any extra
information because the urban extent only goes into the overlap area.
This causes thin slivers to be made which are unnecessary and cause
errors.  Also cause additional misregistration problems and funny
looking borders of objects because I decide disagreemnst randomlys.

Also some of the extents of the large tiles overlap with urban area,
but the images themselves don't.  THis creates intersection images
that are empty.

#+BEGIN_SRC R
                                          # Crop image
  eu <- extent(urb.poly)
  ei <- extent(raster(t.p))
  e <- raster::intersect(ei,eu)

  inFile <- t.p
  outFile <- str_c(tile.urb.path,"/urbanExtent.tif")

  gdal_translate(inFile, outFile,
                 projwin = c(xmin(e), ymax(e), xmax(e), ymin(e)))


  message("Crop to Urban Extent")

#+END_SRC

#+results:
:  NULL
: Crop to Urban Extent

***** make sure the intersection image has datavalues

#+begin_src R
  r.test <- raster(paste0(tile.urb.path,"/urbanExtent.tif"))

  if (sum(!is.na(values(r.test))) > 500) {

#+end_src
***** Generate Feature data frame
#+begin_src R

feature.dfs <- make.feature.df(tile.dir = tile.urb.path,
                                 tile.name = "urbanExtent",
                                 image.name = "NAIP",
                                 band.names = c("blue","green","red","nir"),
                                 ndvi = T,
                                 ratio.bands = c("blue","green","red","nir"),
                                 texture.params.df = texture.params,
                                 pixel.df = F,
                                 pca.location = location,
                                 segmentation = T,
                                 segment.params.df = segment.params)

message("features created for", tile.urb.path)

#+end_src
***** Classify
#+begin_src R

        model <- list.files(dd.models.dir) %>%
            str_extract("best_.*") %>% na.omit()

        seg.p <- str_extract(model, segmentation.pattern)

        if(grepl("N-[0-9]+_C-[0-9]+",seg.p)) {
            segment.tile.name.append <- paste0("_",seg.p,".tif")
            segment.feature.df.name.append <- paste0("_",seg.p,feature.df.appendage,".rds")

            classify.segmented.raster(segment.feature.df.dir = tile.urb.path,
                                      model.dir = dd.models.dir,
                                      segment.dir = tile.urb.path,
                                      classify.out.dir = tile.urb.path,
                                      tile.name = "urbanExtent",
                                      segmentation.appendage = segment.tile.name.append,
                                      model.name.rds = model,
                                      segment.feature.appendage = segment.feature.df.name.append,
                                      segmentation.prms = seg.p)

        } else {
            classify.pixel.raster(tile.dir = tile.urb.path,
                                  tile.name = "urbanExtent",
                                  pixelFeatureDF.appendage = feature.df.appendage,
                                  model.dir = dd.models.dir,
                                  model.rds = model,
                                  classify.out.dir = tile.urb.path,
                                  seg.prms = seg.p)
        }
        message("Image Classified")

        message("Done with",tile.urb.path)

  }
  }
  #+end_src

#+results:


**** Merge NAIP Tiles if there is more than one over an urban area and Save Classified image as <UrbanArea>.tif
#+BEGIN_SRC R
  image.name <- "NAIP"

  classified.tiles <- list.files(urb.path, recursive = T, full.names = T) %>%
      str_extract(.,     pattern = paste0(".*(",segmentation.pattern,")_",location,image.name,"_(", target.pattern,")_(", tuned.pattern, ")_(",model.pattern,").*.tif$")) %>%
      na.omit()

  rlist <- lapply(classified.tiles, stack)

  if(length(rlist) > 1) {
      out <- do.call(mosaic, c(rlist,list(fun = sample.with.na.rm, tolerance = 0.5)))
  } else {
      out <- rlist[[1]]
  }

  writeRaster(x = out, filename = paste0(urb.path,"_ClassifiedUrbanArea.tif"), overwrite = T, datatype = 'INT1U')

  paste0("Wrote ","ClassifiedUrbanArea_",i,".tif")


  rgbn.tiles <- list.files(urb.path, recursive = T, full.names = T) %>%
      str_extract(.,     pattern = ".*urbanExtent.tif") %>%
      na.omit()

  rlist <- lapply(rgbn.tiles, stack)

  if(length(rlist) > 1) {
  out <- do.call(mosaic, c(rlist,list(fun = mean, tolerance = 0.5)))
  } else {
      out <- rlist[[1]]
  }



  writeRaster(x = out, filename = paste0(urb.path,"_rgbn.tif"), overwrite = T)
  paste0("Wrote ","RGBN_",i,".tif")




#+END_SRC

#+results:
: [1] "Wrote ClassifiedUrbanArea_803.tif"
: [1] "Wrote RGBN_803.tif"

**** Delete intermediate steps
#+BEGIN_SRC R
  intermediate.work <- list.files(urb.path, full.names = T)
  intermediate.work <- intermediate.work[!grepl(intermediate.work,pattern = ".*(tif)$", perl = T)]
  unlink(intermediate.work, recursive = T)
  unlink(urb.path)
  unlink(temp_i, recursive = T)

#+END_SRC

#+results:

**** End if statement and Loop for all urban areas
#+BEGIN_SRC R
}
}
}
#+END_SRC

#+results:
: Error in e$fun(obj, substitute(ex), parent.frame(), e$data) :
:   worker initialization failed: Error in {: task 1 failed - "error in evaluating the argument 'x' in selecting a method for function 'raster': Error in if (test) { : argument is of length zero
: "
: Error: unexpected '}' in "}"
: Error: unexpected '}' in "}"


**** Mask Classified image, Post Processing
***** Mask Out Wetlands Post Processing
***** Mask out water
***** Mask out croplands
*** For the larger urban areas

#+begin_src R
#    higher.quant <- quantile(areas[,1],probs = .96)
    i_areas_high_quant <- which(areas[,1] >= high.quant)
#+end_src

#+results:

 #+BEGIN_SRC R
   out <- foreach(i = i_areas_high_quant[8:length(i_areas_high_quant)],
                 .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr","glcm")) %do% {

       urb.poly <- urb.polys[i]
#+END_SRC

 #+results:

**** Set temp dir for this urban area
This isn't working, raster is still creating Rtmp* directories in
/tmp.  Not sure if it's a problem though.

#+BEGIN_SRC R
temp_i <- paste0(R_raster_temp,"/",i)
dir.create(temp_i)
rasterOptions(tmpdir=temp_i)
#+END_SRC

#+results:
: Warning message:
: In dir.create(temp_i) : '../R_raster_temp/30' already exists

**** Make output dir for this urban area
#+BEGIN_SRC R
urb.path <- paste0(classified.urban.areas.dir, i)
dir.create(urb.path)
#+END_SRC

#+results:

**** Get names of NAIP tiles that intersect with Urban Area
#+BEGIN_SRC R

  tiles.in.urban <-  lapply(naip.extents, function(naip.extent) {
      inter <- raster::intersect(naip.extent, urb.poly)
      ifelse(is.null(inter), F, T)
  })

  tile.index <- which(unlist(tiles.in.urban))


  tiles.inter.urb.poly <- lapply(tile.index, function(i) {
      naip.extent <- as(naip.extents[[i]], "SpatialPolygons")
      proj4string(naip.extent) <- wtm
      inter <- gIntersects(naip.extent, urb.poly)
  })

  tile.index <- tile.index[which(unlist(tiles.inter.urb.poly))]

  tiles.names.at.urb.poly <- naip.tif.names[tile.index]

#+END_SRC

#+results:

**** For each NAIP tile that intersects with Urban Area
#+BEGIN_SRC R
       cl <- makeCluster(cores)
       registerDoParallel(cl)

     foreach(t.p = tiles.names.at.urb.poly,
                     .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr","glcm")) %dopar% {

#+END_SRC

***** Make output dir for this tile.  If intersection between urban area and naip tile is large, divide into 4
#+BEGIN_SRC R
      eu <- extent(urb.poly)
      ei <- extent(raster(t.p))
      e <- raster::intersect(ei,eu)


  area.intersection <- (xmax(e)-xmin(e))*(ymax(e)-ymin(e))
  area.tile <- (xmax(ei)-xmin(ei))*(ymax(ei)-ymin(ei))/2

  tile.name <- basename(t.p) %>%
      str_sub(start = 1, end = -5)  # remove .tif

  if (area.intersection > area.tile/3) {
      tile.urb.path.a <- paste0(urb.path,"/",tile.name,"_a")
      tile.urb.path.b <- paste0(urb.path,"/",tile.name,"_b")
      tile.urb.path.c <- paste0(urb.path,"/",tile.name,"_c")
      dir.create(tile.urb.path.a)
          dir.create(tile.urb.path.b)
          dir.create(tile.urb.path.c)
        message("make tile output dir", tile.urb.path.a, " and ", tile.urb.path.b, " and ", tile.urb.path.c)
    } else {
      tile.urb.path <- paste0(urb.path,"/",tile.name)
      dir.create(tile.urb.path)
        message("make tile output dir", tile.urb.path)
    }

#+END_SRC

***** Crop to intersection of image and Urban Extent

It would be better to only use one NAIP image if it contains the whole
urban area.  I'm including some tiles that don't add any extra
information because the urban extent only goes into the overlap area.
This causes thin slivers to be made which are unnecessary and cause
errors.  Also cause additional misregistration problems and funny
looking borders of objects because I decide disagreemnst randomlys.

Also some of the extents of the large tiles overlap with urban area,
but the images themselves don't.  THis creates intersection images
that are empty.

#+BEGIN_SRC R
                                          # Crop image
overlap <- 3
third.height <- ((ymax(e)-ymin(e))/3)

if (area.intersection > area.tile/3) {
  inFile <- t.p
  outFile <- str_c(tile.urb.path.a,"/urbanExtent.tif")

  gdal_translate(inFile, outFile,
                 projwin = c(xmin(e), ymax(e)-2*third.height+overlap, xmax(e), ymin(e)))


  outFile <- str_c(tile.urb.path.b,"/urbanExtent.tif")
  gdal_translate(inFile, outFile,
                 projwin = c(xmin(e), ymax(e)-third.height+overlap, xmax(e), ymin(e)+third.height-overlap))

  outFile <- str_c(tile.urb.path.c,"/urbanExtent.tif")
  gdal_translate(inFile, outFile,
                 projwin = c(xmin(e), ymax(e), xmax(e), ymin(e)+2*third.height-overlap))



  message("Crop to Urban Extent")
} else {
  inFile <- t.p
  outFile <- str_c(tile.urb.path,"/urbanExtent.tif")

  gdal_translate(inFile, outFile,
                 projwin = c(xmin(e), ymax(e), xmax(e), ymin(e)))


  message("Crop to Urban Extent")
}
#+END_SRC

#+results:
:  NULL
: Crop to Urban Extent

***** close foreach loop and close Connections
#+begin_src R
}

closeAllConnections()

#+end_src

#+results:
: Error in summary.connection(connection) : invalid connection

**** For each tile or half tile intersection in the urban area
#+begin_src R

tile.urb.paths <- list.files(urb.path, full.names = T)


       cl <- makeCluster(cores)
       registerDoParallel(cl)

     foreach(tile.urb.path = tile.urb.paths,
                     .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr","glcm")) %dopar% {

#+end_src

***** make sure the intersection image has datavalues

#+begin_src R
  r.test <- raster(paste0(tile.urb.path,"/urbanExtent.tif"))

  if (sum(!is.na(values(r.test))) > 500) {

#+end_src
***** Generate Feature data frame
#+begin_src R

feature.dfs <- make.feature.df(tile.dir = tile.urb.path,
                                 tile.name = "urbanExtent",
                                 image.name = "NAIP",
                                 band.names = c("blue","green","red","nir"),
                                 ndvi = T,
                                 ratio.bands = c("blue","green","red","nir"),
                                 texture.params.df = texture.params,
                                 pixel.df = F,
                                 pca.location = location,
                                 segmentation = T,
                                 segment.params.df = segment.params)

#+end_src
***** Delete intermediate files
#+begin_src R
    intermediate.work <- list.files(tile.urb.path, full.names = T, recursive = T)
    ratio.intermediate.work <- str_extract(intermediate.work, ".*_ratio.*")
    band.intermediate.work <- str_extract(intermediate.work, ".*_(red|blue|green|nir).*")
  unlink(c(ratio.intermediate.work, band.intermediate.work))

#+end_src

***** Classify
#+begin_src R

      model <- list.files(dd.models.dir) %>%
          str_extract("best_.*") %>% na.omit()

      seg.p <- str_extract(model, segmentation.pattern)

      if(grepl("N-[0-9]+_C-[0-9]+",seg.p)) {
          segment.tile.name.append <- paste0("_",seg.p,".tif")
          segment.feature.df.name.append <- paste0("_",seg.p,feature.df.appendage,".rds")

          classify.segmented.raster(segment.feature.df.dir = tile.urb.path,
                                    model.dir = dd.models.dir,
                                    segment.dir = tile.urb.path,
                                    classify.out.dir = tile.urb.path,
                                    tile.name = "urbanExtent",
                                    segmentation.appendage = segment.tile.name.append,
                                    model.name.rds = model,
                                    segment.feature.appendage = segment.feature.df.name.append,
                                    segmentation.prms = seg.p)

      } else {
          classify.pixel.raster(tile.dir = tile.urb.path,
                                tile.name = "urbanExtent",
                                pixelFeatureDF.appendage = feature.df.appendage,
                                model.dir = dd.models.dir,
                                model.rds = model,
                                classify.out.dir = tile.urb.path,
                                seg.prms = seg.p)
      }
      message("Image Classified")

      message("Done with",tile.urb.path)

}
}
  #+end_src

#+results:


**** Merge NAIP Tiles if there is more than one over an urban area and Save Classified image as <UrbanArea>.tif

***** TODO make the overlap between tiles very small.  Maybe just use "merge" Test on smaller cities first
Maybe I can get away with one tile simply taking over another, no
voting or random sampling.

#+BEGIN_SRC R
  image.name <- "NAIP"

  classified.tiles <- list.files(urb.path, recursive = T, full.names = T) %>%
      str_extract(.,     pattern = paste0(".*(",segmentation.pattern,")_",location,image.name,"_(", target.pattern,")_(", tuned.pattern, ")_(",model.pattern,").*.tif$")) %>%
      na.omit()

  rlist <- lapply(classified.tiles, stack)

  if(length(rlist) > 1) {
      out <- do.call(mosaic, c(rlist,list(fun = sample.with.na.rm, tolerance = 0.5)))
  } else {
      out <- rlist[[1]]
  }

  writeRaster(x = out, filename = paste0(urb.path,"_ClassifiedUrbanArea.tif"), overwrite = T, datatype = 'INT1U')

  message("Wrote ","ClassifiedUrbanArea_",i,".tif")


  rgbn.tiles <- list.files(urb.path, recursive = T, full.names = T) %>%
      str_extract(.,     pattern = ".*urbanExtent.tif") %>%
      na.omit()

  rlist <- lapply(rgbn.tiles, stack)

  if(length(rlist) > 1) {
  out <- do.call(mosaic, c(rlist,list(fun = mean, tolerance = 0.5)))
  } else {
      out <- rlist[[1]]
  }



  writeRaster(x = out, filename = paste0(urb.path,"_rgbn.tif"), overwrite = T)
  message("Wrote ","RGBN_",i,".tif")




#+END_SRC

#+results:
: [1] "Wrote ClassifiedUrbanArea_803.tif"
: [1] "Wrote RGBN_803.tif"


**** Delete intermediate steps
#+BEGIN_SRC R
  intermediate.work <- list.files(urb.path, full.names = T)
  intermediate.work <- intermediate.work[!grepl(intermediate.work,pattern = ".*(tif)$", perl = T)]
  unlink(intermediate.work, recursive = T)
  unlink(urb.path)
  unlink(temp_i, recursive = T)

#+END_SRC

#+results:

**** End if statement and Loop for all urban areas
#+BEGIN_SRC R
}
}
}
#+END_SRC


**** Mask Classified image, Post Processing
***** Mask Out Wetlands Post Processing
***** Mask out water
***** Mask out croplands

* Test Accuracy of Model in NE Wisconsin cities using itree canopy assessments as reference

** Questions:
1) What is the error rate of the classifier?
2) How does the estimate of canopy cover differ?

** inputs, also evaluate inputs for Classifying every urban area in WI
#+begin_src R
itree.dir <- "NE_WI_itree"

googCRS <- CRS("+init=epsg:4326")
#+end_src

#+results:

#+results:{{{results(==)}}}
** prep itree data, load, clean up, make spatial points
*** load data
#+begin_src R
it.files <- list.files(str_c(accuracy.dir, "/",itree.dir), full.names = T)
#+end_src

#+results:

*** combine csvs
#+begin_src R
      it.dat <- lapply(it.files, function(csv) {
          d <- read.csv(csv, stringsAsFactors = F)
          name <- str_match(csv, ".*itree/(.*)_canopy.*")[,2]
          d$city <- name
          return(d)
})
      it.dat <- bind_rows(it.dat)
#+end_src

#+results:

*** make cover "g", "i", "t", etc
#+begin_src R
fm <- unique(it.dat$Cover.Class)
to <- c("t","g","i","i","w","a","w","i","i","g","t","i","w","g","g","o","i","a","i","i","i","a","i","i","i")

  it.dat <- it.dat %>%
   mutate(itree.cover = mapvalues(Cover.Class, from = fm, to = to))
#str(it.dat)
#+end_src

#+results:

*** filter non "g", "i", "t" points
#+begin_src R
it.dat <- filter(it.dat, itree.cover == "g" |itree.cover == "i" | itree.cover == "t")
#+end_src

#+results:

*** make it.dat shapefile
#+begin_src R
it.sp <- it.dat
coordinates(it.sp) <- ~ Longitude + Latitude
proj4string(it.sp) <- googCRS
#+end_src

#+results:

*** transform to wtm
#+begin_src R
it.sp <- spTransform(it.sp, wtm)
#+end_src

#+results:

** Find the Classified Urban Areas that intersect with the points
*** load files
#+begin_src R
cl.files <- list.files(classified.urban.areas.dir, full.names = T)
#+end_src

#+results:
*** filter just classified.tifs
#+begin_src R
  cl.files <- str_extract(cl.files, ".*_ClassifiedUrbanArea.tif$") %>% na.omit
#+end_src

#+results:
*** load tifs and get extents
#+begin_src R

cl.ras <- lapply(cl.files, raster)
cl.ext <- lapply(cl.ras, extent)

#+end_src

#+results:
*** which tif intersect with extent of points
#+begin_src R
    b <- gBuffer(it.sp, width = 700)
#+end_src

#+results:

#+begin_src R
  int.bool <- lapply(cl.ext, function(cl.e) {
      o <- !is.null(raster::intersect(cl.e, it.sp))
      if (o == T) {
          cl.e <- as(cl.e, "SpatialPolygons")
          proj4string(cl.e) <- wtm
          o <- gIntersects(cl.e, b)
      }
      return(o)
  }) %>%
unlist

  cl.int.ras <- cl.ras[int.bool]
#+end_src

#+results:
** extract classification at points

#+begin_src R

extracted_cover <- foreach(cl.int.r = cl.int.ras, .combine = "cbind") %do% {
o <- raster::extract(cl.int.r, it.sp)
o
}

#+end_src

#+results:

#+begin_src R
      extr <- data.frame(extracted_cover)
  extr <- extr %>% mutate(index = 1:nrow(extr))
      extr <- extr[rowSums(is.na(extr)) != ncol(extr),]
    names(extr) <- c(unlist(lapply(cl.int.ras,names)),"index")

    extr.g <- gather(extr, key = tile.id, value = classified.cover, -index) %>%
      filter(!is.na(classified.cover)) %>%
      arrange(index)

  # for points that fall on more than one raster, remove duplicates

  extr <- extr.g %>% group_by(index) %>% sample_n(1)

#+end_src

#+results:
** combine with itree sp data
#+begin_src R

  it.sp@data$index <- 1:nrow(it.sp@data)
  acc <- left_join(it.sp@data, extr) %>%
    mutate(classified.cover = mapvalues(classified.cover, from = c(1,2,3), to = c("g","i","t"))) %>%
    filter(complete.cases(.))
#+end_src

#+results:
:  Joining, by = "index"

** Accuracy Table for all cities
#+begin_src R
 table(acc$classified.cover, acc$itree.cover)
#+end_src

#+results:
:
:       g   i   t
:   g 120  10  98
:   i  41 164   8
:   t  19   1  71

#+begin_src R
mean(acc$classified.cover == acc$itree.cover)
#+end_src

#+results:
: [1] 0.6672932

** Accuracy By City
#+begin_src R
  acc %>% group_by(city) %>% summarize(overall.acc = mean(classified.cover == itree.cover),
                                       n = n())
#+end_src

#+results:
:  # A tibble: 6 x 3
:              city overall.acc     n
:             <chr>       <dbl> <int>
: 1        Appleton   1.0000000     5
: 2 CityofMarinette   0.6673190   511
: 3          DePere   0.6666667     6
: 4       Green_Bay   1.0000000     4
: 5      Greenville   0.0000000     1
: 6         Shawano   0.2000000     5

** Compare estimates of tree cover for whole area
#+begin_src R
itree.tree.cover <- sum(acc$itree.cover == "t")/nrow(acc)
class.tree.cover <- sum(acc$classified.cover == "t")/nrow(acc)
itree.tree.cover
class.tree.cover
#+end_src

#+results:
: [1] 0.3327068
: [1] 0.1710526

