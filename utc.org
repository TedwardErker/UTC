#+TITLE: Wisconsin Urban Tree Canopy Mapping
#+AUTHOR: Tedward Erker
#+email: erker@wisc.edu
#+PROPERTY:  header-args:R :session *R:utc* :cache no :results output :tangle classifying_urban_WI.R :exports both :comments link
#+STARTUP: indent

* Begin with end in mind
** End Product:
A map of urban cover with associated model uncertainty.  For the
Madison Area.

A reproducible workflow to apply this to any city in WI (or perhaps
country) with minimal work from user.
** Automated workflow
I need to be able to run the whole script with one key stroke and get
a series of tables and figures that show the performance of the
classifiers.  Additionally (and more challenging) I need to be able to
easily add in
1) new training data
2) new features (esp additional texture layers and segmentations,
   possibly more moments than mean and sd in segments.)
3) new classifiers (more than just svm and rf)
4) new classes?


** Best Classifer
To make this map I need to find the best classifier to apply to the
maps.  To know the best classifier I need to perform an accuracy assessment.


npx = number of pixels in segmentation
cpt = compactness parameter

| Image       | Method | Pixel (Overall Accuracy) | Field Plot (RMSE) | Block (RMSE) |
|-------------+--------+--------------------------+-------------------+--------------|
| NAIP        | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             | SVM    |                          |                   |              |
|             | RF     |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
|             |        |                          |                   |              |
| PAN_SPOT... |        |                          |                   |              |




1) Classification:
Images x segmentation x classification method

2 x 3 x 2 = 12

1) Accuracy:
   1) Pointwise - confusion matrix
      1) google earth points (robi's points)
      2) google earth points (grid of points)
      3) Field plot points
   2) Plotwise
      1) google earth grids, changing area under consideration
      2) field plot, changing definition of tree

Pointwise - confusion matrix





** Directory Structure
*** Pjt_UTC
**** code
- contains this file
**** figs
**** DD
***** Training
****** Tiles
******* image.name_tile.id
******* image.name_tile.id_dir
******** with.ratios
******** PixelFeatureDF
******** pca
******** segmentation.params
******** segmentation.params.FeatureDF
****** image.name_reprojected.training.regions
****** image.name_pca.transformation
****** Models
***** Testing


***** NAIP.image
****** pca.model.transformation
****** reprojected.training.regions
****** reprojected.testing.regions
******* grid
******* field.data
****** reprojected.pca.regions
****** training.outputs
****** feature.dfs
******* pixel.feature.df
******* segment.X.feature.df
****** Models
****** testing.accuracy.outputs
******** grid.classified.regions
******** field.classified.regions
***** PansharpenedSPOT.image
****** pca.model.transformation
****** reprojected.training.regions
****** reprojected.testing.regions
******* grid
******* field.data
****** reprojected.pca.regions
****** training.outputs
****** feature.dfs
******* pixel.feature.df
******* segment.X.feature.df
****** Models
****** testing.accuracy.outputs
******** grid.classified.regions
******** field.classified.regions



**** RD_UrbanAreasShapefile
**** RD_WaterShapefile
**** RD_CroplandDataLayer

**** RD_Training_Regions
***** Madison
Shapefile that contains the regions from which I'll do
manual/supervised classification in the Madison Area
***** Wausau
Shapefile that contains the regions from which I'll do
manual/supervised classification in the Madison Area

**** RD_Accuracy
***** Grids
***** Field Plot
***** Robi's Points
**** RD_NAIP
**** RD_SPOT
**** DD_NAIP
***** Training
****** Madison
******* j directories for each polygon of the training shapefile
******** image : raw image that is cropped to tile
******** masked : image that is masked by water, crops, and urban boundary
******** AddedFeatures : image that has added derived bands
******** PCA : image that is the PCA results scaled to 0 - 255
******** Segmentation : image that is the segmentation layer
******** Segmentation Polygons: polygonized Segmentation Layer
******** SegmentFeatures : dataframe that has each row as segment, columns as features, Class from Segmentation Polygons added.
******** Classified Segmentation Polygons: polygonized Segmentation Layer with manual classifications
******* CombinedSegmentFeatures : dataframe that is combined
****** Wausau
Same as in Madison, but for Wausau

***** Testing
****** grids
******* i directories for each polygon of the grids
******** image : raw image that is cropped to tile
******** masked : image that is masked by water, crops, and urban boundary
******** AddedFeatures : image that has added derived bands
******** PCA : image that is the PCA results scaled to 0 - 255
******** Segmentation : image that is the segmentation layer
******** SegmentFeatures : dataframe that has each row as segment, columns as features.
******** ClassifiedImages : classified images that use each model
********* k classified images for each model

****** fieldplots
Same as for grids

***** Accuracy Assessment
****** Dataframe that summary statistics for each classification, accuracy method
****** Tables of Results


***** Models
R model objects
***** Best Model
R model object, determined by accuracy assessment
***** i directories for each urban area
****** image cropped to urban area .tif
****** j directories for each tile within each of the i urban areas
******* image : raw image that is cropped to tile
******* masked : image that is masked by water, crops, and urban boundary
******* AddedFeatures : image that has added derived bands
******* PCA : image that is the PCA results scaled to 0 - 255
******* Segmentation : image that is the segmentation layer
******* SegmentFeatures : dataframe that has each row as segment, columns as features
******* ClassifiedImage : classified image that uses the best model

**** DD_SPOT
Same structure as DD_NAIP








* Workflow
** Libraries
#+BEGIN_SRC R
  library(gdalUtils)
  library(ascii)
  library(rgeos)
  library(mlr)
  library(broom)
  library(rgdal)
  library(raster)
  library(plyr)
  library(ggplot2)
  library(dplyr)
  library(tidyr)
  library(stringr)
  library(foreach)
  library(doParallel)
  library(glcm)
  library(randomForest)
  library(kernlab)
  library(irace)
  library(parallelMap)
#+END_SRC

#+results:


** set figure Cairo
#+begin_src R :exports none :results silent
  library(Cairo)
  mainfont <- "Garamond"
  CairoFonts(regular = paste(mainfont,"style=Regular",sep=":"),
             bold = paste(mainfont,"style=Bold",sep=":"),
             italic = paste(mainfont,"style=Italic",sep=":"),
             bolditalic = paste(mainfont,"style=Bold Italic,BoldItalic",sep=":"))
  pdf <- CairoPDF
  png <- CairoPNG
#+end_src
** Inputs
**** Input Directories
#+BEGIN_SRC R
  image.names <- c("NAIP","PanshpSPOT")
  image.dirs <- paste0("../RD_",image.names)
  pca.dir <- "../RD_PCA_Regions"
  training.dir <- "../RD_Training_Regions"
  accuracy.dir <- "../RD_Accuracy"
  grids.accuracy.dir <- str_c(accuracy.dir, "/Grids")
  fieldplots.accuracy.dir<- str_c(accuracy.dir, "/FieldData")
  crop.dir <- "../RD_CroplandDataLayer"
  water.dir <- "../RD_WI-waterbody-24k"
  urban.dir <- "../RD_US_UrbanAreasShapefile"
  urban.and.incorporated.dir <- "../RD_merged_WIurbanAreas_and_incorporatedAreas"
#+END_SRC

#+results:

**** Variable Names and Paths
#+BEGIN_SRC R

  location = c("madison","wausau")
  image.paths <- paste0(image.dirs, "/", image.names, ".tif")

  ratio.appendage <- "_ratio"
  pca.appendage <- "_pca"
  model.appendage = "_model"

  feature.df.appendage <- "_featureDF"

  ModelBuilding.appendage = "_modelBuildingDF"

  tile.id.col.nm.for.grid.and.field.accuracy <- c("unq__ID", "Plot")
#+END_SRC

#+results:

**** Patterns
#+begin_src R
  grid.pattern = "[a-zA-Z]{3}\\.[0-9]+m\\.[0-9]+" #I removed "_" from end. <2016-07-02 Sat>
  texture.pattern = "stat-.*_window-.*_angle[-]+[0-9]+"
  segmentation.pattern = "_N-[0-9]+_C-[0-9]+"
  segmentation.pattern = "Pixel|_N-[0-9]+_C-[0-9]+"

     target.pattern = "all|grass|impervious|tree"


#+end_src

#+results:

**** Texture Params
#+begin_src R

    band.for.texture.appendage = "_ratio.nir"
    window <- list(c(3,3), c(5,5), c(7,7))
    statistics = list("homogeneity", "contrast", "correlation", "entropy")
    shift = list(c(0,1),c(1,0),c(1,1),c(-1,1))

    band.for.texture.appendage = "_ratio.nir"
    window <- list(c(3,3))
    statistics = list("homogeneity")
    shift = list(c(0,1))

    texture.params <- expand.grid(band.appendage = band.for.texture.appendage,window = window, statistics = statistics, shift = shift, stringsAsFactors = F)

#+end_src

#+results:

**** Segmentation Params
#+begin_src R
  segment.size <- c(rep(20,3),rep(30,3),rep(45,3),rep(60,3),rep(100,3))
  compactness <- round(segment.size * c(.3, .5, .6))

  ## segment.size <- c(rep(30,1), rep(100,1))
  ## compactness <- segment.size * c(.5)

segment.size <- 20
compactness <- 12

  segment.params <- data.frame(compactness = compactness, segment.size = segment.size)
#+end_src

#+results:

**** Input Shapefile DSNs and Layers
#+BEGIN_SRC R

  pca.region.dsn <- "../RD_PCA_Regions/"
  pca.region.layer.appendage <- "_PCA_regions"

  training.region.dsn <- "../RD_Training_Regions/"
  training.region.layer.appendage <- "_TrainingPolygons"

  grid.accuracy.region.dsn <- "../RD_Accuracy/Grids"
  grid.accuracy.region.layer <- "Grids"

  field.accuracy.region.dsn <- "../RD_Accuracy/FieldData"
  field.accuracy.region.layer <- "fieldPoints"

  accuracy.region.dsn <- c(grid.accuracy.region.dsn, field.accuracy.region.dsn)
  accuracy.region.layer <- c(grid.accuracy.region.layer, field.accuracy.region.layer)
#+END_SRC

#+results:

**** Derived Directories
#+BEGIN_SRC R
                                          # make derived data directory
  derived.dir <- "../DD"

  dd.training.dir <- str_c(derived.dir, "/",location,"_Training")

  dd.pca.dir <- str_c(derived.dir, "/",location,pca.appendage)

  dd.accuracy.dir <- str_c(derived.dir, "/",location,"_Accuracy")

  dd.models.dir <- paste0(derived.dir,"/",location,"_Models")

  dd.accuracy.classified.dir <- str_c(dd.accuracy.dir, "/ClassifiedTiles")

derived.dirs <- c(derived.dir, dd.training.dir, dd.pca.dir, dd.accuracy.dir, dd.models.dir, dd.accuracy.classified.dir)
#+END_SRC

#+results:

**** Make Derived Directories
#+BEGIN_SRC R

  sapply(derived.dirs, FUN = function(x) dir.create(x))

#+END_SRC

#+results:
#+begin_example

                                ../DD                 ../DD/madison_Training
                                 FALSE                                   TRUE
                 ../DD/wausau_Training                      ../DD/madison_pca
                                  TRUE                                   TRUE
                      ../DD/wausau_pca                 ../DD/madison_Accuracy
                                  TRUE                                   TRUE
                 ../DD/wausau_Accuracy                   ../DD/madison_Models
                                  TRUE                                   TRUE
                   ../DD/wausau_Models ../DD/madison_Accuracy/ClassifiedTiles
                                  TRUE                                   TRUE
 ../DD/wausau_Accuracy/ClassifiedTiles
                                  TRUE
Warning message:
In dir.create(x) : '../DD' already exists
#+end_example

**** Define Derived Shapefile DSNs and Layers
#+BEGIN_SRC R
  training.region.imageCRS.dsn <- str_c(derived.dir,"/reprojected.Training_Regions")

  pca.region.imageCRS.dsn <- str_c(derived.dir,"/reprojected.PCA_Regions")

  accuracy.region.imageCRS.dsn <- str_c(derived.dir,"/reprojected.Accuracy.Regions")


  lapply(training.region.imageCRS.dsn, FUN = function(x) dir.create(x))
  lapply(pca.region.imageCRS.dsn, FUN = function(x) dir.create(x))
  lapply(accuracy.region.imageCRS.dsn, FUN = function(x) dir.create(x))
#+END_SRC

#+results:
#+begin_example
[[1]]
[1] FALSE

Warning message:
In dir.create(x) : '../DD/reprojected.Training_Regions' already exists
[[1]]
[1] FALSE

Warning message:
In dir.create(x) : '../DD/reprojected.PCA_Regions' already exists
[[1]]
[1] FALSE

Warning message:
In dir.create(x) : '../DD/reprojected.Accuracy.Regions' already exists
#+end_example

**** number of cores
#+BEGIN_SRC R
  cores <- 14
cores <- detectCores()
#+END_SRC

#+results:

**** CRS
#+BEGIN_SRC R
  utm16 <- CRS("+init=epsg:32616")
  wtm <- CRS("+init=epsg:3071")
#+END_SRC

#+results:

**** ASCII
#+begin_src R
options(asciiType = "org")
#+end_src

#+results:

**** delete?
#+begin_src R :eval no
#  band.names.wRatios <- c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi")
#  pixel.feature.df.appendage = "_PixelFeatureDF"
#  segmentFeatureDF.appendage = "_SegmentFeatureDF.rds"
#  pca.model.name.appendage = "_pca.rds"
#     model.pattern = "rf_prob|rf_resp|svm_resp"  I shouldn't need this (I hope)
#     mad.grid.id.pattern = "mad.[0-9]+m.[0-9]+"
#     image.pattern = "[a-zA-Z]{5}[a-zA-Z]+"

#+end_src
** Functions
Load functions from utc/R/utc.org
[[file:utc/R/utc.org]]
** Determine how to make best classifier for Madison : image, segmentation, model, n.classes, target, and def truth
*** make pca transformation/rotation for slic segmentation algorithm.
**** read in pca model if it exists.  If I run this, don't run rest of pca code in this subtre
#+BEGIN_SRC R :eval no
  ## pca <- foreach(i = seq_along(image.names)) %do% {
  ##    readRDS(str_c(dd.pca.dir,"/madisonNAIP_pca.rds"))
  ## }
 #+END_SRC

#+results:

**** Reproject PCA Region Shapefile to Image
#+BEGIN_SRC R
  foreach(img.pth = image.paths) %do% {

         Reproject_Shapefile_to_Image_CRS(pca.region.dsn,
                                         pca.region.layer,
                                         img.pth,
                                         pca.region.imageCRS.dsn)
#+END_SRC

#+results:
:  Error in stack(image.path) (from #5) :
:   error in evaluating the argument 'x' in selecting a method for function 'stack': Error: object 'img.pth' not found

**** Crop image to create a smaller image around each of the polygons
#+BEGIN_SRC R :results none
       Crop_image_to_each_Shapefile_polygon(pca.region.imageCRS.dsn,
                                        pca.region.layer,
                                        img.pth,
                                        cores = cores,
                                        output.dir = dd.pca.dir)
}
#+END_SRC

**** Add Features (ratios and ndvi)
#+BEGIN_SRC R
         cl <- makeCluster(cores)
         registerDoParallel(cl)

          tile.names <- list.files(dd.pca.dir) %>%
              str_extract(., pattern = ".*[0-9]+.tif") %>%
                  str_extract(., pattern = ".*[0-9]+") %>%
                      na.omit()

         ratios <- foreach (j = tile.names,
                  .packages = c("raster","stringr")) %dopar% {
                      add.features(image.dir = dd.pca.dir,
                                   image.name = j,
                                   band.names = c("blue","green","red","nir"),
                                   ratio.bands = c("blue","green","red","nir"),
                                   texture = F)
                  }

      stopCluster(cl)
 #+END_SRC

#+results:

**** Create and Save PCA model/rotation
#+BEGIN_SRC R :results none
  pca <- foreach(img.nm = image.names) %do% {
              make.and.save.pca.transformation(image.dir = dd.pca.dir,
                                               image.name = img.nm)
  }
 #+END_SRC

*** Training
**** Make Training Tiles

#+BEGIN_SRC R :results none

  foreach(img.pth = image.paths[1]) %do% {

      Reproject_Shapefile_to_Image_CRS(training.region.dsn,
                                       training.region.layer,
                                       img.pth,
                                       training.region.imageCRS.dsn)

      Crop_image_to_each_Shapefile_polygon(training.region.imageCRS.dsn,
                                           training.region.layer,
                                           img.pth,
                                           cores = cores,
                                           output.dir = dd.training.dir)
}

#+END_SRC

**** Make Feature data frames, for Each Training Tile

 #+begin_src R :results silent
     cl <- makeCluster(cores)
     registerDoParallel(cl)

     pixel.added.features.raster.list <- foreach(img.nm = image.names[1]) %do% {

                                             #img.nm <- image.names[1]

         tile.names <- list.files(dd.training.dir) %>%
             str_extract(., pattern = str_c(img.nm,".[0-9]+.tif")) %>%
             str_extract(., pattern = str_c(img.nm,".[0-9]+")) %>%
             na.omit()

         foreach (i = tile.names,
                  .packages = c("glcm","raster","stringr","dplyr")) %dopar% {


         feature.dfs <- make.feature.df(image.dir = dd.training.dir,
                         image.name = i,
                         band.names = c("blue","green","red","nir"),
                         ndvi = T,
                         ratio.bands = c("blue","green","red","nir"),
                         texture.params.df = texture.params,
                         pixel.df = T,
                         pca.source.image.name = i,
                         segmentation = T,
                         segment.params.df = segment.params)

         }
         }
#+end_src

**** Combine Feature Dataframes
Pattern is image.name_Segmentation
#+BEGIN_SRC R :results none
  tile.dir <- dd.training.dir
  segmentation.layer.pattern
  segmentFeatureDF.appendage
  pixel.feature.df.appendage

    cl <- makeCluster(cores)
    registerDoParallel(cl)


  feature.dfs <- list.files(tile.dir, full.names = T) %>%
      str_extract(.,".*FeatureDF.rds") %>%
      na.omit()

  foreach(img.nm = image.names[1]) %do% {
      img.feature.dfs <- str_extract(feature.dfs, str_c(".*",img.nm,".*")) %>%
          na.omit()
      SegParams <- unique(str_extract(img.feature.dfs, segmentation.layer.pattern)) %>%
          na.omit()
      SegParams <- c("_Pixel", SegParams)



      foreach(seg.param.set = SegParams, .packages = c("dplyr","stringr")) %dopar% {
          img.seg.feature.dfs = str_extract(img.feature.dfs, str_c(".*",seg.param.set,".*")) %>%
              na.omit()
          dfs <- lapply(img.seg.feature.dfs, readRDS)
          combined.dfs <- bind_rows(dfs)
          saveRDS(combined.dfs, file = str_c(tile.dir, "/", img.nm, seg.param.set, FeatureDF.appendage))
      }
  }
#+END_SRC

**** Create Model Building Dataframes, assign Class to feature dfs
  1) Input
     - Segmentation Layer from the Training Regions
     - Classified Training Polygons for each image (NAIP and panSPOT)
  2) Operation
     - For Pixels, extract coordinates of pixels that are inside training polygons
       - columns: x,y,class
       - join to pixel feature df
     - For Segments
       - Determine which segments fall majority within training polygons
       - Assign segments the class of the training polygon
       - columns: segment id, class
       - join to segment df

  3) Output
     - Model Building Dataframes, 1 for each image and segmentation combination

#+BEGIN_SRC R :results none

    cl <- makeCluster(cores)
    registerDoParallel(cl)


    model.building.dfs <-  foreach(img.nm = image.names[1]) %do% {

        featureDF.files <- list.files(dd.training.dir) %>%
            str_extract(., str_c(img.nm,".*", FeatureDF.appendage,"$")) %>%
            na.omit()

        training.polygon.layer <- list.files(training.region.dsn) %>%
            str_extract(.,str_c(".*",img.nm, ".*")) %>%
            na.omit() %>%
            extract.name.from.path() %>%
            unique()

        training.polygons <- readOGR(dsn = training.region.dsn, layer = training.polygon.layer)

        foreach(feature.df.rds = featureDF.files, .packages = c("mlr","foreach","doParallel", "stringr", "raster","rgeos","dplyr","sp","tidyr")) %dopar% {

            feature.df <- readRDS(file = str_c(dd.training.dir,"/",feature.df.rds))

            if(complete.cases(str_extract(feature.df.rds, "Pixel"))) {
                model.building.df <- getPixel.Class.and.Coords.Within.Polygon(PixelFeatureDF = feature.df,
                                                                              training.sp = training.polygons)
                model.building.df <- model.building.df %>%
                    dplyr::select(-x, -y, -id)
                saveRDS(object = model.building.df, file = paste0(dd.training.dir,"/",img.nm,"_Pixel",ModelBuilding.appendage))
            }

            if(complete.cases(str_extract(feature.df.rds,   segmentation.layer.pattern))) {
                segment.parameters <- str_extract(feature.df.rds, segmentation.layer.pattern)
                model.building.df <- getSegment.class.and.features.Within.Polygon(SegmentFeatureDF = feature.df,
                    training.sp = training.polygons,
                    seg.tiles.dir = dd.training.dir,
                    seg.params = segment.parameters)
                saveRDS(model.building.df, file = str_c(dd.training.dir,"/",img.nm,segment.parameters,ModelBuilding.appendage))
            }
        }
    }

 #+END_SRC

**** Plot Model Building Dataframes?? Visualize discriminating features
#+begin_src R :exports results :results graphics :file ./figs/mod.df.check.png

    mod.df <- readRDS(paste0(dd.training.dir, "/",img.nm, segment.parameters, ModelBuilding.appendage))

    ggplot(mod.df, aes(color = factor(Class), y = ndvi_mean, x = red_sd)) + geom_point(alpha = .9)
#    ggplot(out, aes(color = factor(Class), y = ndvi_mean, x = red_sd)) + geom_point(alpha = .9)
#  ggplot(model.building.df, aes(color = factor(Class), y = ndvi_mean, x = red_sd)) + geom_point(alpha = .5)

#+end_src

#+begin_src R :exports results :results graphics :file ./figs/mod.df.pixel.check.png
  mod.df <- readRDS(paste0(dd.training.dir, "/",img.nm, "_Pixel", ModelBuilding.appendage))
  ggplot(mod.df, aes(color = factor(Class), y = ndvi, x = ratio.nir_stat.homogeneity_window.3_angle.0)) + geom_point(alpha = .5)
#+end_src

**** NEXT Create and SaveModels: REMOVE NAs for SVM pixel classification

***** untuned models
#+BEGIN_SRC R :results none
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  foreach(img.nm = image.names[1]) %do% {

              ModelBuildingRDSs <- list.files(dd.training.dir) %>%
                  str_extract(., str_c(img.nm,".*",ModelBuilding.appendage)) %>%
                  na.omit()

              foreach(ModelBuildingRDS = ModelBuildingRDSs,
          .packages = c("parallelMap","randomForest","kernlab","irace","mlr","stringr","dplyr","foreach","doParallel")) %dopar% {

                  Build.and.Save.models(dir = dd.training.dir,
                                        modelBuildingData = ModelBuildingRDS,
                                        models.dir = Models.dir,
                                        image.name = img.nm)
              }
          }
#+end_src
***** NEXT tuned models

for tuning see:
https://mlr-org.github.io/mlr-tutorial/release/html/nested_resampling/index.html

#+begin_src R :eval no
 Build.and.Save.Tuned.models <- function( dir = dd.training.dir,
                                    modelBuildingData = ModelBuildingRDS,
                                    models.dir = Models.dir,
                                    image.name){

      dat <- readRDS(paste0(dir,"/",modelBuildingData)) %>%
          as.data.frame()

      image.and.segmentation.stem = str_replace(modelBuildingData, ModelBuilding.appendage,"")

      names <- colnames(dat)
      names <- str_replace(names, "\\(",".")
      names <- str_replace(names, "\\)",".")
      names <- str_replace(names, "\\:",".")
      colnames(dat) <- names

                                          # Create Task
      utc.task <- makeClassifTask(id = image.name, data = dat, target = "Class")

                                          # make parameter set for tuning

      rf.ps <- makeParamSet(makeIntegerParam("ntree", lower = 1L, upper = 500L),
                            makeIntegerParam("mtry", lower = 1L, upper = 50L))

      svm.ps <- makeParamSet(makeNumericParam("C", lower = -12, upper = 12, trafo = function(x) 2^x),
                             makeDiscreteParam("kernel", values = c("vanilladot", "polydot", "rbfdot")),
                             makeNumericParam("sigma", lower = -12, upper = 12, trafo = function(x) 2^x,
                                              requires = quote(kernel == "rbfdot")),
                             makeIntegerParam("degree", lower = 2L, upper = 5L,
                                              requires = quote(kernel == "polydot")))

                                          # tune
                                          # inner

      ctrl = makeTuneControlIrace(maxExperiments = 200L)
      inner = makeResampleDesc("CV", iters = 2L)
      svm.lrn = makeTuneWrapper("classif.ksvm", resampling = inner, par.set = svm.ps, control = ctrl, show.info = T)
      rf.lrn = makeTuneWrapper("classif.randomForest", resampling = inner, par.set = rf.ps, control = ctrl, show.info = T)

                                          #outer
      lrnrs = list(svm.lrn, rf.lrn)
      outer = makeResampleDesc("CV", iters = 3L)

  #    parallelStartMulticore(cores)

      res = benchmark(lrnrs, utc.task, outer, measures = acc, show.info = FALSE)

  #   parallelStop()

      saveRDS(res, file = paste0(models.dir,"/",image.and.segmentation.stem, models.appendage))
  }



 #+END_SRC

**** Look at models

#+begin_src R :eval no
  df <- readRDS(paste0(dd.training.dir, "/madisonNAIP_N-30_C-15.ModelBuilding.rds"))
  mod <- readRDS(paste0(Models.dir, "/madisonNAIP_N-100_C-50.models.rds"))



  getBMRModels(mod)
  getBMRLearners(mod)
  getBMRPerformances(mod)
  getBMRTuneModults(mod, as.df = T)

  getBMRTuneModults(mod, as.df = T) %>%
      group_by(learner.id) %>%
      summarize_each(funs = "mean")


  mods<-getBMRModels(mod)



#+end_src

*** Testing/Accuracy
**** Make tiles at accuracy regions

make this i = 1:2 (or 1:3) to do all the accuracy regions

#+BEGIN_SRC R :results none

    foreach(i = 1) %do% {

      foreach(img.pth = image.paths[1]) %do% {

          Reproject_Shapefile_to_Image_CRS(accuracy.region.dsn[i],
                                           accuracy.region.layer[i],
                                           img.pth,
                                           accuracy.region.imageCRS.dsn)

          Crop_image_to_regions_around_points_nameBygrid(shapefile.dsn = accuracy.region.imageCRS.dsn,
                                                         shapefile.layer = accuracy.region.layer[i],
                                                         image.path = img.pth,
                                                         cores = cores,
                                                         output.dir = dd.accuracy.dir,
                                                         column.name = tile.id.col.nm.for.grid.and.field.accuracy[i])

      }
  }


#+END_SRC

**** Make Feature data frames, for each Accuracy Region tile

 #+begin_src R :results silent
   cl <- makeCluster(cores)
   registerDoParallel(cl)

   pixel.added.features.raster.list <- foreach(img.nm = image.names[1]) %do% {

                                           #img.nm <- image.names[1]

       tile.names <- list.files(dd.accuracy.dir) %>%
           str_match(., pattern = str_c("(",img.nm,".",grid.pattern,")(.tif)"))

       tile.names <- tile.names[,2] %>% na.omit()

       foreach (i = tile.names,
                .packages = c("glcm","raster","stringr","dplyr")) %dopar% {


                    feature.dfs <- make.feature.df(image.dir = dd.accuracy.dir,
                                                   image.name = i,
                                                   band.names = c("blue","green","red","nir"),
                                                   ndvi = T,
                                                   ratio.bands = c("blue","green","red","nir"),
                                                   texture.params.df = texture.params,
                                                   pixel.df = T,
                                                   pca.source.image.name = i,
                                                   segmentation = T,
                                                  segment.params.df = segment.params)

                }
   }

#+end_src

**** Classify Tiles at accuracy regions

#+BEGIN_SRC R :results non
   cl <- makeCluster(cores)
   registerDoParallel(cl)


   classified.grid.tiles <-
       foreach(img.nm = image.names[1]) %do% {

           models <- list.files(Models.dir) %>%
               str_extract(., str_c(".*",img.nm,".*")) %>%
               na.omit()

           tile.names <- list.files(dd.accuracy.dir) %>%
               str_match(., pattern = str_c("(",img.nm,".*?)_.*\\.tif$"))

           tile.names <- tile.names[,2] %>% na.omit() %>% unique()


           foreach(tile.nm = tile.names,
                   .packages = c("plyr","dplyr","raster","stringr","mlr","foreach","doParallel")) %dopar% {

               foreach(model = models) %do% {

                   segmentation.params <- str_extract(model, "N-[0-9]+_C-[0-9]+|Pixel")

                   if(grepl("N-[0-9]+_C-[0-9]+",segmentation.params)) {
                          segment.tile.name.append <- paste0("_",segmentation.params,".tif")
                          segment.feature.df.name.append <- paste0("_",segmentation.params,segmentFeatureDF.appendage)


                          classify.segmented.raster(segment.feature.df.dir = dd.accuracy.dir,
                                          model.dir = Models.dir,
                                          segment.dir = dd.accuracy.dir,
                                          classify.out.dir = dd.accuracy.dir,
                                          tile.name = tile.nm,
                                          segmentation.appendage = segment.tile.name.append,
                                          model.name.rds = model,
                                          segment.feature.appendage = segment.feature.df.name.append,
                                          segmentation.prms = segmentation.params)

                   } else {
                       classify.pixel.raster(tile.dir = dd.accuracy.dir,
                                             tile.name = tile.nm,
                                             pixelFeatureDF.appendage = pixel.feature.df.appendage,
                                             model.dir = Models.dir,
                                             model.rds = model,
                                             seg.prms = segmentation.params)
                   }
               }
           }
       }


  stopCluster(cl)




#+END_SRC

#+results:
:  Error in { :
:   task 1 failed - "task 1 failed - "task 1 failed - "cannot open the connection"""




**** Point-wise accuracy.  regular confusion matrix thing.  I should do this for the grids and the field plot data
#+BEGIN_SRC R
      grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer, stringsAsFactors = F)

      xy <- coordinates(grd)
      grd@data$x <- xy[,1]
      grd@data$y <- xy[,2]

  classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
      str_extract(., pattern = ".*.tif$") %>%
          str_extract(., pattern = str_c(".*",grid.pattern, ".*")) %>%
          na.omit()


  grid.names <- classified.tile.paths %>%
      str_match(., paste0(".*(",grid.pattern,").*"))

  grid.names <- grid.names[,2] %>%
      unique() %>%
      na.omit()

  ## grid.name = str_extract(grid.names, ".*150m-[56].*") %>% na.omit()



      cl <- makeCluster(cores)
      registerDoParallel(cl)


      error.df <- foreach(grid.name = grid.names, .combine = "rbind") %do% {

          pts <- grd[grd@data$unq__ID== grid.name,]

          classified.tile.paths.at.grid <- str_extract(classified.tile.paths, str_c(".*",grid.name,"_.*")) %>%
              na.omit()

          ## classified.tile.paths.at.grid2 = classified.tile.paths.at.grid %>%
          ##      str_extract(., ".*madisonNAIP.*N-105.*svm_.*") %>%
          ##      na.omit()

  #         classified.tile.path.at.grid = classified.tile.paths.at.grid[1]



          foreach(classified.tile.path.at.grid = classified.tile.paths.at.grid,
                  .combine = "rbind",
                  .packages = c("plyr","raster","dplyr", "stringr","ggplot2")) %dopar% {

                      classified.tile.name.at.grid <- basename(classified.tile.path.at.grid)
                      classified.tile <- raster(classified.tile.path.at.grid)

                      tgt <- str_extract(classified.tile.name.at.grid, "tree|grass|impervious|all")
                      tgt <- mapvalues(tgt, c("tree","grass","impervious","all"), c("t","g","i","a"))

                     ##  png(str_c("figs/","ClassifiedVersusGrid","/",names(classified.tile),".png"))
                     ## print(pts.on.classified.tile.plot(pts, classified.tile, target = tgt))
                     ## dev.off()

                      PixBool <- !is.na((str_extract(classified.tile.path.at.grid, "_Pixel_")))

                      if(!is.na(str_extract(classified.tile.path.at.grid, "_all_"))) {
                          error <- calcErrorAllMultinomial(pts, classified.tile, Pixel = PixBool)
                          error <- error %>%
                              t() %>%
                              data.frame() %>%
                              mutate(grid = grid.name,
                                     image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                     target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                     model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                     seg.params = str_extract(classified.tile.name.at.grid, seg.prms))
                          error
                      } else {
                          target = str_extract(classified.tile.name.at.grid, "tree|grass|impervious")
                          target <- mapvalues(target, c("tree","grass","impervious"), c("t","g","i"))
                          error <- calcErrorBinomial(pts, classified.tile, target, Pixel = PixBool)
                          error <- error %>%
                              t() %>%
                              data.frame() %>%
                              mutate(grid = grid.name,
                                     image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                     target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                     model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                     seg.params = str_extract(classified.tile.name.at.grid, seg.prms))

                          error
                      }
                  }
      }



      saveRDS(error.df, str_c(derived.dir, "/point2pixel.error.df.rds"))

#+END_SRC

#+results:
#+begin_example
OGR data source with driver: ESRI Shapefile
Source: "../RD_Accuracy/Grids", layer: "All_Grids_Accuracy_Assessment_Added_pts"
with 20209 features
It has 15 fields
Warning: closing unused connection 30 (<-localhost:11963)
Warning: closing unused connection 29 (<-localhost:11963)
Warning: closing unused connection 28 (<-localhost:11963)
Warning: closing unused connection 27 (<-localhost:11963)
Warning: closing unused connection 26 (<-localhost:11963)
Warning: closing unused connection 25 (<-localhost:11963)
Warning: closing unused connection 24 (<-localhost:11963)
Warning: closing unused connection 23 (<-localhost:11963)
Warning: closing unused connection 22 (<-localhost:11963)
Warning: closing unused connection 21 (<-localhost:11963)
Warning: closing unused connection 20 (<-localhost:11963)
Warning: closing unused connection 19 (<-localhost:11963)
Warning: closing unused connection 18 (<-localhost:11963)
Warning: closing unused connection 17 (<-localhost:11963)
Warning: closing unused connection 56 (<-localhost:11963)
Warning: closing unused connection 55 (<-localhost:11963)
Warning: closing unused connection 54 (<-localhost:11963)
Warning: closing unused connection 53 (<-localhost:11963)
Warning: closing unused connection 52 (<-localhost:11963)
Warning: closing unused connection 51 (<-localhost:11963)
Warning: closing unused connection 50 (<-localhost:11963)
Warning: closing unused connection 49 (<-localhost:11963)
Warning: closing unused connection 48 (<-localhost:11963)
Warning: closing unused connection 47 (<-localhost:11963)
Warning: closing unused connection 46 (<-localhost:11963)
Warning: closing unused connection 45 (<-localhost:11963)
Warning: closing unused connection 44 (<-localhost:11963)
Warning: closing unused connection 43 (<-localhost:11963)
Warning: closing unused connection 16 (<-localhost:11963)
Warning: closing unused connection 15 (<-localhost:11963)
Warning: closing unused connection 14 (<-localhost:11963)
Warning: closing unused connection 13 (<-localhost:11963)
Warning: closing unused connection 12 (<-localhost:11963)
Warning: closing unused connection 11 (<-localhost:11963)
Warning: closing unused connection 10 (<-localhost:11963)
Warning: closing unused connection 9 (<-localhost:11963)
Warning: closing unused connection 8 (<-localhost:11963)
Warning: closing unused connection 7 (<-localhost:11963)
Warning: closing unused connection 6 (<-localhost:11963)
Warning: closing unused connection 5 (<-localhost:11963)
Warning: closing unused connection 4 (<-localhost:11963)
Warning: closing unused connection 3 (<-localhost:11963)
#+end_example


*** Summarize Accuracy Assessment Results

Comparing classification to other estimates of cover.
#+begin_src R :results none
      error.df <- readRDS(str_c(derived.dir, "/point2pixel.error.df.rds"))

      error.df %>%
          arrange(overall.error) %>%
          head()

      error.df %>%
          arrange(desc(overall.error)) %>%
          head()

      error.df %>%
          filter(seg.params != "Pixel") %>%
          arrange(desc(overall.error)) %>%
          head()

  error.df <- error.df %>%
      mutate(segment.size = as.numeric(ifelse(!is.na(str_match(seg.params, "N-([0-9]+)_C-[0-9]+")[,2]), str_match(seg.params, "N-([0-9]+)_C-[0-9]+")[,2], 1)),
             segment.size = ifelse(image == "panshpSPOT", segment.size * 1.5, segment.size),
             compactness = as.numeric(str_match(seg.params, "N-[0-9]+_C-([0-9]+)")[,2]))

#+end_src

**** Random Points

***** Table showing performance of classifiers
#+begin_src R

#+end_src
***** Plots showing how image, segment size, compactness, and model affect accuracy

**** Field Data

**** Grid of Points

***** load grid.points
#+begin_src R
  grid.points <- readOGR(dsn = "../DD/reprojected.Accuracy.Regions",
                         layer = "madisonNAIP_All_Grids_Accuracy_Assessment_Added_pts")

#+end_src

#+results:
:  OGR data source with driver: ESRI Shapefile
: Source: "../DD/reprojected.Accuracy.Regions", layer: "madisonNAIP_All_Grids_Accuracy_Assessment_Added_pts"
: with 20209 features
: It has 15 fields

***** Plots of 20 best classified grids with points superimposed
For each grid, find the best classification.  Plot best 20 grids.
#+begin_src R :results raw
    best.classified.grids <- error.df %>%
        ungroup() %>%
        group_by(grid) %>%
        top_n(1, desc(overall.error)) %>%
        ungroup() %>%
        arrange(overall.error) %>%
        select(overall.error, grid,image, target.cover, model, seg.params) %>%
        mutate(path = paste0(dd.accuracy.dir,"/",ClassifiedTilesDirName,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif")) %>%
        head(n = 20)

options(warn = -1)
  best.classified.grids %>% ascii
options(warn = 1)
#+end_src

#+results:
|    | overall.error | grid        | image       | target.cover | model    | seg.params | path                                                                                          |
|----+---------------+-------------+-------------+--------------+----------+------------+-----------------------------------------------------------------------------------------------|
|  1 |          0.00 | mad.50m.2   | madisonNAIP | all          | rf_prob  | N-60_C-30  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-60_C-30_madisonNAIP_all_rf_prob.tif    |
|  2 |          0.02 | mad.50m.5   | madisonNAIP | all          | svm_resp | N-60_C-36  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-60_C-36_madisonNAIP_all_svm_resp.tif   |
|  3 |          0.02 | mad.100m.12 | madisonNAIP | all          | rf_prob  | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
|  4 |          0.02 | mad.100m.12 | madisonNAIP | all          | rf_prob  | N-30_C-18  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-30_C-18_madisonNAIP_all_rf_prob.tif  |
|  5 |          0.03 | mad.100m.23 | madisonNAIP | all          | rf_prob  | N-60_C-30  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-60_C-30_madisonNAIP_all_rf_prob.tif  |
|  6 |          0.03 | mad.150m.9  | madisonNAIP | all          | rf_prob  | N-30_C-18  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-30_C-18_madisonNAIP_all_rf_prob.tif   |
|  7 |          0.04 | mad.100m.13 | madisonNAIP | all          | rf_prob  | Pixel      | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_Pixel_madisonNAIP_all_rf_prob.tif      |
|  8 |          0.04 | mad.100m.27 | madisonNAIP | all          | rf_prob  | N-100_C-30 | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-100_C-30_madisonNAIP_all_rf_prob.tif |
|  9 |          0.06 | mad.150m.5  | madisonNAIP | all          | rf_prob  | Pixel      | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_Pixel_madisonNAIP_all_rf_prob.tif       |
| 10 |          0.07 | mad.200m.2  | madisonNAIP | all          | rf_prob  | N-60_C-36  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 11 |          0.07 | mad.100m.28 | madisonNAIP | all          | rf_prob  | N-100_C-30 | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-100_C-30_madisonNAIP_all_rf_prob.tif |
| 12 |          0.07 | mad.100m.28 | madisonNAIP | all          | rf_prob  | N-45_C-22  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-45_C-22_madisonNAIP_all_rf_prob.tif  |
| 13 |          0.08 | mad.100m.4  | madisonNAIP | all          | rf_prob  | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 14 |          0.08 | mad.100m.1  | madisonNAIP | all          | rf_prob  | N-100_C-50 | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-100_C-50_madisonNAIP_all_rf_prob.tif  |
| 15 |          0.08 | mad.200m.5  | madisonNAIP | all          | rf_prob  | N-60_C-36  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-60_C-36_madisonNAIP_all_rf_prob.tif   |
| 16 |          0.08 | mad.100m.3  | madisonNAIP | all          | rf_prob  | Pixel      | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_Pixel_madisonNAIP_all_rf_prob.tif       |
| 17 |          0.13 | mad.200m.4  | madisonNAIP | all          | rf_prob  | N-60_C-30  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-60_C-30_madisonNAIP_all_rf_prob.tif   |
| 18 |          0.14 | mad.100m.21 | madisonNAIP | all          | rf_prob  | N-30_C-9   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-30_C-9_madisonNAIP_all_rf_prob.tif   |
| 19 |          0.16 | mad.200m.1  | madisonNAIP | all          | svm_resp | N-30_C-18  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-30_C-18_madisonNAIP_all_svm_resp.tif  |
| 20 |          0.16 | mad.100m.11 | madisonNAIP | all          | rf_prob  | N-20_C-10  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-20_C-10_madisonNAIP_all_rf_prob.tif  |


#+begin_src R :results none

  lapply(1:nrow(best.classified.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = best.classified.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = best.classified.grids$path[i],
                                           fig.dir = "figs/bestgrids",
                                           target = "a")
  })

  ## plts <- lapply(best.classified.grids$path, function(path) {
  ##   grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##   points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##   points@data <- points@data %>%
  ##       mutate(x = coordinates(points)[,1],
  ##              y = coordinates(points)[,2])
  ##   ras <- raster(path)
  ##   pts.on.classified.tile.plot(fig.dir = "figs/bestgrids",points, ras, target = "a")
  ## })

  #+end_src

#+BEGIN_SRC R :results raw :eval no

best.grid.paths <- list.files("figs/bestgrids", full.names = T)

a <- sapply(best.grid.paths, function(x) message("[[file:",x,"]]"))

#+END_SRC

***** NEXT Plots of 20 worst classified grids with points superimposed.  NONE SHOULD BE >50% wrong!
For each grid, find the worst classification.  Plot worst 20 grids.
#+begin_src R :results raw
      worst.classified.grids <- error.df %>%
          ungroup() %>%
          group_by(grid) %>%
          top_n(1, overall.error) %>%
          ungroup() %>%
          arrange(desc(overall.error)) %>%
          select(overall.error, grid,image, target.cover, model, seg.params) %>%
          mutate(path = paste0(dd.accuracy.dir,"/",ClassifiedTilesDirName,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif")) %>%
          head(n = 20)

  options(warn = -1)
    worst.classified.grids %>% ascii
  options(warn = 1)
#+end_src

#+results:
|    | overall.error | grid        | image       | target.cover | model    | seg.params | path                                                                                           |
|----+---------------+-------------+-------------+--------------+----------+------------+------------------------------------------------------------------------------------------------|
|  1 |          0.58 | mad.100m.9  | madisonNAIP | all          | svm_resp | N-20_C-10  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-10_madisonNAIP_all_svm_resp.tif   |
|  2 |          0.53 | mad.100m.16 | madisonNAIP | all          | svm_resp | Pixel      | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_Pixel_madisonNAIP_all_svm_resp.tif      |
|  3 |          0.51 | mad.50m.3   | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-20_C-6_madisonNAIP_all_svm_resp.tif     |
|  4 |          0.50 | mad.150m.6  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-6_madisonNAIP_all_svm_resp.tif    |
|  5 |          0.48 | mad.100m.17 | madisonNAIP | all          | svm_resp | N-20_C-10  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-20_C-10_madisonNAIP_all_svm_resp.tif  |
|  6 |          0.47 | mad.50m.1   | madisonNAIP | all          | svm_resp | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-20_C-12_madisonNAIP_all_svm_resp.tif    |
|  7 |          0.47 | mad.100m.22 | madisonNAIP | all          | svm_resp | N-100_C-30 | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-100_C-30_madisonNAIP_all_svm_resp.tif |
|  8 |          0.42 | mad.150m.4  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-20_C-6_madisonNAIP_all_svm_resp.tif    |
|  9 |          0.42 | mad.100m.30 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-20_C-6_madisonNAIP_all_svm_resp.tif   |
| 10 |          0.41 | mad.100m.5  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-20_C-6_madisonNAIP_all_svm_resp.tif    |
| 11 |          0.39 | mad.100m.20 | madisonNAIP | all          | svm_resp | N-20_C-10  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-20_C-10_madisonNAIP_all_svm_resp.tif  |
| 12 |          0.39 | mad.100m.6  | madisonNAIP | all          | svm_resp | N-100_C-50 | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-100_C-50_madisonNAIP_all_svm_resp.tif  |
| 13 |          0.39 | mad.150m.8  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-6_madisonNAIP_all_svm_resp.tif    |
| 14 |          0.38 | mad.150m.2  | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-20_C-6_madisonNAIP_all_svm_resp.tif    |
| 15 |          0.38 | mad.100m.29 | madisonNAIP | all          | svm_resp | N-30_C-15  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-30_C-15_madisonNAIP_all_svm_resp.tif  |
| 16 |          0.38 | mad.150m.10 | madisonNAIP | all          | svm_resp | N-20_C-6   | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-20_C-6_madisonNAIP_all_svm_resp.tif   |
| 17 |          0.37 | mad.150m.1  | madisonNAIP | all          | svm_resp | N-100_C-60 | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-100_C-60_madisonNAIP_all_svm_resp.tif  |
| 18 |          0.37 | mad.150m.1  | madisonNAIP | all          | svm_resp | N-60_C-18  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-60_C-18_madisonNAIP_all_svm_resp.tif   |
| 19 |          0.37 | mad.150m.7  | madisonNAIP | all          | rf_prob  | Pixel      | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_Pixel_madisonNAIP_all_rf_prob.tif        |
| 20 |          0.36 | mad.100m.24 | madisonNAIP | all          | svm_resp | N-60_C-18  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-60_C-18_madisonNAIP_all_svm_resp.tif  |

#+begin_src R

  lapply(1:nrow(worst.classified.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = worst.classified.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = worst.classified.grids$path[i],
                                           fig.dir = "figs/worstgrids",
                                           target = "a")
  })



  ## plts <- lapply(worst.classified.grids$path, function(path) {
  ##   grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##   points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##   points@data <- points@data %>%
  ##       mutate(x = coordinates(points)[,1],
  ##              y = coordinates(points)[,2])
  ##   ras <- raster(path)
  ##   pts.on.classified.tile.plot(fig.dir = "figs/worstgrids",points, ras, target = "a")
  ## })

  #+end_src

#+results:
#+begin_example
 Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 878 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 399 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 659 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 642 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 372 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 700 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 594 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 737 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 703 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 516 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 693 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 264 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 669 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 42 rows containing missing values (geom_raster).
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning in dir.create(fig.dir) : 'figs/worstgrids' already exists
Warning: Removed 33 rows containing missing values (geom_raster).
[[1]]
png
  2

[[2]]
png
  2

[[3]]
png
  2

[[4]]
png
  2

[[5]]
png
  2

[[6]]
png
  2

[[7]]
png
  2

[[8]]
png
  2

[[9]]
png
  2

[[10]]
png
  2

[[11]]
png
  2

[[12]]
png
  2

[[13]]
png
  2

[[14]]
png
  2

[[15]]
png
  2

[[16]]
png
  2

[[17]]
png
  2

[[18]]
png
  2

[[19]]
png
  2

[[20]]
png
  2
#+end_example

#+BEGIN_SRC R :results raw :eval no

worst.grid.paths <- list.files("figs/worstgrids", full.names = T)

a <- sapply(worst.grid.paths, function(x) message("[[file:",x,"]]"))

#+END_SRC


***** Table showing performace of classifiers, average over all grids, increasing accuracy
#+begin_src R :results raw
    error.df.avg.class <- error.df %>%
        select(-grid) %>%
        group_by(image, target.cover, model, seg.params, segment.size, compactness) %>%
        summarize_each(funs(mean(.,na.rm = T))) %>%
        ungroup() %>%
        arrange(overall.error)


  options(warn = -1)
    error.df.avg.class %>% ascii
  options(warn = 1)
#+end_src

#+results:
|    | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|----+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
|  1 | madisonNAIP | all          | rf_prob  | N-20_C-12  |        20.00 |       12.00 |          0.19 |                          0.45 |                               0.25 |                         0.21 |
|  2 | madisonNAIP | all          | rf_prob  | N-45_C-22  |        45.00 |       22.00 |          0.19 |                          0.45 |                               0.26 |                         0.20 |
|  3 | madisonNAIP | all          | rf_prob  | N-60_C-36  |        60.00 |       36.00 |          0.19 |                          0.44 |                               0.26 |                         0.21 |
|  4 | madisonNAIP | all          | rf_prob  | N-45_C-14  |        45.00 |       14.00 |          0.19 |                          0.44 |                               0.26 |                         0.24 |
|  5 | madisonNAIP | all          | rf_prob  | N-45_C-27  |        45.00 |       27.00 |          0.19 |                          0.46 |                               0.26 |                         0.20 |
|  6 | madisonNAIP | all          | rf_prob  | N-20_C-10  |        20.00 |       10.00 |          0.20 |                          0.45 |                               0.26 |                         0.20 |
|  7 | madisonNAIP | all          | rf_prob  | N-30_C-18  |        30.00 |       18.00 |          0.20 |                          0.42 |                               0.26 |                         0.22 |
|  8 | madisonNAIP | all          | rf_prob  | N-60_C-30  |        60.00 |       30.00 |          0.20 |                          0.50 |                               0.26 |                         0.18 |
|  9 | madisonNAIP | all          | rf_prob  | N-30_C-15  |        30.00 |       15.00 |          0.20 |                          0.45 |                               0.26 |                         0.21 |
| 10 | madisonNAIP | all          | rf_prob  | N-20_C-6   |        20.00 |        6.00 |          0.20 |                          0.47 |                               0.27 |                         0.23 |
| 11 | madisonNAIP | all          | rf_prob  | N-100_C-60 |       100.00 |       60.00 |          0.20 |                          0.40 |                               0.27 |                         0.26 |
| 12 | madisonNAIP | all          | rf_prob  | N-30_C-9   |        30.00 |        9.00 |          0.20 |                          0.44 |                               0.26 |                         0.25 |
| 13 | madisonNAIP | all          | rf_prob  | N-100_C-50 |       100.00 |       50.00 |          0.20 |                          0.40 |                               0.27 |                         0.25 |
| 14 | madisonNAIP | all          | rf_prob  | N-60_C-18  |        60.00 |       18.00 |          0.20 |                          0.47 |                               0.24 |                         0.24 |
| 15 | madisonNAIP | all          | rf_prob  | N-100_C-30 |       100.00 |       30.00 |          0.20 |                          0.49 |                               0.27 |                         0.20 |
| 16 | madisonNAIP | all          | rf_prob  | Pixel      |         1.00 |             |          0.22 |                          0.52 |                               0.22 |                         0.19 |
| 17 | madisonNAIP | all          | svm_resp | N-45_C-27  |        45.00 |       27.00 |          0.22 |                          0.54 |                               0.24 |                         0.23 |
| 18 | madisonNAIP | all          | svm_resp | N-60_C-36  |        60.00 |       36.00 |          0.22 |                          0.55 |                               0.26 |                         0.22 |
| 19 | madisonNAIP | all          | svm_resp | N-60_C-30  |        60.00 |       30.00 |          0.22 |                          0.57 |                               0.25 |                         0.22 |
| 20 | madisonNAIP | all          | svm_resp | N-45_C-22  |        45.00 |       22.00 |          0.23 |                          0.56 |                               0.25 |                         0.23 |
| 21 | madisonNAIP | all          | svm_resp | N-45_C-14  |        45.00 |       14.00 |          0.23 |                          0.58 |                               0.17 |                         0.34 |
| 22 | madisonNAIP | all          | svm_resp | N-30_C-18  |        30.00 |       18.00 |          0.23 |                          0.54 |                               0.26 |                         0.23 |
| 23 | madisonNAIP | all          | svm_resp | Pixel      |         1.00 |             |          0.23 |                          0.56 |                               0.13 |                         0.31 |
| 24 | madisonNAIP | all          | svm_resp | N-30_C-15  |        30.00 |       15.00 |          0.23 |                          0.55 |                               0.25 |                         0.24 |
| 25 | madisonNAIP | all          | svm_resp | N-30_C-9   |        30.00 |        9.00 |          0.23 |                          0.56 |                               0.24 |                         0.27 |
| 26 | madisonNAIP | all          | svm_resp | N-100_C-30 |       100.00 |       30.00 |          0.23 |                          0.56 |                               0.25 |                         0.26 |
| 27 | madisonNAIP | all          | svm_resp | N-100_C-60 |       100.00 |       60.00 |          0.23 |                          0.55 |                               0.24 |                         0.28 |
| 28 | madisonNAIP | all          | svm_resp | N-100_C-50 |       100.00 |       50.00 |          0.23 |                          0.55 |                               0.25 |                         0.27 |
| 29 | madisonNAIP | all          | svm_resp | N-60_C-18  |        60.00 |       18.00 |          0.24 |                          0.54 |                               0.20 |                         0.38 |
| 30 | madisonNAIP | all          | svm_resp | N-20_C-12  |        20.00 |       12.00 |          0.26 |                          0.55 |                               0.43 |                         0.13 |
| 31 | madisonNAIP | all          | svm_resp | N-20_C-10  |        20.00 |       10.00 |          0.27 |                          0.57 |                               0.45 |                         0.11 |
| 32 | madisonNAIP | all          | svm_resp | N-20_C-6   |        20.00 |        6.00 |          0.28 |                          0.57 |                               0.48 |                         0.12 |



|    | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|----+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
|  1 | madisonNAIP | all          | rf_prob  | Pixel      |         1.00 |             |          0.22 |                          0.52 |                               0.22 |                         0.19 |
|  2 | madisonNAIP | all          | svm_resp | Pixel      |         1.00 |             |          0.23 |                          0.57 |                               0.14 |                         0.30 |
|  3 | madisonNAIP | all          | rf_prob  | N-30_C-18  |        30.00 |       18.00 |          0.24 |                          0.46 |                               0.32 |                         0.24 |
|  4 | madisonNAIP | all          | rf_prob  | N-45_C-22  |        45.00 |       22.00 |          0.24 |                          0.46 |                               0.30 |                         0.24 |
|  5 | madisonNAIP | all          | rf_prob  | N-100_C-50 |       100.00 |       50.00 |          0.24 |                          0.41 |                               0.30 |                         0.29 |
|  6 | madisonNAIP | all          | rf_prob  | N-20_C-6   |        20.00 |        6.00 |          0.24 |                          0.53 |                               0.40 |                         0.25 |
|  7 | madisonNAIP | all          | rf_prob  | N-20_C-12  |        20.00 |       12.00 |          0.24 |                          0.52 |                               0.36 |                         0.23 |
|  8 | madisonNAIP | all          | rf_prob  | N-100_C-60 |       100.00 |       60.00 |          0.26 |                          0.41 |                               0.28 |                         0.32 |
|  9 | madisonNAIP | all          | rf_prob  | N-30_C-15  |        30.00 |       15.00 |          0.28 |                          0.46 |                               0.33 |                         0.26 |
| 10 | madisonNAIP | all          | svm_resp | N-45_C-14  |        45.00 |       14.00 |          0.28 |                          0.55 |                               0.26 |                         0.33 |
| 11 | madisonNAIP | all          | svm_resp | N-30_C-18  |        30.00 |       18.00 |          0.28 |                          0.57 |                               0.39 |                         0.22 |
| 12 | madisonNAIP | all          | rf_prob  | N-30_C-9   |        30.00 |        9.00 |          0.28 |                          0.48 |                               0.33 |                         0.28 |
| 13 | madisonNAIP | all          | svm_resp | N-20_C-6   |        20.00 |        6.00 |          0.28 |                          0.62 |                               0.51 |                         0.23 |
| 14 | madisonNAIP | all          | svm_resp | N-100_C-50 |       100.00 |       50.00 |          0.29 |                          0.54 |                               0.30 |                         0.29 |
| 15 | madisonNAIP | all          | rf_prob  | N-20_C-10  |        20.00 |       10.00 |          0.29 |                          0.52 |                               0.33 |                         0.25 |
| 16 | madisonNAIP | all          | svm_resp | N-30_C-9   |        30.00 |        9.00 |          0.29 |                          0.60 |                               0.36 |                         0.27 |
| 17 | madisonNAIP | all          | svm_resp | N-30_C-15  |        30.00 |       15.00 |          0.29 |                          0.59 |                               0.40 |                         0.23 |
| 18 | madisonNAIP | all          | svm_resp | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
| 19 | madisonNAIP | all          | rf_prob  | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.45 |                               0.32 |                         0.28 |
| 20 | madisonNAIP | all          | rf_prob  | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.49 |                               0.33 |                         0.26 |
| 21 | madisonNAIP | all          | svm_resp | N-45_C-27  |        45.00 |       27.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
| 22 | madisonNAIP | all          | svm_resp | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.54 |                               0.34 |                         0.28 |
| 23 | madisonNAIP | all          | rf_prob  | N-60_C-18  |        60.00 |       18.00 |          0.30 |                          0.48 |                               0.29 |                         0.31 |
| 24 | madisonNAIP | all          | svm_resp | N-100_C-60 |       100.00 |       60.00 |          0.30 |                          0.54 |                               0.31 |                         0.31 |
| 25 | madisonNAIP | all          | rf_prob  | N-45_C-14  |        45.00 |       14.00 |          0.30 |                          0.45 |                               0.35 |                         0.30 |
| 26 | madisonNAIP | all          | rf_prob  | N-45_C-27  |        45.00 |       27.00 |          0.31 |                          0.46 |                               0.36 |                         0.27 |
| 27 | madisonNAIP | all          | svm_resp | N-60_C-18  |        60.00 |       18.00 |          0.31 |                          0.56 |                               0.28 |                         0.38 |
| 28 | madisonNAIP | all          | svm_resp | N-45_C-22  |        45.00 |       22.00 |          0.32 |                          0.54 |                               0.37 |                         0.29 |
| 29 | madisonNAIP | all          | svm_resp | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.54 |                               0.35 |                         0.31 |
| 30 | madisonNAIP | all          | svm_resp | N-20_C-12  |        20.00 |       12.00 |          0.33 |                          0.60 |                               0.60 |                         0.17 |
| 31 | madisonNAIP | all          | rf_prob  | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.50 |                               0.35 |                         0.30 |
| 32 | madisonNAIP | all          | svm_resp | N-20_C-10  |        20.00 |       10.00 |          0.33 |                          0.62 |                               0.59 |                         0.17 |


|   | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|---+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
| 1 | madisonNAIP | all          | svm_resp | Pixel      | 1.00         |             | 0.26          | 0.39                          | 0.52                               | 0.10                         |
| 2 | madisonNAIP | all          | rf_prob  | Pixel      | 1.00         |             | 0.27          | 0.53                          | 0.53                               | 0.10                         |
| 3 | madisonNAIP | all          | svm_resp | N-30_C-15  | 30.00        | 15.00       | 0.83          | 0.80                          | 0.05                               | 1.00                         |
| 4 | madisonNAIP | all          | rf_prob  | N-30_C-15  | 30.00        | 15.00       | 0.84          | 0.67                          | 0.12                               | 1.00                         |
| 5 | madisonNAIP | all          | rf_prob  | N-100_C-50 | 100.00       | 50.00       | 0.84          | 0.66                          | 0.43                               | 1.00                         |
| 6 | madisonNAIP | all          | svm_resp | N-100_C-50 | 100.00       | 50.00       | 0.85          | 0.85                          | 0.01                               | 1.00                         |

***** Table showing performace of classifiers, average over all grids, decreasing accuracy
#+begin_src R :results raw
      options(warn = -1)
        error.df.avg.class %>%
            arrange(desc(overall.error)) %>%
            ascii
      options(warn = 1)
#+end_src

#+results:
 |    | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
 |----+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
 |  1 | madisonNAIP | all          | svm_resp | N-20_C-6   |        20.00 |        6.00 |          0.28 |                          0.57 |                               0.48 |                         0.12 |
 |  2 | madisonNAIP | all          | svm_resp | N-20_C-10  |        20.00 |       10.00 |          0.27 |                          0.57 |                               0.45 |                         0.11 |
 |  3 | madisonNAIP | all          | svm_resp | N-20_C-12  |        20.00 |       12.00 |          0.26 |                          0.55 |                               0.43 |                         0.13 |
 |  4 | madisonNAIP | all          | svm_resp | N-60_C-18  |        60.00 |       18.00 |          0.24 |                          0.54 |                               0.20 |                         0.38 |
 |  5 | madisonNAIP | all          | svm_resp | N-100_C-50 |       100.00 |       50.00 |          0.23 |                          0.55 |                               0.25 |                         0.27 |
 |  6 | madisonNAIP | all          | svm_resp | N-100_C-60 |       100.00 |       60.00 |          0.23 |                          0.55 |                               0.24 |                         0.28 |
 |  7 | madisonNAIP | all          | svm_resp | N-100_C-30 |       100.00 |       30.00 |          0.23 |                          0.56 |                               0.25 |                         0.26 |
 |  8 | madisonNAIP | all          | svm_resp | N-30_C-9   |        30.00 |        9.00 |          0.23 |                          0.56 |                               0.24 |                         0.27 |
 |  9 | madisonNAIP | all          | svm_resp | N-30_C-15  |        30.00 |       15.00 |          0.23 |                          0.55 |                               0.25 |                         0.24 |
 | 10 | madisonNAIP | all          | svm_resp | Pixel      |         1.00 |             |          0.23 |                          0.56 |                               0.13 |                         0.31 |
 | 11 | madisonNAIP | all          | svm_resp | N-30_C-18  |        30.00 |       18.00 |          0.23 |                          0.54 |                               0.26 |                         0.23 |
 | 12 | madisonNAIP | all          | svm_resp | N-45_C-14  |        45.00 |       14.00 |          0.23 |                          0.58 |                               0.17 |                         0.34 |
 | 13 | madisonNAIP | all          | svm_resp | N-45_C-22  |        45.00 |       22.00 |          0.23 |                          0.56 |                               0.25 |                         0.23 |
 | 14 | madisonNAIP | all          | svm_resp | N-60_C-30  |        60.00 |       30.00 |          0.22 |                          0.57 |                               0.25 |                         0.22 |
 | 15 | madisonNAIP | all          | svm_resp | N-60_C-36  |        60.00 |       36.00 |          0.22 |                          0.55 |                               0.26 |                         0.22 |
 | 16 | madisonNAIP | all          | svm_resp | N-45_C-27  |        45.00 |       27.00 |          0.22 |                          0.54 |                               0.24 |                         0.23 |
 | 17 | madisonNAIP | all          | rf_prob  | Pixel      |         1.00 |             |          0.22 |                          0.52 |                               0.22 |                         0.19 |
 | 18 | madisonNAIP | all          | rf_prob  | N-100_C-30 |       100.00 |       30.00 |          0.20 |                          0.49 |                               0.27 |                         0.20 |
 | 19 | madisonNAIP | all          | rf_prob  | N-60_C-18  |        60.00 |       18.00 |          0.20 |                          0.47 |                               0.24 |                         0.24 |
 | 20 | madisonNAIP | all          | rf_prob  | N-100_C-50 |       100.00 |       50.00 |          0.20 |                          0.40 |                               0.27 |                         0.25 |
 | 21 | madisonNAIP | all          | rf_prob  | N-30_C-9   |        30.00 |        9.00 |          0.20 |                          0.44 |                               0.26 |                         0.25 |
 | 22 | madisonNAIP | all          | rf_prob  | N-100_C-60 |       100.00 |       60.00 |          0.20 |                          0.40 |                               0.27 |                         0.26 |
 | 23 | madisonNAIP | all          | rf_prob  | N-20_C-6   |        20.00 |        6.00 |          0.20 |                          0.47 |                               0.27 |                         0.23 |
 | 24 | madisonNAIP | all          | rf_prob  | N-30_C-15  |        30.00 |       15.00 |          0.20 |                          0.45 |                               0.26 |                         0.21 |
 | 25 | madisonNAIP | all          | rf_prob  | N-60_C-30  |        60.00 |       30.00 |          0.20 |                          0.50 |                               0.26 |                         0.18 |
 | 26 | madisonNAIP | all          | rf_prob  | N-30_C-18  |        30.00 |       18.00 |          0.20 |                          0.42 |                               0.26 |                         0.22 |
 | 27 | madisonNAIP | all          | rf_prob  | N-20_C-10  |        20.00 |       10.00 |          0.20 |                          0.45 |                               0.26 |                         0.20 |
 | 28 | madisonNAIP | all          | rf_prob  | N-45_C-27  |        45.00 |       27.00 |          0.19 |                          0.46 |                               0.26 |                         0.20 |
 | 29 | madisonNAIP | all          | rf_prob  | N-45_C-14  |        45.00 |       14.00 |          0.19 |                          0.44 |                               0.26 |                         0.24 |
 | 30 | madisonNAIP | all          | rf_prob  | N-60_C-36  |        60.00 |       36.00 |          0.19 |                          0.44 |                               0.26 |                         0.21 |
 | 31 | madisonNAIP | all          | rf_prob  | N-45_C-22  |        45.00 |       22.00 |          0.19 |                          0.45 |                               0.26 |                         0.20 |
 | 32 | madisonNAIP | all          | rf_prob  | N-20_C-12  |        20.00 |       12.00 |          0.19 |                          0.45 |                               0.25 |                         0.21 |



 |    | image       | target.cover | model    | seg.params | segment.size | compactness | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
 |----+-------------+--------------+----------+------------+--------------+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
 |  1 | madisonNAIP | all          | svm_resp | N-20_C-10  |        20.00 |       10.00 |          0.33 |                          0.62 |                               0.59 |                         0.17 |
 |  2 | madisonNAIP | all          | rf_prob  | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.50 |                               0.35 |                         0.30 |
 |  3 | madisonNAIP | all          | svm_resp | N-20_C-12  |        20.00 |       12.00 |          0.33 |                          0.60 |                               0.60 |                         0.17 |
 |  4 | madisonNAIP | all          | svm_resp | N-100_C-30 |       100.00 |       30.00 |          0.33 |                          0.54 |                               0.35 |                         0.31 |
 |  5 | madisonNAIP | all          | svm_resp | N-45_C-22  |        45.00 |       22.00 |          0.32 |                          0.54 |                               0.37 |                         0.29 |
 |  6 | madisonNAIP | all          | svm_resp | N-60_C-18  |        60.00 |       18.00 |          0.31 |                          0.56 |                               0.28 |                         0.38 |
 |  7 | madisonNAIP | all          | rf_prob  | N-45_C-27  |        45.00 |       27.00 |          0.31 |                          0.46 |                               0.36 |                         0.27 |
 |  8 | madisonNAIP | all          | rf_prob  | N-45_C-14  |        45.00 |       14.00 |          0.30 |                          0.45 |                               0.35 |                         0.30 |
 |  9 | madisonNAIP | all          | svm_resp | N-100_C-60 |       100.00 |       60.00 |          0.30 |                          0.54 |                               0.31 |                         0.31 |
 | 10 | madisonNAIP | all          | rf_prob  | N-60_C-18  |        60.00 |       18.00 |          0.30 |                          0.48 |                               0.29 |                         0.31 |
 | 11 | madisonNAIP | all          | svm_resp | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.54 |                               0.34 |                         0.28 |
 | 12 | madisonNAIP | all          | svm_resp | N-45_C-27  |        45.00 |       27.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
 | 13 | madisonNAIP | all          | rf_prob  | N-60_C-30  |        60.00 |       30.00 |          0.29 |                          0.49 |                               0.33 |                         0.26 |
 | 14 | madisonNAIP | all          | rf_prob  | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.45 |                               0.32 |                         0.28 |
 | 15 | madisonNAIP | all          | svm_resp | N-60_C-36  |        60.00 |       36.00 |          0.29 |                          0.55 |                               0.35 |                         0.26 |
 | 16 | madisonNAIP | all          | svm_resp | N-30_C-15  |        30.00 |       15.00 |          0.29 |                          0.59 |                               0.40 |                         0.23 |
 | 17 | madisonNAIP | all          | svm_resp | N-30_C-9   |        30.00 |        9.00 |          0.29 |                          0.60 |                               0.36 |                         0.27 |
 | 18 | madisonNAIP | all          | rf_prob  | N-20_C-10  |        20.00 |       10.00 |          0.29 |                          0.52 |                               0.33 |                         0.25 |
 | 19 | madisonNAIP | all          | svm_resp | N-100_C-50 |       100.00 |       50.00 |          0.29 |                          0.54 |                               0.30 |                         0.29 |
 | 20 | madisonNAIP | all          | svm_resp | N-20_C-6   |        20.00 |        6.00 |          0.28 |                          0.62 |                               0.51 |                         0.23 |
 | 21 | madisonNAIP | all          | rf_prob  | N-30_C-9   |        30.00 |        9.00 |          0.28 |                          0.48 |                               0.33 |                         0.28 |
 | 22 | madisonNAIP | all          | svm_resp | N-30_C-18  |        30.00 |       18.00 |          0.28 |                          0.57 |                               0.39 |                         0.22 |
 | 23 | madisonNAIP | all          | svm_resp | N-45_C-14  |        45.00 |       14.00 |          0.28 |                          0.55 |                               0.26 |                         0.33 |
 | 24 | madisonNAIP | all          | rf_prob  | N-30_C-15  |        30.00 |       15.00 |          0.28 |                          0.46 |                               0.33 |                         0.26 |
 | 25 | madisonNAIP | all          | rf_prob  | N-100_C-60 |       100.00 |       60.00 |          0.26 |                          0.41 |                               0.28 |                         0.32 |
 | 26 | madisonNAIP | all          | rf_prob  | N-20_C-12  |        20.00 |       12.00 |          0.24 |                          0.52 |                               0.36 |                         0.23 |
 | 27 | madisonNAIP | all          | rf_prob  | N-20_C-6   |        20.00 |        6.00 |          0.24 |                          0.53 |                               0.40 |                         0.25 |
 | 28 | madisonNAIP | all          | rf_prob  | N-100_C-50 |       100.00 |       50.00 |          0.24 |                          0.41 |                               0.30 |                         0.29 |
 | 29 | madisonNAIP | all          | rf_prob  | N-45_C-22  |        45.00 |       22.00 |          0.24 |                          0.46 |                               0.30 |                         0.24 |
 | 30 | madisonNAIP | all          | rf_prob  | N-30_C-18  |        30.00 |       18.00 |          0.24 |                          0.46 |                               0.32 |                         0.24 |
 | 31 | madisonNAIP | all          | svm_resp | Pixel      |         1.00 |             |          0.23 |                          0.57 |                               0.14 |                         0.30 |
 | 32 | madisonNAIP | all          | rf_prob  | Pixel      |         1.00 |             |          0.22 |                          0.52 |                               0.22 |                         0.19 |

***** Plots of 20 *best* classified grids by *best* classifier with points superimposed
#+begin_src R :results raw
  best.classif.overall <- error.df.avg.class %>%
      arrange(overall.error) %>%
      slice(1) %>%
      data.frame()

  best.classif.best.grids <- best.classif.overall %>%
      select(image, target.cover, model, seg.params) %>%
      left_join(., error.df) %>%
      arrange(overall.error) %>%
      select(overall.error, grid,image, target.cover, model, seg.params) %>%
      mutate(path = paste0(dd.accuracy.dir,"/",ClassifiedTilesDirName,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif"))

      options(warn = -1)

            best.classif.best.grids %>%
            ascii

      options(warn = 1)

#+end_src

#+results:
 Joining by: c("image", "target.cover", "model", "seg.params")
 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                         |
|----+---------------+-------------+-------------+--------------+---------+------------+----------------------------------------------------------------------------------------------|
| 1  | 0.02          | mad.100m.12 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 2  | 0.03          | mad.50m.2   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.04          | mad.150m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 4  | 0.05          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 5  | 0.05          | mad.100m.13 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 6  | 0.07          | mad.200m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 7  | 0.07          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 8  | 0.08          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 9  | 0.08          | mad.100m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 10 | 0.08          | mad.100m.27 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 11 | 0.08          | mad.150m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 12 | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 13 | 0.10          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.11          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.14          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 16 | 0.14          | mad.200m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.16          | mad.200m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.17          | mad.100m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.18          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 20 | 0.18          | mad.100m.14 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 21 | 0.19          | mad.100m.30 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 22 | 0.20          | mad.100m.18 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 23 | 0.21          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 24 | 0.22          | mad.100m.17 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 25 | 0.22          | mad.100m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 26 | 0.23          | mad.50m.1   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 27 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 28 | 0.24          | mad.150m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 29 | 0.24          | mad.150m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 30 | 0.25          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 31 | 0.26          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 32 | 0.26          | mad.150m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 33 | 0.26          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 34 | 0.27          | mad.150m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 35 | 0.27          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 36 | 0.27          | mad.100m.24 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 37 | 0.28          | mad.100m.16 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 38 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 39 | 0.29          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 40 | 0.29          | mad.150m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 41 | 0.30          | mad.200m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 42 | 0.30          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 43 | 0.31          | mad.100m.20 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 44 | 0.34          | mad.50m.3   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 45 | 0.34          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 46 | 0.35          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-20_C-12_madisonNAIP_all_rf_prob.tif |

 |    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                         |
|----+---------------+-------------+-------------+--------------+---------+------------+----------------------------------------------------------------------------------------------|
| 1  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 2  | 0.07          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.08          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 4  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 5  | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 6  | 0.12          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 7  | 0.14          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 8  | 0.17          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 9  | 0.21          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 10 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 11 | 0.25          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 12 | 0.26          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 13 | 0.26          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.27          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.28          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 16 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.30          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.34          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.35          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 20 |               | mad.100m.12 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 21 |               | mad.100m.13 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.13_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 22 |               | mad.100m.14 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.14_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 23 |               | mad.100m.16 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.16_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 24 |               | mad.100m.17 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.17_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 25 |               | mad.100m.18 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.18_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 26 |               | mad.100m.20 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.20_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 27 |               | mad.100m.24 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.24_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 28 |               | mad.100m.27 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.27_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 29 |               | mad.100m.30 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.30_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 30 |               | mad.100m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 31 |               | mad.100m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 32 |               | mad.100m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 33 |               | mad.150m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 34 |               | mad.150m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 35 |               | mad.150m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 36 |               | mad.150m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 37 |               | mad.150m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 38 |               | mad.150m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 39 |               | mad.150m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 40 |               | mad.200m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 41 |               | mad.200m.2  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 42 |               | mad.200m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 43 |               | mad.200m.4  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 44 |               | mad.50m.1   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 45 |               | mad.50m.2   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.2_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 46 |               | mad.50m.3   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
 Joining by: c("image", "target.cover", "model", "seg.params")
Error in options(., warn = -1) : invalid argument
 Warning in rep(rownames, length = nrow(x)) :
  'x' is NULL so the result will be NULL
Warning in rep(colnames, length = ncol(x)) :
  'x' is NULL so the result will be NULL
|    | overall.error | grid        | image       | target.cover | model   | seg.params | path                                                                                         |
|----+---------------+-------------+-------------+--------------+---------+------------+----------------------------------------------------------------------------------------------|
| 1  | 0.04          | mad.100m.23 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.23_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 2  | 0.07          | mad.50m.5   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 3  | 0.08          | mad.100m.28 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.28_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 4  | 0.08          | mad.100m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 5  | 0.09          | mad.200m.5  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.200m.5_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 6  | 0.12          | mad.100m.1  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.1_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 7  | 0.14          | mad.100m.21 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.21_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 8  | 0.17          | mad.100m.11 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.11_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 9  | 0.21          | mad.100m.19 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.19_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 10 | 0.24          | mad.100m.7  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.7_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 11 | 0.25          | mad.50m.4   | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.50m.4_N-20_C-12_madisonNAIP_all_rf_prob.tif   |
| 12 | 0.26          | mad.100m.10 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.10_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 13 | 0.26          | mad.100m.9  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.9_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 14 | 0.27          | mad.150m.3  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.3_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 15 | 0.28          | mad.100m.29 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.29_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 16 | 0.29          | mad.150m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 17 | 0.30          | mad.100m.6  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.6_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 18 | 0.34          | mad.150m.8  | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.150m.8_N-20_C-12_madisonNAIP_all_rf_prob.tif  |
| 19 | 0.35          | mad.100m.22 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.22_N-20_C-12_madisonNAIP_all_rf_prob.tif |
| 20 |               | mad.100m.12 | madisonNAIP | all          | rf_prob | N-20_C-12  | ../DD/Accuracy/ClassifiedTiles/madisonNAIP.mad.100m.12_N-20_C-12_madisonNAIP_all_rf_prob.tif |


#+begin_src R

best.classif.best.grids <- best.classif.best.grids %>%  head(n=20)


  lapply(1:nrow(best.classif.best.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = best.classif.best.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = best.classif.best.grids$path[i],
                                           fig.dir = "figs/bestclassif.bestgrids",
                                           target = "a")
  })



  ## plts <- lapply(best.classif.best.grids$path, function(path) {
  ##     grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##     points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##     points@data <- points@data %>%
  ##         mutate(x = coordinates(points)[,1],
  ##                y = coordinates(points)[,2])
  ##     ras <- raster(path)
  ##     pts.on.classified.tile.plot(fig.dir = "figs/bestclassif.bestgrids",points, ras, target = "a")
  ## })


#+end_src

***** Plots of 20 *worst* classified grids by *best* classifier with points superimposed
#+begin_src R :results none
      best.classif.overall <- error.df.avg.class %>%
        arrange(overall.error) %>%
          slice(1) %>%
        data.frame()

  best.classif.worst.grids <- best.classif.overall %>%
    select(image, target.cover, model, seg.params) %>%
      left_join(., error.df) %>%
      arrange(desc(overall.error)) %>%
      select(overall.error, grid,image, target.cover, model, seg.params) %>%
      mutate(path = paste0(dd.accuracy.dir,"/",ClassifiedTilesDirName,"/",image,".",grid,"_",seg.params,"_",image,"_",target.cover,"_",model,".tif")) %>%
      head(n=20)


  lapply(1:nrow(best.classif.worst.grids), function(i){
      pts.on.classified.tile.plot.ErrorinTitle(error = best.classif.worst.grids$overall.error[i],
                                           grd.pts = grid.points,
                                           classified.tile.path = best.classif.worst.grids$path[i],
                                           fig.dir = "figs/bestclassif.worstgrids",
                                           target = "a")
  })

  ## plts <- lapply(best.classif.worst.grids$path, function(path) {
  ##   grid.name <- str_match(path, ".*([a-z]{3}\\.[0-9]+m\\.[0-9]+)_.*")[,2]
  ##   points <- grid.points[grid.points@data$unq__ID == grid.name,]
  ##   points@data <- points@data %>%
  ##       mutate(x = coordinates(points)[,1],
  ##              y = coordinates(points)[,2])
  ##   ras <- raster(path)
  ##   pts.on.classified.tile.plot(fig.dir = "figs/bestclassif.worstgrids",points, ras, target = "a")
  ## })


#+end_src

***** Plots showing how image, segment size, compactness, and model affect accuracy

****** plot 1
#+begin_src R :exports results :results graphics :file ./figs/gridAcc.p1.png
ggplot(error.df, aes(y = overall.error, x = segment.size, color = compactness, group = model)) + geom_point() + facet_grid(model~image)
#+end_src

****** plot 2

***** Table showing the *best* classified grids, averaged across all classifiers
#+begin_src R
    error.df.avg.grids <- error.df %>%
        select(-image, -model, -target.cover, -seg.params, -segment.size, -compactness) %>%
        group_by(grid) %>%
        summarize_each(funs(mean(.,na.rm = T))) %>%
        ungroup() %>%
        arrange(overall.error)


  options(warn = -1)
    error.df.avg.grids %>% ascii
  options(warn = 1)
#+end_src

#+results:
#+begin_example
|    | grid        | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|----+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
| 1  | mad.50m.2   | 0.02          |                               | 0.00                               | 0.62                         |
| 2  | mad.100m.23 | 0.04          | 0.22                          |                                    | 0.03                         |
| 3  | mad.100m.13 | 0.05          | 1.00                          | 0.01                               | 0.36                         |
| 4  | mad.50m.5   | 0.05          | 0.33                          | 0.44                               | 0.01                         |
| 5  | mad.100m.12 | 0.06          | 0.09                          | 0.01                               |                              |
| 6  | mad.150m.5  | 0.06          | 0.11                          | 0.01                               | 0.27                         |
| 7  | mad.150m.9  | 0.08          | 0.08                          | 0.00                               | 0.51                         |
| 8  | mad.100m.4  | 0.08          | 0.98                          | 0.00                               | 0.44                         |
| 9  | mad.100m.28 | 0.09          | 0.14                          |                                    | 0.03                         |
| 10 | mad.100m.3  | 0.09          | 0.95                          | 0.98                               | 0.02                         |
| 11 | mad.200m.5  | 0.10          | 0.07                          | 0.99                               | 0.16                         |
| 12 | mad.100m.1  | 0.11          | 0.34                          |                                    | 0.02                         |
| 13 | mad.200m.2  | 0.12          | 0.09                          | 0.05                               | 0.40                         |
| 14 | mad.100m.27 | 0.14          | 0.18                          | 0.03                               |                              |
| 15 | mad.200m.4  | 0.17          | 0.23                          | 0.03                               | 0.33                         |
| 16 | mad.100m.21 | 0.19          | 0.88                          | 0.32                               | 0.08                         |
| 17 | mad.100m.14 | 0.19          | 0.36                          | 0.06                               | 0.19                         |
| 18 | mad.200m.1  | 0.19          | 0.18                          | 0.10                               | 0.36                         |
| 19 | mad.100m.11 | 0.20          | 0.23                          | 0.29                               | 0.14                         |
| 20 | mad.100m.30 | 0.21          | 0.88                          | 0.03                               | 0.46                         |
| 21 | mad.100m.8  | 0.21          | 0.85                          | 0.05                               | 0.28                         |
| 22 | mad.50m.4   | 0.22          | 0.98                          | 0.29                               | 0.07                         |
| 23 | mad.50m.1   | 0.22          | 0.94                          | 0.10                               | 0.50                         |
| 24 | mad.100m.5  | 0.23          | 0.37                          | 0.11                               | 0.26                         |
| 25 | mad.150m.7  | 0.23          | 0.26                          |                                    | 0.07                         |
| 26 | mad.100m.18 | 0.24          | 0.28                          | 0.11                               | 0.35                         |
| 27 | mad.100m.7  | 0.26          | 0.50                          | 0.47                               | 0.06                         |
| 28 | mad.100m.19 | 0.26          | 0.50                          | 0.47                               | 0.14                         |
| 29 | mad.100m.17 | 0.27          | 0.53                          | 0.18                               | 0.28                         |
| 30 | mad.150m.4  | 0.28          | 0.35                          | 0.17                               | 0.36                         |
| 31 | mad.150m.3  | 0.29          | 0.93                          | 0.37                               | 0.13                         |
| 32 | mad.150m.1  | 0.29          | 0.38                          | 0.19                               | 0.28                         |
| 33 | mad.200m.3  | 0.29          | 0.44                          | 0.24                               | 0.27                         |
| 34 | mad.150m.2  | 0.30          | 0.60                          | 0.22                               | 0.20                         |
| 35 | mad.150m.10 | 0.30          | 0.50                          | 0.24                               | 0.22                         |
| 36 | mad.100m.29 | 0.31          | 0.80                          | 0.40                               | 0.16                         |
| 37 | mad.100m.24 | 0.31          | 0.83                          | 0.24                               | 0.18                         |
| 38 | mad.100m.10 | 0.31          | 0.87                          | 0.35                               | 0.17                         |
| 39 | mad.100m.20 | 0.32          | 0.59                          | 0.34                               | 0.11                         |
| 40 | mad.100m.6  | 0.32          | 0.48                          | 0.41                               | 0.09                         |
| 41 | mad.150m.6  | 0.35          | 0.80                          | 0.34                               | 0.09                         |
| 42 | mad.150m.8  | 0.35          | 0.94                          | 0.37                               | 0.24                         |
| 43 | mad.50m.3   | 0.36          | 0.44                          | 0.43                               | 0.17                         |
| 44 | mad.100m.9  | 0.36          | 0.43                          | 0.19                               | 0.38                         |
| 45 | mad.100m.22 | 0.39          | 0.74                          | 0.33                               | 0.27                         |
| 46 | mad.100m.16 | 0.43          | 0.05                          |                                    | 0.48                         |
#+end_example

***** Table showing the *worst* classified grids, averaged across all classifiers
#+begin_src R :results raw
    error.df.avg.grids <- error.df %>%
        select(-image, -model, -target.cover, -seg.params, -segment.size, -compactness) %>%
        group_by(grid) %>%
        summarize_each(funs(mean(.,na.rm = T))) %>%
        ungroup() %>%
        arrange(overall.error)

  options(warn = -1)
    error.df.avg.grids %>% arrange(desc(overall.error)) %>% ascii
  options(warn = 1)
#+end_src

#+results:
|    | grid        | overall.error | pct.grass.classified.as.other | pct.impervious.classified.as.other | pct.tree.classified.as.other |
|----+-------------+---------------+-------------------------------+------------------------------------+------------------------------|
|  1 | mad.100m.22 |          0.42 |                          0.77 |                               0.30 |                         0.33 |
|  2 | mad.50m.3   |          0.39 |                          1.00 |                               0.44 |                         0.23 |
|  3 | mad.150m.6  |          0.36 |                          0.86 |                               0.33 |                         0.09 |
|  4 | mad.150m.8  |          0.35 |                          0.97 |                               0.38 |                         0.21 |
|  5 | mad.100m.9  |          0.35 |                          0.44 |                               0.06 |                         0.50 |
|  6 | mad.100m.6  |          0.35 |                          0.51 |                               0.41 |                         0.10 |
|  7 | mad.100m.10 |          0.32 |                          0.93 |                               0.34 |                         0.17 |
|  8 | mad.100m.24 |          0.31 |                          0.91 |                               0.25 |                         0.18 |
|  9 | mad.100m.20 |          0.31 |                          0.64 |                               0.33 |                         0.06 |
| 10 | mad.150m.1  |          0.30 |                          0.38 |                               0.23 |                         0.28 |
| 11 | mad.100m.19 |          0.30 |                          0.52 |                               0.52 |                         0.18 |
| 12 | mad.150m.2  |          0.30 |                          0.58 |                               0.23 |                         0.20 |
| 13 | mad.100m.29 |          0.29 |                          0.86 |                               0.36 |                         0.14 |
| 14 | mad.150m.10 |          0.29 |                          0.49 |                               0.22 |                         0.23 |
| 15 | mad.150m.3  |          0.28 |                          0.98 |                               0.38 |                         0.09 |
| 16 | mad.150m.4  |          0.28 |                          0.35 |                               0.19 |                         0.35 |
| 17 | mad.100m.7  |          0.26 |                          0.51 |                               0.48 |                         0.06 |
| 18 | mad.100m.17 |          0.25 |                          0.56 |                               0.14 |                         0.28 |
| 19 | mad.100m.18 |          0.24 |                          0.27 |                               0.13 |                         0.41 |
| 20 | mad.150m.7  |          0.24 |                          0.26 |                                    |                         0.11 |
| 21 | mad.100m.5  |          0.23 |                          0.38 |                               0.12 |                         0.27 |
| 22 | mad.100m.30 |          0.22 |                          0.91 |                               0.03 |                         0.60 |
| 23 | mad.50m.4   |          0.20 |                          1.00 |                               0.27 |                         0.06 |
| 24 | mad.100m.8  |          0.20 |                          0.93 |                               0.06 |                         0.23 |
| 25 | mad.100m.11 |          0.20 |                          0.26 |                               0.25 |                         0.10 |
| 26 | mad.100m.21 |          0.20 |                          0.94 |                               0.28 |                         0.10 |
| 27 | mad.200m.1  |          0.19 |                          0.18 |                               0.11 |                         0.39 |
| 28 | mad.200m.2  |          0.11 |                          0.10 |                               0.05 |                         0.37 |
| 29 | mad.100m.1  |          0.10 |                          0.40 |                                    |                         0.00 |
| 30 | mad.200m.5  |          0.09 |                          0.06 |                               1.00 |                         0.16 |
| 31 | mad.100m.3  |          0.09 |                          0.75 |                               1.00 |                         0.01 |
| 32 | mad.100m.28 |          0.08 |                          0.13 |                                    |                         0.02 |
| 33 | mad.50m.5   |          0.05 |                          0.00 |                               0.44 |                         0.02 |
| 34 | mad.100m.23 |          0.05 |                          0.17 |                                    |                         0.04 |
| 35 | mad.50m.2   |          0.02 |                               |                               0.00 |                         0.50 |
| 36 | mad.100m.12 |               |                          0.11 |                                    |                              |
| 37 | mad.100m.13 |               |                          1.00 |                                    |                         0.39 |
| 38 | mad.100m.14 |               |                          0.34 |                                    |                         0.21 |
| 39 | mad.100m.16 |               |                          0.04 |                                    |                         0.53 |
| 40 | mad.100m.27 |               |                          0.16 |                                    |                              |
| 41 | mad.100m.4  |               |                          1.00 |                                    |                         0.35 |
| 42 | mad.150m.5  |               |                          0.12 |                                    |                         0.33 |
| 43 | mad.150m.9  |               |                          0.14 |                                    |                         0.56 |
| 44 | mad.200m.3  |               |                          0.41 |                                    |                         0.29 |
| 45 | mad.200m.4  |               |                          0.24 |                                    |                         0.30 |
| 46 | mad.50m.1   |               |                          1.00 |                                    |                         0.54 |
Error in eval(expr, envir, enclos) :
  object 'error.df.avg.grids' not found


***** Plots showing how grid characteristics (e.g. heterogeneity) affect accuracy

*** Save Best Model
#+begin_src R

  best.classif.overall <- error.df.avg.class %>%
      arrange(overall.error) %>%
      slice(1) %>%
      left_join(.,error.df) %>%
    mutate(path = paste0(image,"_",seg.params,".models.rds")


  best.model <- readRDS(paste0(Models.dir,"/",best.classif.overall$path))

  ind <- sapply(1:length(best.model), function(i) best.model[[i]]$learner$id == best.classif.overall$model)

  best.model <- best.model[ind][[1]]

  saveRDS(best.model, paste0("../DD/Models/best_mad_model_",best.classif.overall$image,"_",best.classif.overall$seg.params,"_",best.model$learner$id,".rds"))

#+end_src
** Test How Madison Model performs for Wausau
*** Classify Wausau Accuracy Regions
**** Make tiles at accuracy regions
#+BEGIN_SRC R :results none


  image.names <- "wausauNAIP"
  image.paths <- str_c("../RD_NAIP/",image.names,".tif")

      foreach(i = 1:2) %do% {

        foreach(img.pth = image.paths) %do% {

            Reproject_Shapefile_to_Image_CRS(accuracy.region.dsn[i],
                                             accuracy.region.layer[i],
                                             img.pth,
                                             accuracy.region.imageCRS.dsn)

            Crop_image_to_regions_around_points_nameBygrid(shapefile.dsn = accuracy.region.imageCRS.dsn,
                                                           shapefile.layer = accuracy.region.layer[i],
                                                           image.path = img.pth,
                                                           cores = cores,
                                                           output.dir = dd.accuracy.dir,
                                                           column.name = "unq__ID")

        }
    }


#+END_SRC
**** Make PixelFeatureDFs and SegmentationFeatureDFs for Accuracy Regions
  1) Input
     - Testing Region Shapefiles
     - image
  2) Operation
     - Reproject Shapefiles to that of image
     - Crop image to each polygon in the shapefile
     - Derive PixelfeatureDFs and SegmentationFeatureDF from each tile of the image in region of each polygon
  3) Output
     - SegmentationFeatureDFs for every training polygon
     - PixelFeatureDFs for every pixel

****** Start R Loop, for every smaller image, do in parallel, :
#+BEGIN_SRC R
  cl <- makeCluster(cores)
  registerDoParallel(cl)

  pixel.added.features.raster.list <- foreach(img.nm = image.names) %do% {

      tile.names <- list.files(dd.accuracy.dir) %>%
           str_extract(., pattern = str_c(img.nm,".*-[0-9]+.tif$")) %>%
           str_extract(., pattern = str_c(img.nm,".*-[0-9]+")) %>%
           na.omit()

       foreach (i = tile.names,
                .packages = c("raster","stringr")) %dopar% {
   #+END_SRC

****** Add Ratios
#+BEGIN_SRC R
  add.ratios.ndvi(tile.dir = dd.accuracy.dir,
                  tile.name = i)


 #+END_SRC
****** Save Pixel Feature Dataframe
 #+BEGIN_SRC R

   pixel.feature.df <- Create.Pixel.Feature.df(tile.dir = dd.accuracy.dir,
                                               tile.name = i)




#+END_SRC

****** Perform PCA
#+BEGIN_SRC R :results none

# note, I copied madisonNAIP_pca to wausauNAIP_pca because we want to test if the madison pca will work for wausau

                image.pca(image.name = img.nm,
                          tile.dir = dd.accuracy.dir,
                          tile.name = i,
                          pca.dir = dd.pca.dir)
        }
  }
   #+END_SRC
****** Segmentation

#+NAME: accuracy.dir
#+BEGIN_SRC R
message(dd.accuracy.dir)
#+END_SRC


#+BEGIN_SRC sh :var dir=accuracy.dir
   cd $dir
   # pixel size
   # desired area for superpixel/segments
   # compactness value
   # imagename
   python ../../code/fia_segment_cmdArgs.py 1 60 30 wausauNAIP


#+END_SRC

#+END_SRC

****** Create Segment Feature Dataframe
 #+BEGIN_SRC R :results none
   cl <- makeCluster(cores)
   registerDoParallel(cl)

   seg.feature.dfs <- foreach(img.nm = image.names) %do% {

       tile.names <- list.files(dd.accuracy.dir) %>%
           str_extract(., pattern = str_c(img.nm,".*-[0-9]+",segmentation.layer.pattern,".tif$")) %>%
               na.omit()

       seg.params <- unique(str_extract(tile.names, segmentation.layer.pattern))

       foreach(seg.param.set = seg.params) %do% {

           tile.names.sub <- tile.names[which(complete.cases(str_extract(tile.names,seg.param.set)))]
           tile.names.sub <- str_replace(tile.names.sub, ".tif","")

           out <- foreach (i = tile.names.sub,
                           .packages = c("raster","stringr","dplyr","broom","tidyr")) %dopar% {
                               seg.df <- Create.Segment.Feature.df(tile.dir = dd.accuracy.dir,
                                                         tile.name = i)
                               saveRDS(seg.df, file = paste0(dd.accuracy.dir,"/", i, segmentFeatureDF.appendage))
                           }
           out
       }
   }

    #+END_SRC

**** Classify Tiles at accuracy regions

#+BEGIN_SRC R
   cl <- makeCluster(cores)
   registerDoParallel(cl)


# I copied the madisonNAIP model .rds file to a wausauNAIP model.rds since we want to see the performance of
# Madison models in Wausau


   classified.grid.tiles <-
       foreach(img.nm = image.names) %do% {

           models <- list.files(Models.dir) %>%
               str_extract(., str_c(".*",img.nm,".*")) %>%
               na.omit()

           tile.names <- list.files(dd.accuracy.dir) %>%
               str_extract(., pattern = str_c(img.nm,".*[0-9]+.tif$")) %>%
               str_replace(., segmentation.layer.pattern, "") %>%
               str_replace(., ".tif", "") %>%
                       na.omit() %>%
                           unique()

           foreach(tile.nm = tile.names,
                   .packages = c("dplyr","raster","stringr","mlr","foreach","doParallel")) %dopar% {

               foreach(model = models) %do% {

                   segmentation.params <- str_extract(model, "N-[0-9]+_C-[0-9]+|Pixel")

                   if(grepl("N-[0-9]+_C-[0-9]+",segmentation.params)) {
                          segment.tile.name.append <- paste0("_",segmentation.params,".tif")
                          segment.feature.df.name.append <- paste0("_",segmentation.params,segmentFeatureDF.appendage)

                          classify.segmented.raster(segment.feature.df.dir = dd.accuracy.dir,
                                          model.dir = Models.dir,
                                          segment.dir = dd.accuracy.dir,
                                          classify.out.dir = dd.accuracy.dir,
                                          tile.name = tile.nm,
                                          segmentation.appendage = segment.tile.name.append,
                                          model.name.rds = model,
                                          segment.feature.appendage = segment.feature.df.name.append,
                                          segmentation.prms = segmentation.params)

                   } else {
                       classify.pixel.raster(tile.dir = dd.accuracy.dir,
                                             tile.name = tile.nm,
                                             pixelFeatureDF.appendage = pixel.feature.df.appendage,
                                             model.dir = Models.dir,
                                             model.rds = model,
                                             seg.prms = segmentation.params)
                   }
               }
           }
       }


  stopCluster(cl)
#+END_SRC







*** Assess Accuracy of Wausau classified tiles
**** Point-wise accuracy.  regular confusion matrix thing.  I should do this for the grids and the field plot data
#+BEGIN_SRC R
        wau.grid.id.pattern = "wau-[0-9]+m-[0-9]+_"
        grid.pattern = "[a-zA-Z]{3}-[0-9]+m-[0-9]+_"
        image.pattern = "[a-zA-Z]{5}[a-zA-Z]+"
        target.pattern = "all|grass|impervious|tree"
        model.pattern = "rf_prob|rf_resp|svm_resp"
        seg.prms = "N-[0-9]+_C-[0-9]+|Pixel"


    grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer, stringsAsFactors = F)

        grd <- spTransform(grd, utm16)

        xy <- coordinates(grd)
        grd@data$x <- xy[,1]
        grd@data$y <- xy[,2]


        classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
            str_extract(., pattern = ".*.tif$") %>%
            str_extract(., pattern = str_c(".*",grid.pattern, ".*")) %>%
            na.omit()

        grid.names <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
            str_extract(., pattern = ".*.tif$") %>%
            str_extract(., pattern = wau.grid.id.pattern) %>%
            str_sub(.,1,-2) %>%
            unique() %>%
            na.omit()

    grid.name = grid.names[7]

    cl <- makeCluster(cores)
        registerDoParallel(cl)


        error.df <- foreach(grid.name = grid.names, .combine = "rbind") %do% {

            pts <- grd[grd@data$unq__ID== grid.name,]

            classified.tile.paths.at.grid <- str_extract(classified.tile.paths, str_c(".*",grid.name,"_.*")) %>%
                na.omit()

             classified.tile.paths.at.grid = classified.tile.paths.at.grid %>%
                  str_extract(., ".*wausauNAIP.*") %>%
                  na.omit()

             classified.tile.path.at.grid = classified.tile.paths.at.grid[11]


            foreach(classified.tile.path.at.grid = classified.tile.paths.at.grid,
                    .combine = "rbind",
                    .packages = c("plyr","raster","dplyr", "stringr","ggplot2")) %dopar% {

                        classified.tile.name.at.grid <- basename(classified.tile.path.at.grid)
                        classified.tile <- raster(classified.tile.path.at.grid)

                        tgt <- str_extract(classified.tile.name.at.grid, "tree|grass|impervious|all")
                        tgt <- mapvalues(tgt, c("tree","grass","impervious","all"), c("t","g","i","a"))

                        ## png(str_c(dd.accuracy.dir,"/ClassifiedTiles/ClassifiedVersusGrid","/",names(classified.tile),".png"))
                        ## print(pts.on.classified.tile.plot(pts, classified.tile, target = tgt))
                        ##dev.off()

                        PixBool <- !is.na((str_extract(classified.tile.path.at.grid, "_Pixel_")))

                        if(!is.na(str_extract(classified.tile.path.at.grid, "_all_"))) {
                            error <- calcErrorAllMultinomial(pts, classified.tile, Pixel = PixBool)
                            error <- error %>%
                                t() %>%
                                data.frame() %>%
                                mutate(grid = grid.name,
                                       image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                       target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                       model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                       seg.params = str_extract(classified.tile.name.at.grid, seg.prms))
                            error
                        } else {
                            target = str_extract(classified.tile.name.at.grid, "tree|grass|impervious")
                            target <- mapvalues(target, c("tree","grass","impervious"), c("t","g","i"))
                            error <- calcErrorBinomial(pts, classified.tile, target, Pixel = PixBool)
                            error <- error %>%
                                t() %>%
                                data.frame() %>%
                                mutate(grid = grid.name,
                                       image =  str_extract(classified.tile.name.at.grid, image.pattern),
                                       target.cover = str_extract(classified.tile.name.at.grid, target.pattern),
                                       model =  str_extract(classified.tile.name.at.grid, model.pattern),
                                       seg.params = str_extract(classified.tile.name.at.grid, seg.prms))

                            error
                        }
                    }
        }



        saveRDS(error.df, str_c(derived.dir, /"point2pixel.error.df.Wausau.rds"))
  error.df <-readRDS(str_c(derived.dir, "/point2pixel.error.df.Wausau.rds"))

  error.df %>%
            arrange(overall.error) %>%
            head()

        error.df %>%
            arrange(desc(overall.error)) %>%
            head()

  error.df %>%
      filter(model == "rf_prob", target.cover == "tree") %>%
            arrange(desc(overall.error)) %>%
            head()



      error.df <- error.df %>%
            mutate(segment.size = ifelse(!is.na(str_extract(seg.params, ".*105.*")), 105,
                                  ifelse(!is.na(str_extract(seg.params, ".*60.*")), 60,
                                  ifelse(!is.na(str_extract(seg.params, ".*30.*")), 30,
                                  ifelse(!is.na(str_extract(seg.params, ".*70.*")), 105,
                                  ifelse(!is.na(str_extract(seg.params, ".*40.*")), 60,
                                  ifelse(!is.na(str_extract(seg.params, ".*20.*")), 30,1)))))))


#+END_SRC


#+BEGIN_SRC R :results graphics :file figs/grid.errors2.wausaufix.png :height 800 :width 600
  ggplot(error.df, aes(y = overall.error, x = grid, color = target.cover)) + geom_point() +
      facet_grid(image~seg.params)
#+END_SRC

#+BEGIN_SRC R :results graphics :file figs/grid.errors4.wausau.png :height 800 :width 600
  ggplot(error.df, aes(y = overall.error, x = grid, color = target.cover)) + geom_point() +
      facet_grid(image~segment.size)
#+END_SRC


#+BEGIN_SRC R :results graphics :file figs/grid.errors5.wausau.png :height 800 :width 600
  ggplot(error.df, aes(y = overall.error, x = segment.size)) +
      geom_point(data = error.df, aes(color = target.cover), position = position_dodge(width = 20)) +
      facet_grid(model~image)
#+END_SRC

#+BEGIN_SRC R :results graphics :file figs/grid.errors6.wausau.png :height 800 :width 800
  error.df.ssfac <- mutate(error.df, segment.size = factor(segment.size)) %>%
  filter(target.cover == "all")

      ggplot(error.df.ssfac, aes(y = overall.error, x = model)) +
          geom_boxplot(data = error.df.ssfac, aes(group = model)) +
          facet_grid(target.cover~image) +
	  geom_line(data = error.df.ssfac, aes(color = grid, group = grid), size = 1) +
	  theme_bw()
#+END_SRC

#+BEGIN_SRC R :results graphics :file figs/grid.errors6.wausau.tree.png :height 800 :width 800
  error.df.ssfac <- mutate(error.df, segment.size = factor(segment.size)) %>%
  filter(target.cover == "tree")

      ggplot(error.df.ssfac, aes(y = overall.error, x = model)) +
          geom_boxplot(data = error.df.ssfac, aes(group = model)) +
          facet_grid(target.cover~image) +
	  geom_line(data = error.df.ssfac, aes(color = grid, group = grid), size = 1) +
	  theme_bw()
#+END_SRC







#+BEGIN_SRC R :results graphics :file figs/grid.errors.tree.wausau.png :height 800 :width 800
  error.df.ssfac.tree <- filter(error.df.ssfac, target.cover == "all" | target.cover == "tree")

      ggplot(error.df.ssfac.tree, aes(y = pct.tree.classified.as.other)) +
          geom_boxplot(data = error.df.ssfac.tree, aes(color = target.cover, group = interaction(target.cover,segment.size))) +
          facet_grid(image~model)
#+END_SRC


#+BEGIN_SRC R :results graphics :file figs/grid.errors.grass.png :height 800 :width 800
  error.df.ssfac.grass <- filter(error.df.ssfac, target.cover == "all" | target.cover == "grass")

      ggplot(error.df.ssfac.grass, aes(y = pct.grass.classified.as.other, x = segment.size)) +
          geom_boxplot(data = error.df.ssfac.grass, aes(color = target.cover, group = interaction(target.cover,segment.size))) +
          facet_grid(model~image)
#+END_SRC

#+BEGIN_SRC R :results raw
  error.mod <- lm(overall.error ~ image * (target.cover + model + segment.size), data = error.df)
  tidy(error.mod) %>% ascii()
#+END_SRC

                                    term      estimate    std.error
1                             (Intercept)  0.2594736239 9.457737e-03
2                         imagepanshpSPOT  0.1727955729 1.522839e-02
3                       target.covergrass -0.0818909914 9.689578e-03
4                  target.coverimpervious -0.1373055644 9.689578e-03
5                        target.covertree -0.0611569996 9.689578e-03
6                            modelrf_resp  0.0001428180 8.391421e-03
7                           modelsvm_resp -0.0122835115 8.391421e-03
8                            segment.size -0.0001441090 8.903396e-05
9       imagepanshpSPOT:target.covergrass -0.0950710892 1.612641e-02
10 imagepanshpSPOT:target.coverimpervious  0.1013795711 1.612641e-02
11       imagepanshpSPOT:target.covertree -0.1345326137 1.612641e-02
12           imagepanshpSPOT:modelrf_resp  0.0004778158 1.396589e-02
13          imagepanshpSPOT:modelsvm_resp  0.1315548935 1.396589e-02
14           imagepanshpSPOT:segment.size -0.0008378628 1.489573e-04
      statistic       p.value
1   27.43506508 3.802666e-151
2   11.34693391  2.306554e-29
3   -8.45145037  4.066308e-17
4  -14.17043735  1.931840e-44
5   -6.31162645  3.083836e-10
6    0.01701953  9.864219e-01
7   -1.46381779  1.433277e-01
8   -1.61858472  1.056209e-01
9   -5.89536419  4.069309e-09
10   6.28655355  3.619056e-10
11  -8.34237580  1.011573e-16
12   0.03421307  9.727091e-01
13   9.41973196  7.679367e-21
14  -5.62485092  1.992621e-08

#+BEGIN_SRC R :results raw
options(asciiType = "org")
options(warn = -1)
  error.df %>%
      group_by(image, target.cover, model, seg.params) %>%
      summarize(overall.error = mean(overall.error)) %>%
      ungroup() %>%
      arrange(overall.error) %>%
      head(n=40) %>%
      ascii()
#+END_SRC



#+BEGIN_SRC R :results raw
  options(asciiType = "org")
  options(warn = -1)
    error.df %>%
        filter(target.cover == "all") %>%
        group_by(image, target.cover, model, seg.params) %>%
        summarize(overall.error = mean(overall.error)) %>%
        ungroup() %>%
        arrange(overall.error) %>%
        head(n=40) %>%
        ascii()
#+END_SRC



#+BEGIN_SRC R :results raw
  options(asciiType = "org")
  options(warn = -1)
    error.df %>%
        filter(target.cover == "all") %>%
        group_by(image, target.cover, model, seg.params) %>%
        summarize(pct.tree.classified.as.other = mean(pct.tree.classified.as.other)) %>%
        ungroup() %>%
        arrange(pct.tree.classified.as.other) %>%
        head(n=40) %>%
        ascii()

#+END_SRC


**** RMSE at grid level
***** Combine google earth grid estimates of cover with classified tile estimates of cover

 Create dataframe with structure:

 | %t.img | %g.img | %i.img | %o.img | image      | segmentation | target.cover        | target.type         | model                   | tile                   | cropped.to.n.pts | %t.goog | %g.goog | %i.goog | %o.goog |   |   |   |   |   |   |   |   |
 |--------+--------+--------+--------+------------+--------------+---------------------+---------------------+-------------------------+------------------------+------------------+---------+---------+---------+---------+---+---+---+---+---+---+---+---|
 |    0-1 |    0-1 |    0-1 |    0-1 | NAIP       | Pixel        | grass               | binomial (two)      | random forest prob      | mad-size-id (up to 50) |                4 |     0-1 |     0-1 |     0-1 |     0-1 |   |   |   |   |   |   |   |   |
 |        |        |        |        | panshpSPOT | 30 m2        | tree                | multinomial (three) | random forest resp      |                        |                9 |         |         |         |         |   |   |   |   |   |   |   |   |
 |        |        |        |        |            | 60 m2        | impervious          |                     | support vector machines |                        |               16 |         |         |         |         |   |   |   |   |   |   |   |   |
 |        |        |        |        |            |              | NA (if multinomial) |                     |                         |                        |               25 |         |         |         |         |   |   |   |   |   |   |   |   |
 |        |        |        |        |            | 105 m2       |                     |                     |                         |                        |              ... |         |         |         |         |   |   |   |   |   |   |   |   |



****** Create DF of % cover from grids cropped to different extents
 #+BEGIN_SRC R
        grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer)
        grd.df <- grd@data

   n.rows.and.columns.for.subset = c(15)

        out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {
            calc.pct.cvr.for.grid.subset(grd.df, n.rows.and.columns.for.sub)
        }

        Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets <- bind_rows(out)

   Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets <- Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets %>%
       rename(grid = unq__ID)

     saveRDS(Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets, str_c(derived.dir,"/","Wausau.Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.dataframe",".rds"))
 #+END_SRC

****** Create DF of % cover from classified rasters cropped to different extents

#+BEGIN_SRC R

    grd <- readOGR(dsn = grid.accuracy.region.dsn, layer = grid.accuracy.region.layer)


    # get path of grid tiles (not interested in fieldplot classified tiles)
        classified.tile.paths <- list.files(str_c(dd.accuracy.classified.dir), full.names = T) %>%
            str_extract(., pattern = ".*.tif$") %>%
            str_extract(., pattern = str_c(".*",wau.grid.id.pattern, ".*")) %>%
              na.omit()


  n.rows.and.columns.for.subset = c(15)


  cl <- makeCluster(cores)
  registerDoParallel(cl)


      out <- foreach(n.rows.and.columns.for.sub = n.rows.and.columns.for.subset) %do% {
             pct.class.cover <- foreach(tile.path = classified.tile.paths, .packages = c("raster","dplyr","stringr")) %dopar% {
               calculate.percent.cover.in.classified.tile(pts = grd,
                                                           tile.pth = tile.path,
                                                           n.rows.and.columns.subset = n.rows.and.columns.for.sub)

            }
                saveRDS(pct.class.cover, str_c(derived.dir,"/","Wausau.Percent.Cover.Classified.Tiles.nPoints",n.rows.and.columns.for.sub, ".rds"))
      }


  class.cover.files <- list.files(derived.dir, pattern = "Wausau.Percent.Cover.Classified.Tiles.nPoints*", full.names = T)

  class.cover.dfs <- lapply(class.cover.files, readRDS)

  out <- unlist(class.cover.dfs,recursive = F)

       Percent.Cover.Classified.Tiles.dataframe <- bind_rows(out)





  # delete this line if I run it again.
  ## Percent.Cover.Classified.Tiles.dataframe <-rename(Percent.Cover.Classified.Tiles.dataframe,
  ##                                                   image = tile,
  ##                                                   pct_g_pred = pct_g,
  ##                                                   pct_i_pred = pct_i,
  ##                                                   pct_t_pred = pct_t,
  ##                                                   pct_o_pred = pct_o)

    ## saveRDS(Percent.Cover.Classified.Tiles.dataframe, str_c(derived.dir,"/","Percent.Cover.Classified.Tiles.dataframe",".rds"))

#+END_SRC




****** Join Cover from Grids with predicted Cover from images
#+BEGIN_SRC R
    Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets <- readRDS(str_c(derived.dir,"/","Wausau.Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets.dataframe",".rds"))

    str(Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets)
    str(Percent.Cover.Classified.Tiles.dataframe)

  Percent.Cover.Classified.Tiles.dataframe %>%
      filter(seg.params == "Pixel") %>%
      data.frame() %>%
      head()

    Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets %>%
        filter(n.points == 400)


  #Percent.Cover.Classified.Tiles.dataframe <- Percent.Cover.Classified.Tiles.dataframe %>%
  #    rename(pct_g_pred = pct_g, pct_t_pred = pct_t, pct_i_pred = pct_i, pct_o_pred = pct_o)


    grid.master.df <- left_join(Percent.Cover.Classified.Tiles.dataframe, Percent.Cover.Grids.with.diff.targettypes.and.diff.subsets)

    # Should join by Joining by: c("grid", "target.cover", "n.points", "target.type")

    str(grid.master.df)

    grid.master.df %>%
  #      filter(n.points == 400) %>%
        data.frame() %>%
        head(n=40)




#+END_SRC


***** Make RMSE plots

#+BEGIN_SRC R :results graphics :file figs/wausauNAIP.100m.RMSE_plot.png :height 800 :width 600

    sub.for.rmse.plot <- grid.master.df %>%
        filter(target.type == "multinomial",
               image == "wausauNAIP",
               n.points == 225)


    ggplot(sub.for.rmse.plot, aes( x = pct.t.googleEarth, y = pct_t_pred, color = model)) +
  geom_point() + geom_smooth() + theme_classic() +
  geom_line(data = data.frame(pct.t.googleEarth = c(0,1), pct_t_pred = c(0,1), seg.params = "1:1"),
  color = "black", size = 1) +
  ggtitle("NAIP, n.pts: 225")

#+END_SRC



***** Calc RMSE table

 Create dataframe with structure:

 | RMSE | image | segmentation | target | model | cropped.to.n.pts | cover_type |   |   |   |   |   |   |   |
 |------+-------+--------------+--------+-------+------------------+------------+---+---+---+---+---+---+---|
 |      |       |              |        |       |                  |            |   |   |   |   |   |   |   |


****** Calc Error Column

#+BEGIN_SRC R
  error_tree <- grid.master.df %>%
      filter(target.cover == "tree" | target.cover == "all") %>%
      select(-target.cover) %>%
      group_by(image, model, n.points, seg.params, target.type) %>%
      mutate(t_error = (pct_t_pred - pct.t.googleEarth))

  error_tree %>%
      select(image, model, n.points, seg.params, target.type, grid, t_error) %>%
      filter(n.points == 225) %>%
      ungroup() %>%
      arrange(desc(abs(t_error))) %>%
      data.frame() %>%
      head(n=50)
#+END_SRC



#+BEGIN_SRC R

    RMSE_tree <- grid.master.df %>%
        filter(target.cover == "tree" | target.cover == "all") %>%
        select(-target.cover) %>%
        group_by(image, model, n.points, seg.params, target.type) %>%
        summarize(RMSE_t = sqrt( mean( (pct_t_pred - pct.t.googleEarth)^2, na.rm =T ) ) )

  RMSE_tree <- RMSE_tree %>%
      mutate(segment.size = ifelse(!is.na(str_extract(seg.params, ".*105.*")), 105,
                            ifelse(!is.na(str_extract(seg.params, ".*60.*")), 60,
                            ifelse(!is.na(str_extract(seg.params, ".*30.*")), 30,
                            ifelse(!is.na(str_extract(seg.params, ".*70.*")), 105,
                            ifelse(!is.na(str_extract(seg.params, ".*40.*")), 60,
                            ifelse(!is.na(str_extract(seg.params, ".*20.*")), 30,1)))))))
#+END_SRC

***** RMSE analysis

Which combination of image, segmentation, target, model and n.pts
(spatial scale) minimize error for each cover_type?

#+BEGIN_SRC R :results raw
options(asciiType = "org")
options(warn = -1)
  RMSE_tree %>%
      ungroup() %>%
      arrange(RMSE_t) %>%
      head(n = 30) %>%
      ascii()
#+END_SRC



Plot:
x = cropped.to.n.pts
y = RMSE
color = model
facet(segmentation~cover_type)

#+BEGIN_SRC R :results graphics :file figs/RMSE_tree_compare_n.ptsXRMSE.png :height 800 :width 600

  ggplot(RMSE_tree, aes(x = n.points, y = RMSE_t, color = model)) + geom_point() +
      facet_grid(segment.size~image)

#+END_SRC


#+BEGIN_SRC R :results graphics :file figs/RMSE_tree_compare_AreaXRMSE_NAIP_seg60.png
  RMSE_tree.sub <- RMSE_tree%>%
      filter(segment.size == 60, image == "madisonNAIP", target.type == "binomial", model == "svm_resp") %>%
      mutate(area_meters_squared = ((sqrt(n.points) - 1) * 7)^2)


  ggplot(RMSE_tree.sub, aes(x = area_meters_squared, y = RMSE_t), color = "blue") + geom_point() +
      labs(y = "Root Mean Squared Prediction Error \n for Percent Tree Cover") +
      theme_classic() +
      theme(axis.title = element_text(size = 24),
            axis.text =  element_text(size = 22)) +
      xlim(0,45000)

#+END_SRC


#+BEGIN_SRC R :results graphics :file figs/RMSE_tree_compare_seg.sizeXRMSE.png :height 800 :width 600

  ggplot(RMSE_tree, aes(x = segment.size, y = RMSE_t, color = n.points, group = interaction(n.points,target.type))) + geom_line() +
      facet_grid(model~image)

#+END_SRC


#+BEGIN_SRC R :results raw

  m1 <-lm(RMSE_t*100 ~ image * (model +  target.type + n.points * segment.size), data = RMSE_tree)
  tidy(m1, digits = 2) %>%
ascii()
#+END_SRC

** How accurate is NAIP?

If I use the grids, I can also show how naip accuracy changes with
grid characteristics like heterogeneity.

#+BEGIN_SRC R
  pts.robi <- readOGR(dsn = "../RD_Accuracy/PointsByRobi/", layer = "accuracy_cover_2500")
  proj4string(pts.robi) <- utm16
  #pts.robi <- spTransform(pts.robi, utm16)
  plot(pts.robi)

  madison <-  readOGR(dsn = "../RD_US_UrbanAreasShapefile", layer = "cb_2013_us_ua10_500k")
  madison <- madison[madison@data$NAME10 == "Madison, WI",]
  plot(madison, add = T)

  madison <- spTransform(madison, utm16)

  pts.urb <- over(pts.robi, madison) %>% na.omit()




#+END_SRC

#+begin_src R
table(cover, naip_cover
#+end_src

* Classify Every Urban Area in the State
** inputs
*** Raster Temp Dir
#+BEGIN_SRC R
R_raster_temp <- "../R_raster_temp"
dir.create(R_raster_temp)
rasterOptions(tmpdir=R_raster_temp)
#+END_SRC

#+results:
: Warning message:
: In dir.create(R_raster_temp) : '../R_raster_temp' already exists

*** Projections
#+BEGIN_SRC R
wtm <- CRS("+init=epsg:3070")
#+END_SRC

#+results:

*** cores
#+BEGIN_SRC R
cores <- detectCores() - 2
#+END_SRC

#+results:

*** Urban, Water, and Wetland shapefiles
#+BEGIN_SRC R
  urban.areas.dsn <- "../RD_merged_WIurbanAreas_and_incorporatedAreas"
  urban.areas.layer <- "Dissolve_Merge_WI_census_inc"

  ## urban.areas.dsn <- "../RD_US_UrbanAreasShapefile"
  ## urban.areas.layer <- "cb_2013_us_ua10_500k"


  water.dsn <- "../RD_WI-waterbody-24k"
  water.layer <- "WD-Hydro-Waterbody-WBIC-AR-24K"

  wetlands.dsn <- "../RD_Wetland"
  wetlands.layer <- "WI_Wetlands"

#+END_SRC

#+results:

*** Cropland Data Layer
#+BEGIN_SRC R
  crop.directory <- "../RD_CroplandDataLayer/"
  crop2010.name <- "CDL_2010_clip_20160128162252_788770535"
  crop2011.name <- "CDL_2011_clip_20160106190244_1504737741"
  crop2012.name <- "CDL_2012_clip_20151229124713_1037776543"
  crop2013.name <- "CDL_2013_clip_20151229123327_86558742"
  crop2014.name <- "CDL_2014_clip_20151229123327_86558742"

  n_croplandLayers <- 5

#+END_SRC

#+results:

*** NAIP tiles directory
#+BEGIN_SRC R
naip.dir <- "../../../../home/erker/NAIP_mount/NAIP13_WTM_TIFs"
#+END_SRC

#+results:

*** Model
#+BEGIN_SRC R
  model.path <- list.files("../DD/Models",full.names = F) %>% str_extract(".*best_mad_model.*") %>% na.omit()
#+END_SRC

#+results:

*** PCA
#+BEGIN_SRC R
madison.naip.pca.path <- "../DD/Madison_pca/madisonNAIP_pca.rds"
#+END_SRC

#+results:

*** Output Directories
#+BEGIN_SRC R
derived.dir <- "../DD/"
classified.urban.areas.dir <- paste0(derived.dir, "ClassifiedUrbanAreas/")
dir.create(classified.urban.areas.dir)
#+END_SRC

#+results:
: Warning message:
: In dir.create(classified.urban.areas.dir) :
:   '../DD/ClassifiedUrbanAreas' already exists

*** filename appendages
#+BEGIN_SRC R
  ## ratio.tile.name.append = "_ratio"
  ## pca.tile.name.append = "_pca"
  ## seg.tile.name.append = paste0("_N-",segment_size,"_C-",compactness)
  ## segmentFeatureDF.append = "_SegFeatureDF"
#+END_SRC

#+results:

*** segment.params
#+begin_src R
  prms <- str_match(model.path, ".*_N-([0-9]+)_C-([0-9]+).*")
  C <- prms[,2]
  ss <- prms[,3]

  segment.params <- data.frame(compactness = C, segment.size = ss)
#+end_src
** Reproject shapefiles to be wtm, the same as the images
#+BEGIN_SRC R
  urban <- readOGR(dsn = urban.areas.dsn, layer = urban.areas.layer)
#  water <- readOGR(dsn = water.dsn, layer = water.layer)

  # Both are already in wtm, no need to transform
#+END_SRC

#+results:
: OGR data source with driver: ESRI Shapefile
: Source: "../RD_merged_WIurbanAreas_and_incorporatedAreas", layer: "Dissolve_Merge_WI_census_inc"
: with 1 features
: It has 1 fields

** Disaggregate Urban Area Polygons

#+BEGIN_SRC R
  urb.polys <- disaggregate(as(urban, "SpatialPolygons"))
#+END_SRC

#+results:

** Load NAIP tifs
#+BEGIN_SRC R
  naip.tif.names <- list.files(naip.dir, recursive = T, full.names = T) %>%
    str_extract(pattern = ".*tif$") %>%
    na.omit()
#+END_SRC

#+results:

#+BEGIN_SRC R
  naip.stacks <- lapply(naip.tif.names, function(tif) {
      r <- stack(tif)
  })
#+END_SRC

#+results:

#+BEGIN_SRC R
naip.extents <- lapply(naip.stacks, function(naip.stack) {
extent(naip.stack)
})
#+END_SRC

#+results:

*** For urban areas below the median size in the state, do parallel
  Eventually Parallelize at this step in the process

#+begin_src R
  areas <- foreach(i = 1:length(urb.polys), .combine = "rbind") %do% gArea(urb.polys[i])
  quant <- quantile(areas[,1],probs = .5)
  i_areas_less_quant <- which(areas[,1] < quant)
#+end_src

#+results:

 #+BEGIN_SRC R
              cl <- makeCluster(cores)
              registerDoParallel(cl)

   #      out <- foreach(i = 1:length(urb.polys)) %do% {

         out <- foreach(i = i_areas_less_quant) %do% {
              urb.poly <- urb.polys[i]


         ## out <- foreach(i = 1:length(urb.polys),
         ##               .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr")) %dopar% {

#+END_SRC

**** Set temp dir for this urban area
#+BEGIN_SRC R
temp_i <- paste0(R_raster_temp,"/",i)
dir.create(temp_i)
rasterOptions(tmpdir=temp_i)
#+END_SRC

#+results:

**** Make output dir for this urban area
#+BEGIN_SRC R
urb.path <- paste0(classified.urban.areas.dir, i)
dir.create(urb.path)
#+END_SRC

#+results:

**** Get names of NAIP tiles that intersect with Urban Area
#+BEGIN_SRC R
       tiles.in.urban <-  lapply(naip.extents, function(naip.extent) {
           inter <- raster::intersect(naip.extent, extent(urb.poly))
           ifelse(is.null(inter), F, T)
         })

  tile.index <- which(unlist(tiles.in.urban))

  tiles.names.at.urb.poly <- naip.tif.names[tile.index]

#+END_SRC

#+results:

**** For each NAIP tile that intersects with Urban Area
#+BEGIN_SRC R

      foreach(tile.name.at.urb.poly = tiles.names.at.urb.poly,
                     .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr")) %dopar% {

    ## }

  ##   tile.name.at.urb.poly <- tiles.names.at.urb.poly[[1]]
#+END_SRC

***** Make output dir for this tile
#+BEGIN_SRC R
  tile.name <- basename(tile.name.at.urb.poly) %>%
    str_sub(start = 1, end = -5)  # remove .tif
  tile.urb.path <- paste0(urb.path,"/",tile.name)
  dir.create(tile.urb.path)
paste("make tile output dir", tile.urb.path)
#+END_SRC

#+results:
: [1] "make tile output dir ../DD/ClassifiedUrbanAreas/809/m_4609223_nw_15_1_20130618_w"

***** TODO Crop to intersection of image and Urban Extent; Add a buffer to urban extent??


#+BEGIN_SRC R
                                          # Crop image
  eu <- extent(urb.poly)
  ei <- extent(raster(tile.name.at.urb.poly))
  e <- raster::intersect(ei,eu)

  inFile <- tile.name.at.urb.poly
  outFile <- str_c(tile.urb.path,"/urbanExtent.tif")

  gdal_translate(inFile, outFile,
                 projwin = c(xmin(e), ymax(e), xmax(e), ymin(e)))


  message("Crop to Urban Extent")
#+END_SRC

#+results:
:  NULL
: Crop to Urban Extent

***** Generate Feature data frame
#+begin_src R
      make.feature.df(image.dir = tile.urb.path,
                      image.name = "urbanExtent",
                      band.names = c("blue","green","red","nir"),
                      ndvi = T,
                      ratio.bands = c("blue","green","red","nir"),
                      texture.params.df = texture.params,
                      pixel.df = F,
                      pca.source.image.name = "madisonNAIP",
                      segmentation = T,
                      segment.params.df = segment.params,
                      seg.dir.up = " ../../../../")

#+end_src

***** Classify


****** Apply model to Segment Feature data frame and generate classified raster
#+BEGIN_SRC R

  classify.segmented.raster.unnestedModel(segment.feature.df.dir = tile.urb.path,
                            segment.dir = tile.urb.path,
                            model.dir = Models.dir,
                            model.name.rds = model.path,
                            segment.feature.appendage = paste0("_N-",ss,"_C-",C,segmentFeatureDF.appendage),
                            segmentation.appendage = paste0("_N-",ss,"_C-",C,".tif"),
                            segmentation.prms = paste0("_N-",ss,"_C-",C),
                            classify.out.dir,
                            tile.name = "urbanExtent")


#+END_SRC

#+results:
:  Error in eval(expr, envir, enclos) (from #17) : object 'blue_mean' not found
: Timing stopped at: 2.852 0 2.859

#+BEGIN_SRC R
  message("Done with",tile.urb.path)
  }
#+END_SRC

**** Merge NAIP Tiles if there is more than one over an urban area and Save Classified image as <UrbanArea>.tif
#+BEGIN_SRC R
    classified.tiles <- list.files(urb.path, recursive = T, full.names = T)  %>%
      str_extract(pattern = ".*classified_urbanExtent.*tif$") %>%
  na.omit()




  rlist <- lapply(classified.tiles, stack)

  out <- do.call(mosaic, c(rlist,list(fun = mean, tolerance = 0.5)))

  writeRaster(x = out, filename = paste0(urb.path,"/ClassifiedUrbanArea_",i,".tif"), overwrite = T)
  paste0("Wrote ","ClassifiedUrbanArea_",i,".tif")

#+END_SRC



**** Delete intermediate steps
#+BEGIN_SRC R
  intermediate.work <- list.files(urb.path, full.names = T)
  intermediate.work <- intermediate.work[!grepl(intermediate.work,pattern = ".*(tif)$", perl = T)]
  unlink(intermediate.work, recursive = T)

  unlink(temp_i, recursive = T)

#+END_SRC

**** End Loop for all urban areas
#+BEGIN_SRC R
}
#+END_SRC

**** Mask Classified image, Post Processing
***** Mask Out Wetlands Post Processing
***** Mask out water
***** Mask out croplands






*** For urban areas above the median size in the state, do sequential (or parallel within urban area?)
  Eventually Parallelize at this step in the process

#+begin_src R
  areas <- foreach(i = 1:length(urb.polys), .combine = "rbind") %do% gArea(urb.polys[i])
  quant.85 <- quantile(areas[,1],probs = .5)
  i_areas_less_85quant <- which(areas[,1] < quant.85)
#+end_src

 #+BEGIN_SRC R
           cl <- makeCluster(cores)
           registerDoParallel(cl)

#      out <- foreach(i = 1:length(urb.polys)) %do% {

      out <- foreach(i = i_areas_less_85quant) %do% {
           urb.poly <- urb.polys[i]


      ## out <- foreach(i = 1:length(urb.polys),
      ##               .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr")) %dopar% {

#+END_SRC

**** Set temp dir for this urban area
#+BEGIN_SRC R
temp_i <- paste0(R_raster_temp,"/",i)
dir.create(temp_i)
rasterOptions(tmpdir=temp_i)
#+END_SRC

**** Make output dir for this urban area
#+BEGIN_SRC R
urb.path <- paste0(classified.urban.areas.dir, i)
dir.create(urb.path)
#+END_SRC

**** Get names of NAIP tiles that intersect with Urban Area
#+BEGIN_SRC R
       tiles.in.urban <-  lapply(naip.extents, function(naip.extent) {
           inter <- raster::intersect(naip.extent, extent(urb.poly))
           ifelse(is.null(inter), F, T)
         })

  tile.index <- which(unlist(tiles.in.urban))

  tiles.names.at.urb.poly <- naip.tif.names[tile.index]

#+END_SRC

**** For each NAIP tile that intersects with Urban Area
#+BEGIN_SRC R

      foreach(tile.name.at.urb.poly = tiles.names.at.urb.poly,
                     .packages = c("sp","raster","rgdal","rgeos", "stringr","doParallel","gdalUtils","plyr","dplyr","mlr")) %dopar% {

    ## }

  ##   tile.name.at.urb.poly <- tiles.names.at.urb.poly[[1]]
#+END_SRC

***** Make output dir for this tile
#+BEGIN_SRC R
  tile.name <- basename(tile.name.at.urb.poly) %>%
    str_sub(start = 1, end = -5)  # remove .tif
  tile.urb.path <- paste0(urb.path,"/",tile.name)
  dir.create(tile.urb.path)
paste("make tile output dir", tile.urb.path)
#+END_SRC

***** Crop to intersection of image and Urban Extent
#+BEGIN_SRC R
                                          # Crop image
  eu <- extent(urb.poly)
  ei <- extent(raster(tile.name.at.urb.poly))
  e <- raster::intersect(ei,eu)

  inFile <- tile.name.at.urb.poly
  outFile <- str_c(tile.urb.path,"/urbanExtent.tif")

  gdal_translate(inFile, outFile,
                 projwin = c(xmin(e), ymax(e), xmax(e), ymin(e)))


  message("Crop to Urban Extent")
#+END_SRC

***** Generate Feature data frame

****** Add ratios
#+BEGIN_SRC R

  add.ratios.ndvi(tile.dir = tile.urb.path,
                  tile.name = "urbanExtent",
                  out.tile.name.append = ratio.tile.name.append)
"Ratios Added"
#+END_SRC

****** Perform PCA
Apply the pca transformation from Madison area

******* read in madison pca
#+BEGIN_SRC R
pca <- readRDS(madison.naip.pca.path)
#+END_SRC

******* Apply pca transformation
#+BEGIN_SRC R
  image.pca.forWholeState(tile.dir = tile.urb.path,
                          tile.name = "urbanExtent",
                          pca.transform = pca)
"PCA tranform applied"
#+END_SRC
****** Segment image

#+BEGIN_SRC R
o.wd <- getwd()
setwd(tile.urb.path)
system(paste0("python ../../../../code/fia_segment_cmdArgs.py ",pixel_size," ",segment_size," ",compactness," urbanExtent"))
setwd(o.wd)
"Image Segmented"
#+END_SRC

****** Create Segment Feature Data frame
#+BEGIN_SRC R

   Create.Segment.Feature.df.forWholeState <- function(tile.dir,
                                                       tile.name,
                                                       ratio.appendage = ratio.tile.name.append,
                                                       band.names = band.names.wRatios,
                                                       seg.appendage = seg.tile.name.append){


       ratio.tile.path <- str_c(tile.dir, "/", tile.name, ratio.tile.name.append, ".tif")
       r.tile <- stack(ratio.tile.path)

       names(r.tile) <- band.names

       seg.tile.path <-  str_c(tile.dir, "/", tile.name,seg.tile.name.append,".tif")
       s.tile <- raster(seg.tile.path)

                                           # Create a data_frame where mean and variances are calculated by zone
       x <- as.data.frame(r.tile, xy = T)
       s <- as.data.frame(s.tile)
       colnames(s) <- "segment"
       r <- bind_cols(x,s)
       r2 <- r %>%
           group_by(segment)
  ## %>%
  ##          mutate(x.center = x - quantile(x = x, probs = .5),
  ##                 y.center = y - quantile(x = y, probs = .5))

       ## spatial.model.coef <- r2 %>%
       ##     do(fitXYlm(x = .$x.center, y = .$y.center, z = .$n_ratio))

       mean.and.sd <- r2 %>%
           summarize(mean(blue),
                     mean(green),
                     mean(red),
                     mean(nir),
                     mean(b_ratio),
                     mean(g_ratio),
                     mean(r_ratio),
                     mean(n_ratio),
                     mean(ndvi),
                     sd(blue),
                     sd(green),
                     sd(red),
                     sd(nir),
                     sd(b_ratio),
                     sd(g_ratio),
                     sd(r_ratio),
                     sd(n_ratio),
                     sd(ndvi))

       tile.name = data.frame(tile.name = rep(tile.name, nrow(mean.and.sd)))

       ## out <- left_join(spatial.model.coef, mean.and.sd) %>%
       ##     bind_cols(., tile.name)

                                       out <- bind_cols(mean.and.sd, tile.name)

       names <- colnames(out)
       names <- str_replace(names, "\\(",".")
       names <- str_replace(names, "\\)",".")
       names <- str_replace(names, "\\:",".")
       colnames(out) <- names
       out
   }



   band.names.wRatios <- c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi")
   seg.tile.name.append = paste0("_N-",segment_size,"_C-",compactness)

   seg.df <-  Create.Segment.Feature.df.forWholeState(
       tile.dir = tile.urb.path,
       tile.name = "urbanExtent"
   )

   saveRDS(seg.df, file = paste0(tile.urb.path,"/", "urbanExtent",segmentFeatureDF.append,".rds"))

"Segment Feature DF Created"
#+END_SRC

***** Classify

****** Read in Model
#+BEGIN_SRC R
model.path <- "../DD/Models/madisonNAIP_N-30_C-15.models.rds"
model <- readRDS(model.path)
#+END_SRC

****** Select Random Forest with Target of Tree, Grass, and impervious
#+BEGIN_SRC R
model <- model[[1]][[1]]
#+END_SRC

****** Apply model to Segment Feature data frame and generate classified raster
#+BEGIN_SRC R

  classify.segmented.raster.forWholeState <- function(segment.feature.df.dir,
                                                      segment.dir,
                                                      model = model,
                                                      segment.feature.appendage = segment.feature.df.name.append,
                                                      segmentation.appendage = segment.tile.name.append,
                                                      segmentation.prms,
                                                      classify.out.dir,
                                                      tile.name) {

      df <- readRDS(paste0(segment.feature.df.dir,"/",tile.name,segment.feature.appendage,".rds"))
      seg.path <- paste0(segment.dir,"/",tile.name,segmentation.appendage,".tif")
      seg <- raster(seg.path)
                                          #       dfRowsWithNA <- which(is.na(df[,2]))
      complete.df <- df[complete.cases(df),] # svm can't predict with NAs

      mod <- model
      pred <- predict(mod, newdata = complete.df)
      response <- factor(as.character(pred$data$response), levels = c("g","i","t","o"))
      m <- cbind(zone = complete.df$segment, response)
      m <- left_join(as.data.frame(df["segment"]), as.data.frame(m), by = c("segment" = "zone"))

      seg.df <- as.data.frame(seg, xy = T)

      colnames(seg.df) <- c("x","y","segID")
      seg.df1 <- mutate(seg.df, class = plyr::mapvalues(segID, from = m$segment, to = m$response))

      r <- setValues(seg, values = seg.df1$class)
      names(r) <- "class"

      if (ncol(pred$data) > 2) {
          prob <- (pred$data[,grep("prob.*", x = colnames(pred$data))]) # get columns that contain probabilities
          ProbOfClass <- apply(prob, MARGIN = 1, FUN = max)
          m <- cbind(segment = complete.df$segment, ProbOfClass)
          m <- left_join(as.data.frame(df["segment"]), as.data.frame(m))

          seg.df2 <- mutate(seg.df, ProbOfClass = plyr::mapvalues(segID, from = m$segment, to = m$ProbOfClass))
          p <- setValues(seg, values = seg.df2$ProbOfClass)
          r <- stack(r,p)
          names(r) <- c("class","prob")
      }

          path <- paste0(segment.dir,"/classified_",tile.name,"_",seg.tile.name.append,"_",mod$task.desc$id,"_",mod$learner$id,".tif")
          writeRaster(r, path, overwrite=TRUE)
          print(path)

  }

  classify.segmented.raster.forWholeState(segment.feature.df.dir = tile.urb.path,
                                          segment.dir = tile.urb.path,
                                          classify.out.dir = tile.urb.path,
                                          tile.name = "urbanExtent",
                                          segmentation.appendage = seg.tile.name.append,
                                          model = model,
                                          segment.feature.appendage = segmentFeatureDF.append)

message("Image Classified")


#+END_SRC

#+BEGIN_SRC R
  message("Done with",tile.urb.path)
  }
#+END_SRC

**** Merge NAIP Tiles if there is more than one over an urban area and Save Classified image as <UrbanArea>.tif
#+BEGIN_SRC R
    classified.tiles <- list.files(urb.path, recursive = T, full.names = T)  %>%
      str_extract(pattern = ".*classified_urbanExtent.*tif$") %>%
  na.omit()




  rlist <- lapply(classified.tiles, stack)

  out <- do.call(mosaic, c(rlist,list(fun = mean, tolerance = 0.5)))

  writeRaster(x = out, filename = paste0(urb.path,"/ClassifiedUrbanArea_",i,".tif"), overwrite = T)
  paste0("Wrote ","ClassifiedUrbanArea_",i,".tif")

#+END_SRC



**** Delete intermediate steps
#+BEGIN_SRC R
  intermediate.work <- list.files(urb.path, full.names = T)
  intermediate.work <- intermediate.work[!grepl(intermediate.work,pattern = ".*(tif)$", perl = T)]
  unlink(intermediate.work, recursive = T)

  unlink(temp_i, recursive = T)

#+END_SRC

**** End Loop for all urban areas
#+BEGIN_SRC R
}
#+END_SRC

**** Mask Classified image, Post Processing
***** Mask Out Wetlands Post Processing
***** Mask out water
***** Mask out croplands
*** Test gdal merge

#+begin_src R :session *R:testgdal*

 r1 <- raster(


#+end_src
