#    -*- mode: org -*-


Archived entries from file /ssh:erker@kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org


* Build and Save Models
:PROPERTIES:
:ARCHIVE_TIME: 2016-06-09 Thu 13:59
:ARCHIVE_FILE: /ssh:erker@kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org
:ARCHIVE_OLPATH: Functions
:ARCHIVE_CATEGORY: utc
:END:
#+BEGIN_SRC R
  Build.and.Save.models <- function(
                                    dir = dd.training.dir,
                                    modelBuildingData = ModelBuildingRDS,
                                    models.dir = Models.dir,
                                    image.name){

      dat <- readRDS(paste0(dir,"/",modelBuildingData)) %>%
          as.data.frame()

      image.and.segmentation.stem = str_replace(modelBuildingData, ModelBuilding.appendage,"")

      names <- colnames(dat)
      names <- str_replace(names, "\\(",".")
      names <- str_replace(names, "\\)",".")
      names <- str_replace(names, "\\:",".")
      colnames(dat) <- names

      dat_G <- dat %>%
          mutate(Class = as.character(Class),
                 Class = ifelse(Class == "g", Class, "o"))

      dat_I <- dat %>%
          mutate(Class = as.character(Class),
                 Class = ifelse(Class == "i", Class, "o"))

      dat_T <- dat %>%
          mutate(Class = as.character(Class),
                 Class = ifelse(Class == "t", Class, "o"))

                                          # Create Tasks
      all.task <- makeClassifTask(id = paste0(image.name,"_all"), data = dat, target = "Class")
      grass.task <- makeClassifTask(id = paste0(image.name,"_grass"), data = dat_G, target = "Class")
      impervious.task <- makeClassifTask(id = paste0(image.name,"_impervious"), data = dat_I, target = "Class")
      tree.task <- makeClassifTask(id = paste0(image.name,"_tree"), data = dat_T, target = "Class",positive = "t")

      task.list <- list(all = all.task, grass = grass.task, impervious = impervious.task, tree = tree.task)

                                          # Make Learners
      RF_prob <- makeLearner(id = "rf_prob","classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
      RF_response <- makeLearner(id = "rf_resp", "classif.randomForest", predict.type = "response", fix.factors.prediction = TRUE)
      SVM_response <- makeLearner(id = "svm_resp", "classif.svm", predict.type = "response", fix.factors.prediction = TRUE)

      learner.list <- list(RF_prob = RF_prob, RF_response = RF_response, SVM_response = SVM_response)

                                          # Train Learners on Tasks, Make models
                                          #         cl<-makeCluster(cores)
                                          #         registerDoParallel(cl)

      models <- foreach(tsk = task.list, .packages = "mlr") %do% {
          foreach(lnr = learner.list) %do% {
              mod <- train(lnr, tsk)
              mod
          }
      }
      saveRDS(models, file = paste0(models.dir,"/",image.and.segmentation.stem, models.appendage))
  }

#+END_SRC

#+RESULTS:

* old ratio function
:PROPERTIES:
:ARCHIVE_TIME: 2016-06-29 Wed 13:02
:ARCHIVE_FILE: /ssh:erker@kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org
:ARCHIVE_OLPATH: Functions
:ARCHIVE_CATEGORY: utc
:END:
#+begin_src R
  add.ratios.ndvi <- function(tile.dir,
                              tile.name,
                              out.tile.name.append = ratio.tile.name.append,
                              band.names = c("blue","green","red","nir"),
                              red.band.number = 3,
                              nir.band.number = 4) {

      in.tile.path <- str_c(tile.dir, "/", tile.name, ".tif")
      tile <- stack(in.tile.path)
      names(tile) <- band.names

                                          # Create a ratio image for each band
      ratio.brick <- ratio(tile)
      ratio.brick <- ratio.brick*200 # rescale ndvi to save as 'INT1U'
      names(ratio.brick) <- paste0(band.names,rep("_ratio",times = 4))
      ndvi <- ndvi_nodrop(tile, red.band.number, nir.band.number)
      ndvi <- (ndvi+1)*100 # rescale ndvi to savep as 'INT1U'

                                          # if tile is not scaled 0-255, do it here
      if (getRasterMax(tile) > 255) {
          min <- getRasterMin(tile)
          max <- getRasterMax(tile)
          tile <- rescale.0.255(tile,min,max)
      }

      ratio.tile <- raster::stack(tile, ratio.brick, ndvi)
      writeRaster(ratio.tile,
                  filename = paste0(tile.dir,"/",tile.name,out.tile.name.append, ".tif"),
                  overwrite = T,
                  datatype = 'INT1U')
  }
#+END_SRC

#+RESULTS:


* old add texture [2016-06-29 Wed]
:PROPERTIES:
:ARCHIVE_TIME: 2016-06-29 Wed 16:18
:ARCHIVE_FILE: /ssh:erker@kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org
:ARCHIVE_OLPATH: Functions
:ARCHIVE_CATEGORY: utc
:END:
#+begin_src R

  add.texture <- function(tile.dir = dd.training.dir,
                          tile.name = i,
                          ratio.append = ratio.tile.name.append,
                          band.num = 8,
                          window = list(c(3,3), c(5,5)),
                          statistics = c("homogeneity", "contrast", "correlation"),
                          shift = list(c(0,1),c(1,0),c(1,1),c(-1,1))) {

      sta <- stack(paste0(tile.dir,"/",tile.name, ratio.append,".tif"))
      ras <- sta[[band.num]]

      out <- lapply(window, FUN = function(win) {
          lapply(shift, FUN = function(sft) {
              lapply(statistics, FUN = function(stcs) {
                  win.size <- paste0("window-",win[1])
                  shift.dir <- paste0("angle-",atan(sft[1]/sft[2])*180/pi) # calc shift angle
                  tex.ras <- glcm(ras, window = win, statistics = stcs, shift = sft, na_opt = "ignore", na_val = NA)
                  fn = paste0(tile.dir,"/", tile.name, "_stat-", stcs, "_", win.size,"_",shift.dir,".tif")
                  writeRaster(tex.ras, filename = fn, overwrite = T)
              })
          })
      })

      out
  }

#+end_src

#+results:


* old model.building.df
:PROPERTIES:
:ARCHIVE_TIME: 2016-07-01 Fri 13:51
:ARCHIVE_FILE: /ssh:kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org
:ARCHIVE_OLPATH: Functions
:ARCHIVE_CATEGORY: utc
:END:
#+begin_src R

    ## Create.Segment.Feature.df <- function(tile.dir,
    ##                                       tile.name,
    ##                                       ratio.appendage = ratio.tile.name.append,
    ##                                       texture.pattern,
    ##                                       band.names = band.names.wRatios){

    ##                                         #tile.name.stem everything before segmentation parameters
    ##     tile.name.stem = str_replace(tile.name, pattern = segmentation.layer.pattern, "")

    ##     tex.raster.names <- list.files(tile.dir, pattern = paste0(i,"_",texture.pattern,".tif$"), full.names = T)
    ##     tex.band.names <- str_extract(tex.raster.names, texture.pattern)
    ##     tex <- sapply(tex.raster.names, raster) %>% stack()
    ##     names(tex) <- tex.band.names

    ##     ratio.tile.path <- str_c(tile.dir, "/", tile.name.stem, ratio.tile.name.append, ".tif")
    ##     r.tile <- stack(ratio.tile.path)
    ##     names(r.tile) <- band.names

    ##     r.tile <- stack(r.tile, tex)

    ##     seg.tile.path <-  str_c(tile.dir, "/", tile.name,".tif")
    ##     s.tile <- raster(seg.tile.path)

    ##                                         # Create a data_frame where mean and variances are calculated by zone
    ##     x <- as.data.frame(r.tile, xy = T)
    ##     s <- as.data.frame(s.tile)
    ##     colnames(s) <- "segment"
    ##     r <- bind_cols(x,s)
    ##     r2 <- r %>%
    ##         group_by(segment) %>%
    ##         mutate(x.center = x - quantile(x = x, probs = .5),
    ##                y.center = y - quantile(x = y, probs = .5))

    ##     spatial.model.coef <- r2 %>%
    ##         do(fitXYlm(x = .$x.center, y = .$y.center, z = .$n_ratio))

    ##     mean.and.sd <- r2 %>%
    ##         summarize(mean(blue),
    ##                   mean(green),
    ##                   mean(red),
    ##                   mean(nir),
    ##                   mean(b_ratio),
    ##                   mean(g_ratio),
    ##                   mean(r_ratio),
    ##                   mean(n_ratio),
    ##                   mean(ndvi),
    ##                   sd(blue),
    ##                   sd(green),
    ##                   sd(red),
    ##                   sd(nir),
    ##                   sd(b_ratio),
    ##                   sd(g_ratio),
    ##                   sd(r_ratio),
    ##                   sd(n_ratio),
    ##                   sd(ndvi))

    ##     tile.name = data.frame(tile.name = rep(tile.name.stem, nrow(mean.and.sd)))

    ##     out <- left_join(spatial.model.coef, mean.and.sd) %>%
    ##         bind_cols(., tile.name)

    ##     names <- colnames(out)
    ##     names <- str_replace(names, "\\(",".")
    ##     names <- str_replace(names, "\\)",".")
    ##     names <- str_replace(names, "\\:",".")
    ##     colnames(out) <- names
    ##     out
    ## }

    ## Create.Segment.Feature.df.noLM <- function(tile.dir,
    ##                                            tile.name,
    ##                                            ratio.appendage = ratio.tile.name.append,
    ##                                            band.names = band.names.wRatios){

    ##                                         #tile.name.stem everything before segmentation parameters
    ##     tile.name.stem = str_replace(tile.name, pattern = segmentation.layer.pattern, "")

    ##     ratio.tile.path <- str_c(tile.dir, "/", tile.name.stem, ratio.tile.name.append, ".tif")
    ##     r.tile <- stack(ratio.tile.path)

    ##     names(r.tile) <- band.names

    ##     seg.tile.path <-  str_c(tile.dir, "/", tile.name,".tif")
    ##     s.tile <- raster(seg.tile.path)

    ##                                         # Create a data_frame where mean and variances are calculated by zone
    ##     x <- as.data.frame(r.tile, xy = T)
    ##     s <- as.data.frame(s.tile)
    ##     colnames(s) <- "segment"
    ##     r <- bind_cols(x,s)
    ##     r2 <- r %>%
    ##         group_by(segment)

    ##     mean.and.sd <- r2 %>%
    ##         summarize(mean(blue),
    ##                   mean(green),
    ##                   mean(red),
    ##                   mean(nir),
    ##                   mean(b_ratio),
    ##                   mean(g_ratio),
    ##                   mean(r_ratio),
    ##                   mean(n_ratio),
    ##                   mean(ndvi),
    ##                   sd(blue),
    ##                   sd(green),
    ##                   sd(red),
    ##                   sd(nir),
    ##                   sd(b_ratio),
    ##                   sd(g_ratio),
    ##                   sd(r_ratio),
    ##                   sd(n_ratio),
    ##                   sd(ndvi))

    ##     tile.name = data.frame(tile.name = rep(tile.name.stem, nrow(mean.and.sd)))

    ##     out <- bind_cols(mean.and.sd, tile.name)

    ##     names <- colnames(out)
    ##     names <- str_replace(names, "\\(",".")
    ##     names <- str_replace(names, "\\)",".")
    ##     names <- str_replace(names, "\\:",".")
    ##     colnames(out) <- names
    ##     out
    ## }

    ## fitXYlm <- function(x,y,z) {
    ##     if(is.na(sum(z))) {
    ##         z <- rep(0, length(z))
    ##     }
    ##     dat <- data.frame(x,y,z)
    ##     mod <- lm(z ~ x * y, data = dat)
    ##     coefs <-tidy(mod) %>%
    ##         dplyr::select(term,estimate) %>%
    ##         spread(key = term, value = estimate)

    ##     error <- glance(mod) %>%
    ##         select(sigma)

    ##     bind_cols(coefs,error)
    ## }
#+end_src

* old segment.feature.df
:PROPERTIES:
:ARCHIVE_TIME: 2016-07-01 Fri 13:52
:ARCHIVE_FILE: /ssh:kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org
:ARCHIVE_OLPATH: Functions
:ARCHIVE_CATEGORY: utc
:END:
#+BEGIN_SRC R

  Create.Segment.Feature.df <- function(tile.dir,
                                          tile.name,
                                          ratio.appendage = ratio.tile.name.append,
                                          tex.pattern = texture.pattern,
                                          band.names = band.names.wRatios){

                                            #tile.name.stem everything before segmentation parameters

  tile.name.stem = str_replace(tile.name, pattern = segmentation.layer.pattern, "")

        tex.raster.names <- list.files(tile.dir, pattern = paste0(tile.name.stem,"_",tex.pattern,".tif$"), full.names = T)
        tex.band.names <- str_extract(tex.raster.names, texture.pattern)
        tex <- sapply(tex.raster.names, raster) %>% stack()
        names(tex) <- tex.band.names

        ratio.tile.path <- str_c(tile.dir, "/", tile.name.stem, ratio.tile.name.append, ".tif")
        r.tile <- stack(ratio.tile.path)
        names(r.tile) <- band.names

        r.tile <- stack(r.tile, tex)

        seg.tile.path <-  str_c(tile.dir, "/", tile.name,".tif")
        s.tile <- raster(seg.tile.path)

                                            # Create a data_frame where mean and variances are calculated by zone
        x <- as.data.frame(r.tile, xy = T)
        s <- as.data.frame(s.tile)
        colnames(s) <- "segment"
        r <- bind_cols(x,s)
        r2 <- r %>%
            group_by(segment)

        mean.and.sd <- r2 %>%
            summarize_each(funs(mean(.,na.rm = T), sd(., na.rm = T))) %>%
          select(-x_mean, -y_mean)

        tile.name = data.frame(tile.name = rep(tile.name.stem, nrow(mean.and.sd)))

        out <- bind_cols(mean.and.sd, tile.name)


        names <- colnames(out)
        names <- str_replace(names, "\\(",".")
        names <- str_replace(names, "\\)",".")
        names <- str_replace(names, "\\:",".")
        colnames(out) <- names
        out
    }

#+END_SRC

#+RESULTS:


* old modelbuilding.df
:PROPERTIES:
:ARCHIVE_TIME: 2016-07-01 Fri 13:52
:ARCHIVE_FILE: /ssh:kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org
:ARCHIVE_OLPATH: Functions
:ARCHIVE_CATEGORY: utc
:END:
#+begin_src R
  ## create.df.toBuildModel.fromTrainingPolygons.and.SegmentFeatureDFs <- function(manuallyClassifiedPolygondir,
  ##                                                                               image.dir,
  ##                                                                               segment.feature.df.appendage = segment.feature.df.name.append,
  ##                                                                               modelBuildingData.name = "modelBuildingData.rds") {

  ##     segment.feature.df.appendage = segment.feature.df.name.append

  ##                                         # list shapefiles with manually classified polygons
  ##     trainingShapefiles <- list.files(manuallyClassifiedPolygondir) %>%
  ##         str_sub(.,end = nchar(.)-4) %>%
  ##         unique()

  ##                                         # load training data from shapefiles into memory
  ##     shapelist.data <- lapply(trainingShapefiles, function(shp) {
  ##         readOGR(dsn = manuallyClassifiedPolygondir, layer = shp)@data %>%
  ##                                                                    na.omit() %>%
  ##                                                                    rename(zone = DN) %>%
  ##                                                                    filter(Class != "N")
  ##     })

  ##     names(shapelist.data) <- trainingShapefiles


  ##                                         # list .rds segment feature dataframe files
  ##     segmentFeatureDF.rds.files <- list.files(image.dir, full.names = T) %>%
  ##         str_extract(pattern = str_c(".*",segment.feature.df.appendage,".rds")) %>%
  ##         na.omit()

  ##     trainingData <- list()

  ##     foreach(j = seq_along(shapelist.data)) %do% {
  ##         d <- readRDS(segmentFeatureDF.rds.files[j])
  ##         trainingData[[j]] <- left_join(shapelist.data[[j]],d, by = c("zone" = "segment"))
  ##     }

  ##     trainingData <- bind_rows(trainingData) %>%
  ##         filter(Class != "N")

  ##     saveRDS(trainingData, file = str_c(image.dir, "/",modelBuildingData.name))

  ## }

#+end_src

* old pixel df
:PROPERTIES:
:ARCHIVE_TIME: 2016-07-02 Sat 14:21
:ARCHIVE_FILE: /ssh:kang:/home/erker/mydata2/Pjt_UTC/code/utc/R/utc.org
:ARCHIVE_OLPATH: Functions
:ARCHIVE_CATEGORY: utc
:END:
#+BEGIN_SRC R




  Create.Pixel.Feature.df <- function(tile.dir = dd.training.dir,
                                      tile.name = i,
                                      tile.appendage = ratio.tile.name.append,
                                      texture.pattern = texture.pattern,
                                      Pixel.DF.appendage = pixel.feature.df.appendage,
                                      band.names = band.names.wRatios) {
      tex.raster.names <- list.files(tile.dir, pattern = paste0(i,"_",texture.pattern,".tif$"), full.names = T)
      tex.band.names <- str_extract(tex.raster.names, texture.pattern)
      r <- stack(paste0(tile.dir,"/",tile.name,tile.appendage,".tif"))
      names(r) <- band.names
      tex <- sapply(tex.raster.names, raster) %>% stack()
      names(tex) <- tex.band.names
      r <- stack(r, tex)
      r.df <- as.data.frame(r, xy=T)
      saveRDS(r.df, file = paste0(tile.dir,"/", tile.name, Pixel.DF.appendage, ".rds"))
  }


  ## Create.Pixel.Feature.df <- function(tile.dir,
  ##                                     tile.name,
  ##                                     tile.appendage = ratio.tile.name.append,
  ##                                     Pixel.DF.appendage = pixel.feature.df.appendage,
  ##                                     band.names = band.names.wRatios) {
  ##     tex.raster.names <- list.files(
  ##     r <- stack(paste0(tile.dir,"/",tile.name,tile.appendage,".tif"))
  ##     names(r) <- band.names
  ##     tex <- lapply(
  ##     r.df <- as.data.frame(r, xy=T)
  ##     saveRDS(r.df, file = paste0(tile.dir,"/", tile.name, Pixel.DF.appendage, ".rds"))
  ## }



  ## Create.Pixel.Feature.df<- function(raster.list,
  ##                                    band.names = c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi")) {
  ##     r.df.list <- lapply(raster.list, function(r) {
  ##                             names(r) <- band.names
  ##                             as.data.frame(r, xy=T)
  ##            })
  ##     bind_rows(r.df.list)
  ## }

  Create.Pixel.Feature.df.noRowbind<- function(raster.list,
                                               band.names = c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi")) {
      r.df.list <- lapply(raster.list, function(r) {
          names(r) <- band.names
          as.data.frame(r, xy=T)
      })
      r.df.list
  }


  Create.Pixel.Feature.df.foreachTile <- function(dir = image.cropped.to.grid.accuracy.dir[i],
                                                  base_pattern = "mad-[0-9]+m-[0-9]+_with_ratios.tif",
                                                  band.names = c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi")) {

      file.list <- list.files(dir, full.names = T) %>%
          str_extract(., paste0(".*",base_pattern)) %>%
          na.omit() %>%
          unique()

      r.df.list <- lapply(file.list, function(r) {
          ras <- stack(r)
          names(ras) <- band.names
          ras.df <- as.data.frame(r, xy=T)

          r <- str_extract(r, base_pattern) %>%
              str_sub(., 1, -17)

          saveRDS(ras.df, file = str_c(dir,"/",r,"PixelFeatureDF",".rds"))
      })
  }

#+END_SRC

#+RESULTS:

